ARM GAS  /tmp/ccwLUfUl.s 			page 1


   1              		.cpu cortex-m3
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 1
   9              		.eabi_attribute 34, 1
  10              		.eabi_attribute 18, 4
  11              		.file	"UART.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.text.Thread_UART_RX,"ax",%progbits
  16              		.align	1
  17              		.global	Thread_UART_RX
  18              		.syntax unified
  19              		.thumb
  20              		.thumb_func
  21              		.fpu softvfp
  23              	Thread_UART_RX:
  24              	.LFB69:
  25              		.file 1 "Src/UART.c"
   1:Src/UART.c    **** #include <string.h>
   2:Src/UART.c    **** #include "main.h"
   3:Src/UART.c    **** #include "cmsis_os.h"
   4:Src/UART.c    **** 
   5:Src/UART.c    **** extern void Error_Handler(void);
   6:Src/UART.c    **** extern osThreadId_t UART_TXHandle;
   7:Src/UART.c    **** extern osThreadId_t UART_RXHandle;
   8:Src/UART.c    **** extern osMessageQueueId_t Queue_UART_TXHandle;
   9:Src/UART.c    **** extern osMessageQueueId_t Queue_UART_RXHandle;
  10:Src/UART.c    **** extern UART_HandleTypeDef huart1;
  11:Src/UART.c    **** 
  12:Src/UART.c    **** static uint32_t Thread_UART_RX_max_stack_size = 0;
  13:Src/UART.c    **** static uint32_t Thread_UART_TX_max_stack_size = 0;
  14:Src/UART.c    **** static uint16_t UART_TX_queue_max_size = 0;
  15:Src/UART.c    **** static uint16_t UART_RX_queue_max_size = 0;
  16:Src/UART.c    **** 
  17:Src/UART.c    **** void
  18:Src/UART.c    **** Thread_UART_RX(void)
  19:Src/UART.c    **** {
  26              		.loc 1 19 0
  27              		.cfi_startproc
  28              		@ args = 0, pretend = 0, frame = 0
  29              		@ frame_needed = 0, uses_anonymous_args = 0
  30 0000 08B5     		push	{r3, lr}
  31              	.LCFI0:
  32              		.cfi_def_cfa_offset 8
  33              		.cfi_offset 3, -8
  34              		.cfi_offset 14, -4
  35 0002 36E0     		b	.L10
  36              	.LVL0:
  37              	.L5:
  38              	.LBB2:
  20:Src/UART.c    ****     static char rx_msg[MAX_LOG_MSG_SIZE+1] = {0};
ARM GAS  /tmp/ccwLUfUl.s 			page 2


  21:Src/UART.c    ****     static uint8_t idx = MAX_LOG_MSG_SIZE;
  22:Src/UART.c    ****     
  23:Src/UART.c    ****     for (;;)
  24:Src/UART.c    ****     {
  25:Src/UART.c    ****         uint32_t Thread_UART_RX_stack_size = osThreadGetStackSpace(UART_RXHandle);
  26:Src/UART.c    ****         if ( Thread_UART_RX_stack_size > Thread_UART_RX_max_stack_size ) Thread_UART_RX_max_stack_s
  27:Src/UART.c    ****         HAL_UART_Receive_IT(&huart1, (uint8_t *)(&rx_msg[0]), MAX_LOG_MSG_SIZE);
  28:Src/UART.c    ****         while ( huart1.RxState != HAL_UART_STATE_READY )
  29:Src/UART.c    ****         {
  30:Src/UART.c    ****             for ( idx = MAX_LOG_MSG_SIZE; idx > 0; idx-- )
  39              		.loc 1 30 0 discriminator 2
  40 0004 234A     		ldr	r2, .L15
  41 0006 1378     		ldrb	r3, [r2]	@ zero_extendqisi2
  42 0008 013B     		subs	r3, r3, #1
  43 000a 1370     		strb	r3, [r2]
  44              	.L4:
  45              		.loc 1 30 0 is_stmt 0 discriminator 1
  46 000c 214B     		ldr	r3, .L15
  47 000e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
  48 0010 3BB1     		cbz	r3, .L12
  31:Src/UART.c    ****             {
  32:Src/UART.c    ****                 if ( rx_msg[idx] == '\n' )
  49              		.loc 1 32 0 is_stmt 1
  50 0012 214A     		ldr	r2, .L15+4
  51 0014 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
  52 0016 0A2B     		cmp	r3, #10
  53 0018 F4D1     		bne	.L5
  33:Src/UART.c    ****                 {
  34:Src/UART.c    ****                     HAL_UART_AbortReceive_IT(&huart1);
  54              		.loc 1 34 0
  55 001a 2048     		ldr	r0, .L15+8
  56 001c FFF7FEFF 		bl	HAL_UART_AbortReceive_IT
  57              	.LVL1:
  58 0020 F0E7     		b	.L5
  59              	.L12:
  35:Src/UART.c    ****                 }
  36:Src/UART.c    ****             }
  37:Src/UART.c    ****             osThreadYield();
  60              		.loc 1 37 0
  61 0022 FFF7FEFF 		bl	osThreadYield
  62              	.LVL2:
  63              	.L3:
  28:Src/UART.c    ****         {
  64              		.loc 1 28 0
  65 0026 1D4B     		ldr	r3, .L15+8
  66 0028 93F83A30 		ldrb	r3, [r3, #58]	@ zero_extendqisi2
  67 002c DBB2     		uxtb	r3, r3
  68 002e 202B     		cmp	r3, #32
  69 0030 03D0     		beq	.L13
  30:Src/UART.c    ****             {
  70              		.loc 1 30 0
  71 0032 4022     		movs	r2, #64
  72 0034 174B     		ldr	r3, .L15
  73 0036 1A70     		strb	r2, [r3]
  74 0038 E8E7     		b	.L4
  75              	.L13:
  38:Src/UART.c    ****         }
ARM GAS  /tmp/ccwLUfUl.s 			page 3


  39:Src/UART.c    ****       
  40:Src/UART.c    ****         //Echo received msg
  41:Src/UART.c    ****         for (idx = 0; rx_msg[idx]; idx++)
  76              		.loc 1 41 0
  77 003a 0022     		movs	r2, #0
  78 003c 154B     		ldr	r3, .L15
  79 003e 1A70     		strb	r2, [r3]
  80              	.L8:
  81              		.loc 1 41 0 is_stmt 0 discriminator 1
  82 0040 144B     		ldr	r3, .L15
  83 0042 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
  84 0044 144B     		ldr	r3, .L15+4
  85 0046 5B5C     		ldrb	r3, [r3, r1]	@ zero_extendqisi2
  86 0048 63B1     		cbz	r3, .L14
  42:Src/UART.c    ****         {
  43:Src/UART.c    ****             osMessageQueuePut(Queue_UART_TXHandle, &rx_msg[idx], 0, 0);
  87              		.loc 1 43 0 is_stmt 1 discriminator 3
  88 004a 0023     		movs	r3, #0
  89 004c 1A46     		mov	r2, r3
  90 004e 1248     		ldr	r0, .L15+4
  91 0050 0144     		add	r1, r1, r0
  92 0052 1348     		ldr	r0, .L15+12
  93 0054 0068     		ldr	r0, [r0]
  94 0056 FFF7FEFF 		bl	osMessageQueuePut
  95              	.LVL3:
  41:Src/UART.c    ****         {
  96              		.loc 1 41 0 discriminator 3
  97 005a 0E4A     		ldr	r2, .L15
  98 005c 1378     		ldrb	r3, [r2]	@ zero_extendqisi2
  99 005e 0133     		adds	r3, r3, #1
 100 0060 1370     		strb	r3, [r2]
 101 0062 EDE7     		b	.L8
 102              	.L14:
  44:Src/UART.c    ****         }
  45:Src/UART.c    ****         memset(&rx_msg[0], 0, MAX_LOG_MSG_SIZE);
 103              		.loc 1 45 0
 104 0064 4022     		movs	r2, #64
 105 0066 0021     		movs	r1, #0
 106 0068 0B48     		ldr	r0, .L15+4
 107 006a FFF7FEFF 		bl	memset
 108              	.LVL4:
  46:Src/UART.c    ****       
  47:Src/UART.c    ****         osThreadYield();
 109              		.loc 1 47 0
 110 006e FFF7FEFF 		bl	osThreadYield
 111              	.LVL5:
 112              	.L10:
  25:Src/UART.c    ****         if ( Thread_UART_RX_stack_size > Thread_UART_RX_max_stack_size ) Thread_UART_RX_max_stack_s
 113              		.loc 1 25 0
 114 0072 0C4B     		ldr	r3, .L15+16
 115 0074 1868     		ldr	r0, [r3]
 116 0076 FFF7FEFF 		bl	osThreadGetStackSpace
 117              	.LVL6:
  26:Src/UART.c    ****         HAL_UART_Receive_IT(&huart1, (uint8_t *)(&rx_msg[0]), MAX_LOG_MSG_SIZE);
 118              		.loc 1 26 0
 119 007a 0B4B     		ldr	r3, .L15+20
 120 007c 1B68     		ldr	r3, [r3]
ARM GAS  /tmp/ccwLUfUl.s 			page 4


 121 007e 9842     		cmp	r0, r3
 122 0080 01D9     		bls	.L2
  26:Src/UART.c    ****         HAL_UART_Receive_IT(&huart1, (uint8_t *)(&rx_msg[0]), MAX_LOG_MSG_SIZE);
 123              		.loc 1 26 0 is_stmt 0 discriminator 1
 124 0082 094B     		ldr	r3, .L15+20
 125 0084 1860     		str	r0, [r3]
 126              	.L2:
  27:Src/UART.c    ****         while ( huart1.RxState != HAL_UART_STATE_READY )
 127              		.loc 1 27 0 is_stmt 1
 128 0086 4022     		movs	r2, #64
 129 0088 0349     		ldr	r1, .L15+4
 130 008a 0448     		ldr	r0, .L15+8
 131              	.LVL7:
 132 008c FFF7FEFF 		bl	HAL_UART_Receive_IT
 133              	.LVL8:
  28:Src/UART.c    ****         {
 134              		.loc 1 28 0
 135 0090 C9E7     		b	.L3
 136              	.L16:
 137 0092 00BF     		.align	2
 138              	.L15:
 139 0094 00000000 		.word	.LANCHOR2
 140 0098 00000000 		.word	.LANCHOR1
 141 009c 00000000 		.word	huart1
 142 00a0 00000000 		.word	Queue_UART_TXHandle
 143 00a4 00000000 		.word	UART_RXHandle
 144 00a8 00000000 		.word	.LANCHOR0
 145              	.LBE2:
 146              		.cfi_endproc
 147              	.LFE69:
 149              		.section	.text.Thread_UART_TX,"ax",%progbits
 150              		.align	1
 151              		.global	Thread_UART_TX
 152              		.syntax unified
 153              		.thumb
 154              		.thumb_func
 155              		.fpu softvfp
 157              	Thread_UART_TX:
 158              	.LFB70:
  48:Src/UART.c    ****     }
  49:Src/UART.c    **** }
  50:Src/UART.c    **** 
  51:Src/UART.c    **** void
  52:Src/UART.c    **** Thread_UART_TX(void)
  53:Src/UART.c    **** {
 159              		.loc 1 53 0
 160              		.cfi_startproc
 161              		@ args = 0, pretend = 0, frame = 0
 162              		@ frame_needed = 0, uses_anonymous_args = 0
 163 0000 10B5     		push	{r4, lr}
 164              	.LCFI1:
 165              		.cfi_def_cfa_offset 8
 166              		.cfi_offset 4, -8
 167              		.cfi_offset 14, -4
 168 0002 10E0     		b	.L21
 169              	.LVL9:
 170              	.L20:
ARM GAS  /tmp/ccwLUfUl.s 			page 5


 171              	.LBB3:
  54:Src/UART.c    ****     static char ch;
  55:Src/UART.c    ****     
  56:Src/UART.c    ****     for (;;)
  57:Src/UART.c    ****     {
  58:Src/UART.c    ****         uint32_t Thread_UART_TX_stack_size = osThreadGetStackSpace(UART_TXHandle);
  59:Src/UART.c    ****         if ( Thread_UART_TX_stack_size > Thread_UART_TX_max_stack_size ) Thread_UART_TX_max_stack_s
  60:Src/UART.c    ****         
  61:Src/UART.c    ****         uint16_t UART_TX_queue_count = osMessageQueueGetCount(Queue_UART_TXHandle);
  62:Src/UART.c    ****         if ( UART_TX_queue_count > 0 )
  63:Src/UART.c    ****         {
  64:Src/UART.c    ****             if ( UART_TX_queue_count > UART_TX_queue_max_size ) UART_TX_queue_max_size = UART_TX_qu
  65:Src/UART.c    ****             osMessageQueueGet(Queue_UART_TXHandle, &ch, 0, 0);
 172              		.loc 1 65 0
 173 0004 144C     		ldr	r4, .L23
 174 0006 0023     		movs	r3, #0
 175 0008 1A46     		mov	r2, r3
 176 000a 2146     		mov	r1, r4
 177 000c 1348     		ldr	r0, .L23+4
 178              	.LVL10:
 179 000e 0068     		ldr	r0, [r0]
 180 0010 FFF7FEFF 		bl	osMessageQueueGet
 181              	.LVL11:
  66:Src/UART.c    ****             HAL_UART_Transmit(&huart1, (uint8_t *)(&ch), 1, HAL_MAX_DELAY);
 182              		.loc 1 66 0
 183 0014 4FF0FF33 		mov	r3, #-1
 184 0018 0122     		movs	r2, #1
 185 001a 2146     		mov	r1, r4
 186 001c 1048     		ldr	r0, .L23+8
 187 001e FFF7FEFF 		bl	HAL_UART_Transmit
 188              	.LVL12:
 189              	.L19:
  67:Src/UART.c    ****         }
  68:Src/UART.c    ****         osThreadYield();
 190              		.loc 1 68 0
 191 0022 FFF7FEFF 		bl	osThreadYield
 192              	.LVL13:
 193              	.L21:
  58:Src/UART.c    ****         if ( Thread_UART_TX_stack_size > Thread_UART_TX_max_stack_size ) Thread_UART_TX_max_stack_s
 194              		.loc 1 58 0
 195 0026 0F4B     		ldr	r3, .L23+12
 196 0028 1868     		ldr	r0, [r3]
 197 002a FFF7FEFF 		bl	osThreadGetStackSpace
 198              	.LVL14:
  59:Src/UART.c    ****         
 199              		.loc 1 59 0
 200 002e 0E4B     		ldr	r3, .L23+16
 201 0030 1B68     		ldr	r3, [r3]
 202 0032 9842     		cmp	r0, r3
 203 0034 01D9     		bls	.L18
  59:Src/UART.c    ****         
 204              		.loc 1 59 0 is_stmt 0 discriminator 1
 205 0036 0C4B     		ldr	r3, .L23+16
 206 0038 1860     		str	r0, [r3]
 207              	.L18:
  61:Src/UART.c    ****         if ( UART_TX_queue_count > 0 )
 208              		.loc 1 61 0 is_stmt 1
ARM GAS  /tmp/ccwLUfUl.s 			page 6


 209 003a 084B     		ldr	r3, .L23+4
 210 003c 1868     		ldr	r0, [r3]
 211              	.LVL15:
 212 003e FFF7FEFF 		bl	osMessageQueueGetCount
 213              	.LVL16:
 214 0042 80B2     		uxth	r0, r0
 215              	.LVL17:
  62:Src/UART.c    ****         {
 216              		.loc 1 62 0
 217 0044 0028     		cmp	r0, #0
 218 0046 ECD0     		beq	.L19
  64:Src/UART.c    ****             osMessageQueueGet(Queue_UART_TXHandle, &ch, 0, 0);
 219              		.loc 1 64 0
 220 0048 084B     		ldr	r3, .L23+20
 221 004a 1B88     		ldrh	r3, [r3]
 222 004c 9842     		cmp	r0, r3
 223 004e D9D9     		bls	.L20
  64:Src/UART.c    ****             osMessageQueueGet(Queue_UART_TXHandle, &ch, 0, 0);
 224              		.loc 1 64 0 is_stmt 0 discriminator 1
 225 0050 064B     		ldr	r3, .L23+20
 226 0052 1880     		strh	r0, [r3]	@ movhi
 227 0054 D6E7     		b	.L20
 228              	.L24:
 229 0056 00BF     		.align	2
 230              	.L23:
 231 0058 00000000 		.word	.LANCHOR5
 232 005c 00000000 		.word	Queue_UART_TXHandle
 233 0060 00000000 		.word	huart1
 234 0064 00000000 		.word	UART_TXHandle
 235 0068 00000000 		.word	.LANCHOR3
 236 006c 00000000 		.word	.LANCHOR4
 237              	.LBE3:
 238              		.cfi_endproc
 239              	.LFE70:
 241              		.section	.bss.Thread_UART_RX_max_stack_size,"aw",%nobits
 242              		.align	2
 243              		.set	.LANCHOR0,. + 0
 246              	Thread_UART_RX_max_stack_size:
 247 0000 00000000 		.space	4
 248              		.section	.bss.Thread_UART_TX_max_stack_size,"aw",%nobits
 249              		.align	2
 250              		.set	.LANCHOR3,. + 0
 253              	Thread_UART_TX_max_stack_size:
 254 0000 00000000 		.space	4
 255              		.section	.bss.UART_TX_queue_max_size,"aw",%nobits
 256              		.align	1
 257              		.set	.LANCHOR4,. + 0
 260              	UART_TX_queue_max_size:
 261 0000 0000     		.space	2
 262              		.section	.bss.ch.7323,"aw",%nobits
 263              		.set	.LANCHOR5,. + 0
 266              	ch.7323:
 267 0000 00       		.space	1
 268              		.section	.bss.rx_msg.7307,"aw",%nobits
 269              		.align	2
 270              		.set	.LANCHOR1,. + 0
 273              	rx_msg.7307:
ARM GAS  /tmp/ccwLUfUl.s 			page 7


 274 0000 00000000 		.space	65
 274      00000000 
 274      00000000 
 274      00000000 
 274      00000000 
 275              		.section	.data.idx.7308,"aw",%progbits
 276              		.set	.LANCHOR2,. + 0
 279              	idx.7308:
 280 0000 40       		.byte	64
 281              		.text
 282              	.Letext0:
 283              		.file 2 "/usr/include/newlib/machine/_default_types.h"
 284              		.file 3 "/usr/include/newlib/sys/lock.h"
 285              		.file 4 "/usr/include/newlib/sys/_types.h"
 286              		.file 5 "/usr/lib/gcc/arm-none-eabi/6.3.1/include/stddef.h"
 287              		.file 6 "/usr/include/newlib/sys/reent.h"
 288              		.file 7 "/usr/include/newlib/sys/_stdint.h"
 289              		.file 8 "Drivers/CMSIS/Include/core_cm3.h"
 290              		.file 9 "Drivers/CMSIS/Device/ST/STM32F1xx/Include/system_stm32f1xx.h"
 291              		.file 10 "Drivers/CMSIS/Device/ST/STM32F1xx/Include/stm32f103xb.h"
 292              		.file 11 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_def.h"
 293              		.file 12 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_dma.h"
 294              		.file 13 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_uart.h"
 295              		.file 14 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal.h"
 296              		.file 15 "Middlewares/Third_Party/FreeRTOS/Source/CMSIS_RTOS_V2/cmsis_os2.h"
ARM GAS  /tmp/ccwLUfUl.s 			page 8


DEFINED SYMBOLS
                            *ABS*:0000000000000000 UART.c
     /tmp/ccwLUfUl.s:16     .text.Thread_UART_RX:0000000000000000 $t
     /tmp/ccwLUfUl.s:23     .text.Thread_UART_RX:0000000000000000 Thread_UART_RX
     /tmp/ccwLUfUl.s:139    .text.Thread_UART_RX:0000000000000094 $d
     /tmp/ccwLUfUl.s:150    .text.Thread_UART_TX:0000000000000000 $t
     /tmp/ccwLUfUl.s:157    .text.Thread_UART_TX:0000000000000000 Thread_UART_TX
     /tmp/ccwLUfUl.s:231    .text.Thread_UART_TX:0000000000000058 $d
     /tmp/ccwLUfUl.s:242    .bss.Thread_UART_RX_max_stack_size:0000000000000000 $d
     /tmp/ccwLUfUl.s:246    .bss.Thread_UART_RX_max_stack_size:0000000000000000 Thread_UART_RX_max_stack_size
     /tmp/ccwLUfUl.s:249    .bss.Thread_UART_TX_max_stack_size:0000000000000000 $d
     /tmp/ccwLUfUl.s:253    .bss.Thread_UART_TX_max_stack_size:0000000000000000 Thread_UART_TX_max_stack_size
     /tmp/ccwLUfUl.s:256    .bss.UART_TX_queue_max_size:0000000000000000 $d
     /tmp/ccwLUfUl.s:260    .bss.UART_TX_queue_max_size:0000000000000000 UART_TX_queue_max_size
     /tmp/ccwLUfUl.s:266    .bss.ch.7323:0000000000000000 ch.7323
     /tmp/ccwLUfUl.s:267    .bss.ch.7323:0000000000000000 $d
     /tmp/ccwLUfUl.s:269    .bss.rx_msg.7307:0000000000000000 $d
     /tmp/ccwLUfUl.s:273    .bss.rx_msg.7307:0000000000000000 rx_msg.7307
     /tmp/ccwLUfUl.s:279    .data.idx.7308:0000000000000000 idx.7308
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
HAL_UART_AbortReceive_IT
osThreadYield
osMessageQueuePut
memset
osThreadGetStackSpace
HAL_UART_Receive_IT
huart1
Queue_UART_TXHandle
UART_RXHandle
osMessageQueueGet
HAL_UART_Transmit
osMessageQueueGetCount
UART_TXHandle
