ARM GAS  /tmp/ccEb8Khs.s 			page 1


   1              		.cpu cortex-m3
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 1
   9              		.eabi_attribute 34, 1
  10              		.eabi_attribute 18, 4
  11              		.file	"user_diskio.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.text.USER_initialize,"ax",%progbits
  16              		.align	1
  17              		.global	USER_initialize
  18              		.syntax unified
  19              		.thumb
  20              		.thumb_func
  21              		.fpu softvfp
  23              	USER_initialize:
  24              	.LFB69:
  25              		.file 1 "Src/user_diskio.c"
   1:Src/user_diskio.c **** /* USER CODE BEGIN Header */
   2:Src/user_diskio.c **** /**
   3:Src/user_diskio.c ****  ******************************************************************************
   4:Src/user_diskio.c ****   * @file    user_diskio.c
   5:Src/user_diskio.c ****   * @brief   This file includes a diskio driver skeleton to be completed by the user.
   6:Src/user_diskio.c ****   ******************************************************************************
   7:Src/user_diskio.c ****   * @attention
   8:Src/user_diskio.c ****   *
   9:Src/user_diskio.c ****   * <h2><center>&copy; Copyright (c) 2020 STMicroelectronics.
  10:Src/user_diskio.c ****   * All rights reserved.</center></h2>
  11:Src/user_diskio.c ****   *
  12:Src/user_diskio.c ****   * This software component is licensed by ST under Ultimate Liberty license
  13:Src/user_diskio.c ****   * SLA0044, the "License"; You may not use this file except in compliance with
  14:Src/user_diskio.c ****   * the License. You may obtain a copy of the License at:
  15:Src/user_diskio.c ****   *                             www.st.com/SLA0044
  16:Src/user_diskio.c ****   *
  17:Src/user_diskio.c ****   ******************************************************************************
  18:Src/user_diskio.c ****   */
  19:Src/user_diskio.c ****  /* USER CODE END Header */
  20:Src/user_diskio.c **** 
  21:Src/user_diskio.c **** #ifdef USE_OBSOLETE_USER_CODE_SECTION_0
  22:Src/user_diskio.c **** /* 
  23:Src/user_diskio.c ****  * Warning: the user section 0 is no more in use (starting from CubeMx version 4.16.0)
  24:Src/user_diskio.c ****  * To be suppressed in the future. 
  25:Src/user_diskio.c ****  * Kept to ensure backward compatibility with previous CubeMx versions when 
  26:Src/user_diskio.c ****  * migrating projects. 
  27:Src/user_diskio.c ****  * User code previously added there should be copied in the new user sections before 
  28:Src/user_diskio.c ****  * the section contents can be deleted.
  29:Src/user_diskio.c ****  */
  30:Src/user_diskio.c **** /* USER CODE BEGIN 0 */
  31:Src/user_diskio.c **** /* USER CODE END 0 */
  32:Src/user_diskio.c **** #endif
  33:Src/user_diskio.c **** 
ARM GAS  /tmp/ccEb8Khs.s 			page 2


  34:Src/user_diskio.c **** /* USER CODE BEGIN DECL */
  35:Src/user_diskio.c **** 
  36:Src/user_diskio.c **** /* Includes ------------------------------------------------------------------*/
  37:Src/user_diskio.c **** #include <string.h>
  38:Src/user_diskio.c **** #include "ff_gen_drv.h"
  39:Src/user_diskio.c **** 
  40:Src/user_diskio.c **** /* Private typedef -----------------------------------------------------------*/
  41:Src/user_diskio.c **** /* Private define ------------------------------------------------------------*/
  42:Src/user_diskio.c **** 
  43:Src/user_diskio.c **** /* Private variables ---------------------------------------------------------*/
  44:Src/user_diskio.c **** /* Disk status */
  45:Src/user_diskio.c **** static volatile DSTATUS Stat = STA_NOINIT;
  46:Src/user_diskio.c **** 
  47:Src/user_diskio.c **** /* USER CODE END DECL */
  48:Src/user_diskio.c **** 
  49:Src/user_diskio.c **** /* Private function prototypes -----------------------------------------------*/
  50:Src/user_diskio.c **** DSTATUS USER_initialize (BYTE pdrv);
  51:Src/user_diskio.c **** DSTATUS USER_status (BYTE pdrv);
  52:Src/user_diskio.c **** DRESULT USER_read (BYTE pdrv, BYTE *buff, DWORD sector, UINT count);
  53:Src/user_diskio.c **** #if _USE_WRITE == 1
  54:Src/user_diskio.c ****   DRESULT USER_write (BYTE pdrv, const BYTE *buff, DWORD sector, UINT count);  
  55:Src/user_diskio.c **** #endif /* _USE_WRITE == 1 */
  56:Src/user_diskio.c **** #if _USE_IOCTL == 1
  57:Src/user_diskio.c ****   DRESULT USER_ioctl (BYTE pdrv, BYTE cmd, void *buff);
  58:Src/user_diskio.c **** #endif /* _USE_IOCTL == 1 */
  59:Src/user_diskio.c **** 
  60:Src/user_diskio.c **** Diskio_drvTypeDef  USER_Driver =
  61:Src/user_diskio.c **** {
  62:Src/user_diskio.c ****   USER_initialize,
  63:Src/user_diskio.c ****   USER_status,
  64:Src/user_diskio.c ****   USER_read, 
  65:Src/user_diskio.c **** #if  _USE_WRITE
  66:Src/user_diskio.c ****   USER_write,
  67:Src/user_diskio.c **** #endif  /* _USE_WRITE == 1 */  
  68:Src/user_diskio.c **** #if  _USE_IOCTL == 1
  69:Src/user_diskio.c ****   USER_ioctl,
  70:Src/user_diskio.c **** #endif /* _USE_IOCTL == 1 */
  71:Src/user_diskio.c **** };
  72:Src/user_diskio.c **** 
  73:Src/user_diskio.c **** /* Private functions ---------------------------------------------------------*/
  74:Src/user_diskio.c **** 
  75:Src/user_diskio.c **** /**
  76:Src/user_diskio.c ****   * @brief  Initializes a Drive
  77:Src/user_diskio.c ****   * @param  pdrv: Physical drive number (0..)
  78:Src/user_diskio.c ****   * @retval DSTATUS: Operation status
  79:Src/user_diskio.c ****   */
  80:Src/user_diskio.c **** DSTATUS USER_initialize (
  81:Src/user_diskio.c **** 	BYTE pdrv           /* Physical drive nmuber to identify the drive */
  82:Src/user_diskio.c **** )
  83:Src/user_diskio.c **** {
  26              		.loc 1 83 0
  27              		.cfi_startproc
  28              		@ args = 0, pretend = 0, frame = 0
  29              		@ frame_needed = 0, uses_anonymous_args = 0
  30              		@ link register save eliminated.
  31              	.LVL0:
  84:Src/user_diskio.c ****   /* USER CODE BEGIN INIT */
ARM GAS  /tmp/ccEb8Khs.s 			page 3


  85:Src/user_diskio.c ****     Stat = STA_NOINIT;
  32              		.loc 1 85 0
  33 0000 024B     		ldr	r3, .L2
  34 0002 0122     		movs	r2, #1
  35 0004 1A70     		strb	r2, [r3]
  86:Src/user_diskio.c ****     return Stat;
  36              		.loc 1 86 0
  37 0006 1878     		ldrb	r0, [r3]	@ zero_extendqisi2
  38              	.LVL1:
  87:Src/user_diskio.c ****   /* USER CODE END INIT */
  88:Src/user_diskio.c **** }
  39              		.loc 1 88 0
  40 0008 7047     		bx	lr
  41              	.L3:
  42 000a 00BF     		.align	2
  43              	.L2:
  44 000c 00000000 		.word	.LANCHOR0
  45              		.cfi_endproc
  46              	.LFE69:
  48              		.section	.text.USER_status,"ax",%progbits
  49              		.align	1
  50              		.global	USER_status
  51              		.syntax unified
  52              		.thumb
  53              		.thumb_func
  54              		.fpu softvfp
  56              	USER_status:
  57              	.LFB70:
  89:Src/user_diskio.c ****  
  90:Src/user_diskio.c **** /**
  91:Src/user_diskio.c ****   * @brief  Gets Disk Status 
  92:Src/user_diskio.c ****   * @param  pdrv: Physical drive number (0..)
  93:Src/user_diskio.c ****   * @retval DSTATUS: Operation status
  94:Src/user_diskio.c ****   */
  95:Src/user_diskio.c **** DSTATUS USER_status (
  96:Src/user_diskio.c **** 	BYTE pdrv       /* Physical drive number to identify the drive */
  97:Src/user_diskio.c **** )
  98:Src/user_diskio.c **** {
  58              		.loc 1 98 0
  59              		.cfi_startproc
  60              		@ args = 0, pretend = 0, frame = 0
  61              		@ frame_needed = 0, uses_anonymous_args = 0
  62              		@ link register save eliminated.
  63              	.LVL2:
  99:Src/user_diskio.c ****   /* USER CODE BEGIN STATUS */
 100:Src/user_diskio.c ****     Stat = STA_NOINIT;
  64              		.loc 1 100 0
  65 0000 024B     		ldr	r3, .L5
  66 0002 0122     		movs	r2, #1
  67 0004 1A70     		strb	r2, [r3]
 101:Src/user_diskio.c ****     return Stat;
  68              		.loc 1 101 0
  69 0006 1878     		ldrb	r0, [r3]	@ zero_extendqisi2
  70              	.LVL3:
 102:Src/user_diskio.c ****   /* USER CODE END STATUS */
 103:Src/user_diskio.c **** }
  71              		.loc 1 103 0
ARM GAS  /tmp/ccEb8Khs.s 			page 4


  72 0008 7047     		bx	lr
  73              	.L6:
  74 000a 00BF     		.align	2
  75              	.L5:
  76 000c 00000000 		.word	.LANCHOR0
  77              		.cfi_endproc
  78              	.LFE70:
  80              		.section	.text.USER_read,"ax",%progbits
  81              		.align	1
  82              		.global	USER_read
  83              		.syntax unified
  84              		.thumb
  85              		.thumb_func
  86              		.fpu softvfp
  88              	USER_read:
  89              	.LFB71:
 104:Src/user_diskio.c **** 
 105:Src/user_diskio.c **** /**
 106:Src/user_diskio.c ****   * @brief  Reads Sector(s) 
 107:Src/user_diskio.c ****   * @param  pdrv: Physical drive number (0..)
 108:Src/user_diskio.c ****   * @param  *buff: Data buffer to store read data
 109:Src/user_diskio.c ****   * @param  sector: Sector address (LBA)
 110:Src/user_diskio.c ****   * @param  count: Number of sectors to read (1..128)
 111:Src/user_diskio.c ****   * @retval DRESULT: Operation result
 112:Src/user_diskio.c ****   */
 113:Src/user_diskio.c **** DRESULT USER_read (
 114:Src/user_diskio.c **** 	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
 115:Src/user_diskio.c **** 	BYTE *buff,     /* Data buffer to store read data */
 116:Src/user_diskio.c **** 	DWORD sector,   /* Sector address in LBA */
 117:Src/user_diskio.c **** 	UINT count      /* Number of sectors to read */
 118:Src/user_diskio.c **** )
 119:Src/user_diskio.c **** {
  90              		.loc 1 119 0
  91              		.cfi_startproc
  92              		@ args = 0, pretend = 0, frame = 0
  93              		@ frame_needed = 0, uses_anonymous_args = 0
  94              		@ link register save eliminated.
  95              	.LVL4:
 120:Src/user_diskio.c ****   /* USER CODE BEGIN READ */
 121:Src/user_diskio.c ****     return RES_OK;
 122:Src/user_diskio.c ****   /* USER CODE END READ */
 123:Src/user_diskio.c **** }
  96              		.loc 1 123 0
  97 0000 0020     		movs	r0, #0
  98              	.LVL5:
  99 0002 7047     		bx	lr
 100              		.cfi_endproc
 101              	.LFE71:
 103              		.section	.text.USER_write,"ax",%progbits
 104              		.align	1
 105              		.global	USER_write
 106              		.syntax unified
 107              		.thumb
 108              		.thumb_func
 109              		.fpu softvfp
 111              	USER_write:
 112              	.LFB72:
ARM GAS  /tmp/ccEb8Khs.s 			page 5


 124:Src/user_diskio.c **** 
 125:Src/user_diskio.c **** /**
 126:Src/user_diskio.c ****   * @brief  Writes Sector(s)  
 127:Src/user_diskio.c ****   * @param  pdrv: Physical drive number (0..)
 128:Src/user_diskio.c ****   * @param  *buff: Data to be written
 129:Src/user_diskio.c ****   * @param  sector: Sector address (LBA)
 130:Src/user_diskio.c ****   * @param  count: Number of sectors to write (1..128)
 131:Src/user_diskio.c ****   * @retval DRESULT: Operation result
 132:Src/user_diskio.c ****   */
 133:Src/user_diskio.c **** #if _USE_WRITE == 1
 134:Src/user_diskio.c **** DRESULT USER_write (
 135:Src/user_diskio.c **** 	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
 136:Src/user_diskio.c **** 	const BYTE *buff,   /* Data to be written */
 137:Src/user_diskio.c **** 	DWORD sector,       /* Sector address in LBA */
 138:Src/user_diskio.c **** 	UINT count          /* Number of sectors to write */
 139:Src/user_diskio.c **** )
 140:Src/user_diskio.c **** { 
 113              		.loc 1 140 0
 114              		.cfi_startproc
 115              		@ args = 0, pretend = 0, frame = 0
 116              		@ frame_needed = 0, uses_anonymous_args = 0
 117              		@ link register save eliminated.
 118              	.LVL6:
 141:Src/user_diskio.c ****   /* USER CODE BEGIN WRITE */
 142:Src/user_diskio.c ****   /* USER CODE HERE */
 143:Src/user_diskio.c ****     return RES_OK;
 144:Src/user_diskio.c ****   /* USER CODE END WRITE */
 145:Src/user_diskio.c **** }
 119              		.loc 1 145 0
 120 0000 0020     		movs	r0, #0
 121              	.LVL7:
 122 0002 7047     		bx	lr
 123              		.cfi_endproc
 124              	.LFE72:
 126              		.section	.text.USER_ioctl,"ax",%progbits
 127              		.align	1
 128              		.global	USER_ioctl
 129              		.syntax unified
 130              		.thumb
 131              		.thumb_func
 132              		.fpu softvfp
 134              	USER_ioctl:
 135              	.LFB73:
 146:Src/user_diskio.c **** #endif /* _USE_WRITE == 1 */
 147:Src/user_diskio.c **** 
 148:Src/user_diskio.c **** /**
 149:Src/user_diskio.c ****   * @brief  I/O control operation  
 150:Src/user_diskio.c ****   * @param  pdrv: Physical drive number (0..)
 151:Src/user_diskio.c ****   * @param  cmd: Control code
 152:Src/user_diskio.c ****   * @param  *buff: Buffer to send/receive control data
 153:Src/user_diskio.c ****   * @retval DRESULT: Operation result
 154:Src/user_diskio.c ****   */
 155:Src/user_diskio.c **** #if _USE_IOCTL == 1
 156:Src/user_diskio.c **** DRESULT USER_ioctl (
 157:Src/user_diskio.c **** 	BYTE pdrv,      /* Physical drive nmuber (0..) */
 158:Src/user_diskio.c **** 	BYTE cmd,       /* Control code */
 159:Src/user_diskio.c **** 	void *buff      /* Buffer to send/receive control data */
ARM GAS  /tmp/ccEb8Khs.s 			page 6


 160:Src/user_diskio.c **** )
 161:Src/user_diskio.c **** {
 136              		.loc 1 161 0
 137              		.cfi_startproc
 138              		@ args = 0, pretend = 0, frame = 0
 139              		@ frame_needed = 0, uses_anonymous_args = 0
 140              		@ link register save eliminated.
 141              	.LVL8:
 162:Src/user_diskio.c ****   /* USER CODE BEGIN IOCTL */
 163:Src/user_diskio.c ****     DRESULT res = RES_ERROR;
 164:Src/user_diskio.c ****     return res;
 165:Src/user_diskio.c ****   /* USER CODE END IOCTL */
 166:Src/user_diskio.c **** }
 142              		.loc 1 166 0
 143 0000 0120     		movs	r0, #1
 144              	.LVL9:
 145 0002 7047     		bx	lr
 146              		.cfi_endproc
 147              	.LFE73:
 149              		.global	USER_Driver
 150              		.section	.data.Stat,"aw",%progbits
 151              		.set	.LANCHOR0,. + 0
 154              	Stat:
 155 0000 01       		.byte	1
 156              		.section	.data.USER_Driver,"aw",%progbits
 157              		.align	2
 160              	USER_Driver:
 161 0000 00000000 		.word	USER_initialize
 162 0004 00000000 		.word	USER_status
 163 0008 00000000 		.word	USER_read
 164 000c 00000000 		.word	USER_write
 165 0010 00000000 		.word	USER_ioctl
 166              		.text
 167              	.Letext0:
 168              		.file 2 "/usr/include/newlib/machine/_default_types.h"
 169              		.file 3 "/usr/include/newlib/sys/lock.h"
 170              		.file 4 "/usr/include/newlib/sys/_types.h"
 171              		.file 5 "/usr/lib/gcc/arm-none-eabi/6.3.1/include/stddef.h"
 172              		.file 6 "/usr/include/newlib/sys/reent.h"
 173              		.file 7 "Middlewares/Third_Party/FatFs/src/integer.h"
 174              		.file 8 "Middlewares/Third_Party/FatFs/src/diskio.h"
 175              		.file 9 "/usr/include/newlib/sys/_stdint.h"
 176              		.file 10 "Drivers/CMSIS/Include/core_cm3.h"
 177              		.file 11 "Drivers/CMSIS/Device/ST/STM32F1xx/Include/system_stm32f1xx.h"
 178              		.file 12 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal.h"
 179              		.file 13 "Middlewares/Third_Party/FatFs/src/ff_gen_drv.h"
ARM GAS  /tmp/ccEb8Khs.s 			page 7


DEFINED SYMBOLS
                            *ABS*:0000000000000000 user_diskio.c
     /tmp/ccEb8Khs.s:16     .text.USER_initialize:0000000000000000 $t
     /tmp/ccEb8Khs.s:23     .text.USER_initialize:0000000000000000 USER_initialize
     /tmp/ccEb8Khs.s:44     .text.USER_initialize:000000000000000c $d
     /tmp/ccEb8Khs.s:49     .text.USER_status:0000000000000000 $t
     /tmp/ccEb8Khs.s:56     .text.USER_status:0000000000000000 USER_status
     /tmp/ccEb8Khs.s:76     .text.USER_status:000000000000000c $d
     /tmp/ccEb8Khs.s:81     .text.USER_read:0000000000000000 $t
     /tmp/ccEb8Khs.s:88     .text.USER_read:0000000000000000 USER_read
     /tmp/ccEb8Khs.s:104    .text.USER_write:0000000000000000 $t
     /tmp/ccEb8Khs.s:111    .text.USER_write:0000000000000000 USER_write
     /tmp/ccEb8Khs.s:127    .text.USER_ioctl:0000000000000000 $t
     /tmp/ccEb8Khs.s:134    .text.USER_ioctl:0000000000000000 USER_ioctl
     /tmp/ccEb8Khs.s:160    .data.USER_Driver:0000000000000000 USER_Driver
     /tmp/ccEb8Khs.s:154    .data.Stat:0000000000000000 Stat
     /tmp/ccEb8Khs.s:157    .data.USER_Driver:0000000000000000 $d
                     .debug_frame:0000000000000010 $d

NO UNDEFINED SYMBOLS
