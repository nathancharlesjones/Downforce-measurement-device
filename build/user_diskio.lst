ARM GAS  /tmp/cc1e1p1A.s 			page 1


   1              		.cpu cortex-m3
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 1
   9              		.eabi_attribute 34, 1
  10              		.eabi_attribute 18, 4
  11              		.file	"user_diskio.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.text.USER_ioctl,"ax",%progbits
  16              		.align	1
  17              		.global	USER_ioctl
  18              		.syntax unified
  19              		.thumb
  20              		.thumb_func
  21              		.fpu softvfp
  23              	USER_ioctl:
  24              	.LFB73:
  25              		.file 1 "Src/user_diskio.c"
   1:Src/user_diskio.c **** /* USER CODE BEGIN Header */
   2:Src/user_diskio.c **** /**
   3:Src/user_diskio.c ****  ******************************************************************************
   4:Src/user_diskio.c ****   * @file    user_diskio.c
   5:Src/user_diskio.c ****   * @brief   This file includes a diskio driver skeleton to be completed by the user.
   6:Src/user_diskio.c ****   ******************************************************************************
   7:Src/user_diskio.c ****   * @attention
   8:Src/user_diskio.c ****   *
   9:Src/user_diskio.c ****   * <h2><center>&copy; Copyright (c) 2020 STMicroelectronics.
  10:Src/user_diskio.c ****   * All rights reserved.</center></h2>
  11:Src/user_diskio.c ****   *
  12:Src/user_diskio.c ****   * This software component is licensed by ST under Ultimate Liberty license
  13:Src/user_diskio.c ****   * SLA0044, the "License"; You may not use this file except in compliance with
  14:Src/user_diskio.c ****   * the License. You may obtain a copy of the License at:
  15:Src/user_diskio.c ****   *                             www.st.com/SLA0044
  16:Src/user_diskio.c ****   *
  17:Src/user_diskio.c ****   ******************************************************************************
  18:Src/user_diskio.c ****   */
  19:Src/user_diskio.c ****  /* USER CODE END Header */
  20:Src/user_diskio.c **** 
  21:Src/user_diskio.c **** #ifdef USE_OBSOLETE_USER_CODE_SECTION_0
  22:Src/user_diskio.c **** /* 
  23:Src/user_diskio.c ****  * Warning: the user section 0 is no more in use (starting from CubeMx version 4.16.0)
  24:Src/user_diskio.c ****  * To be suppressed in the future. 
  25:Src/user_diskio.c ****  * Kept to ensure backward compatibility with previous CubeMx versions when 
  26:Src/user_diskio.c ****  * migrating projects. 
  27:Src/user_diskio.c ****  * User code previously added there should be copied in the new user sections before 
  28:Src/user_diskio.c ****  * the section contents can be deleted.
  29:Src/user_diskio.c ****  */
  30:Src/user_diskio.c **** /* USER CODE BEGIN 0 */
  31:Src/user_diskio.c **** /* USER CODE END 0 */
  32:Src/user_diskio.c **** #endif
  33:Src/user_diskio.c **** 
ARM GAS  /tmp/cc1e1p1A.s 			page 2


  34:Src/user_diskio.c **** /* USER CODE BEGIN DECL */
  35:Src/user_diskio.c **** 
  36:Src/user_diskio.c **** /* Includes ------------------------------------------------------------------*/
  37:Src/user_diskio.c **** #include <string.h>
  38:Src/user_diskio.c **** #include "ff_gen_drv.h"
  39:Src/user_diskio.c **** #include "sd_io.h"
  40:Src/user_diskio.c **** #include "user_diskio.h"
  41:Src/user_diskio.c **** 
  42:Src/user_diskio.c **** /* Private typedef -----------------------------------------------------------*/
  43:Src/user_diskio.c **** /* Private define ------------------------------------------------------------*/
  44:Src/user_diskio.c **** 
  45:Src/user_diskio.c **** /* Private variables ---------------------------------------------------------*/
  46:Src/user_diskio.c **** /* Disk status */
  47:Src/user_diskio.c **** static volatile DSTATUS Stat = STA_NOINIT;
  48:Src/user_diskio.c **** SD_DEV dev[1];
  49:Src/user_diskio.c **** 
  50:Src/user_diskio.c **** /* USER CODE END DECL */
  51:Src/user_diskio.c **** 
  52:Src/user_diskio.c **** /* Private function prototypes -----------------------------------------------*/
  53:Src/user_diskio.c **** DSTATUS USER_initialize (BYTE pdrv);
  54:Src/user_diskio.c **** DSTATUS USER_status (BYTE pdrv);
  55:Src/user_diskio.c **** DRESULT USER_read (BYTE pdrv, BYTE *buff, DWORD sector, UINT count);
  56:Src/user_diskio.c **** #if _USE_WRITE == 1
  57:Src/user_diskio.c ****   DRESULT USER_write (BYTE pdrv, const BYTE *buff, DWORD sector, UINT count);  
  58:Src/user_diskio.c **** #endif /* _USE_WRITE == 1 */
  59:Src/user_diskio.c **** #if _USE_IOCTL == 1
  60:Src/user_diskio.c ****   DRESULT USER_ioctl (BYTE pdrv, BYTE cmd, void *buff);
  61:Src/user_diskio.c **** #endif /* _USE_IOCTL == 1 */
  62:Src/user_diskio.c **** 
  63:Src/user_diskio.c **** Diskio_drvTypeDef  USER_Driver =
  64:Src/user_diskio.c **** {
  65:Src/user_diskio.c ****   USER_initialize,
  66:Src/user_diskio.c ****   USER_status,
  67:Src/user_diskio.c ****   USER_read, 
  68:Src/user_diskio.c **** #if  _USE_WRITE
  69:Src/user_diskio.c ****   USER_write,
  70:Src/user_diskio.c **** #endif  /* _USE_WRITE == 1 */  
  71:Src/user_diskio.c **** #if  _USE_IOCTL == 1
  72:Src/user_diskio.c ****   USER_ioctl,
  73:Src/user_diskio.c **** #endif /* _USE_IOCTL == 1 */
  74:Src/user_diskio.c **** };
  75:Src/user_diskio.c **** 
  76:Src/user_diskio.c **** /* Private functions ---------------------------------------------------------*/
  77:Src/user_diskio.c **** 
  78:Src/user_diskio.c **** /**
  79:Src/user_diskio.c ****   * @brief  Initializes a Drive
  80:Src/user_diskio.c ****   * @param  pdrv: Physical drive number (0..)
  81:Src/user_diskio.c ****   * @retval DSTATUS: Operation status
  82:Src/user_diskio.c ****   */
  83:Src/user_diskio.c **** DSTATUS USER_initialize (
  84:Src/user_diskio.c **** 	BYTE pdrv           /* Physical drive nmuber to identify the drive */
  85:Src/user_diskio.c **** )
  86:Src/user_diskio.c **** {
  87:Src/user_diskio.c ****   /* USER CODE BEGIN INIT */
  88:Src/user_diskio.c ****     Stat = STA_NOINIT;
  89:Src/user_diskio.c ****     if ( SD_Init(dev) == SD_OK ) Stat &= ~STA_NOINIT;
  90:Src/user_diskio.c ****     return Stat;
ARM GAS  /tmp/cc1e1p1A.s 			page 3


  91:Src/user_diskio.c ****   /* USER CODE END INIT */
  92:Src/user_diskio.c **** }
  93:Src/user_diskio.c ****  
  94:Src/user_diskio.c **** /**
  95:Src/user_diskio.c ****   * @brief  Gets Disk Status 
  96:Src/user_diskio.c ****   * @param  pdrv: Physical drive number (0..)
  97:Src/user_diskio.c ****   * @retval DSTATUS: Operation status
  98:Src/user_diskio.c ****   */
  99:Src/user_diskio.c **** DSTATUS USER_status (
 100:Src/user_diskio.c **** 	BYTE pdrv       /* Physical drive number to identify the drive */
 101:Src/user_diskio.c **** )
 102:Src/user_diskio.c **** {
 103:Src/user_diskio.c ****   /* USER CODE BEGIN STATUS */
 104:Src/user_diskio.c ****     Stat = STA_NOINIT;
 105:Src/user_diskio.c ****     if ( SD_Status(dev) == SD_OK ) Stat &= ~STA_NOINIT;
 106:Src/user_diskio.c ****     return Stat;
 107:Src/user_diskio.c ****   /* USER CODE END STATUS */
 108:Src/user_diskio.c **** }
 109:Src/user_diskio.c **** 
 110:Src/user_diskio.c **** /**
 111:Src/user_diskio.c ****   * @brief  Reads Sector(s) 
 112:Src/user_diskio.c ****   * @param  pdrv: Physical drive number (0..)
 113:Src/user_diskio.c ****   * @param  *buff: Data buffer to store read data
 114:Src/user_diskio.c ****   * @param  sector: Sector address (LBA)
 115:Src/user_diskio.c ****   * @param  count: Number of sectors to read (1..128)
 116:Src/user_diskio.c ****   * @retval DRESULT: Operation result
 117:Src/user_diskio.c ****   */
 118:Src/user_diskio.c **** DRESULT USER_read (
 119:Src/user_diskio.c **** 	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
 120:Src/user_diskio.c **** 	BYTE *buff,     /* Data buffer to store read data */
 121:Src/user_diskio.c **** 	DWORD sector,   /* Sector address in LBA */
 122:Src/user_diskio.c **** 	UINT count      /* Number of sectors to read */
 123:Src/user_diskio.c **** )
 124:Src/user_diskio.c **** {
 125:Src/user_diskio.c ****   /* USER CODE BEGIN READ */
 126:Src/user_diskio.c ****     DRESULT res = RES_ERROR;
 127:Src/user_diskio.c ****     if ( SD_Read(dev, (void *)buff, sector, 0, (WORD)count) ==  SD_OK ) res = RES_OK;
 128:Src/user_diskio.c ****     return res;
 129:Src/user_diskio.c ****   /* USER CODE END READ */
 130:Src/user_diskio.c **** }
 131:Src/user_diskio.c **** 
 132:Src/user_diskio.c **** /**
 133:Src/user_diskio.c ****   * @brief  Writes Sector(s)  
 134:Src/user_diskio.c ****   * @param  pdrv: Physical drive number (0..)
 135:Src/user_diskio.c ****   * @param  *buff: Data to be written
 136:Src/user_diskio.c ****   * @param  sector: Sector address (LBA)
 137:Src/user_diskio.c ****   * @param  count: Number of sectors to write (1..128)
 138:Src/user_diskio.c ****   * @retval DRESULT: Operation result
 139:Src/user_diskio.c ****   */
 140:Src/user_diskio.c **** #if _USE_WRITE == 1
 141:Src/user_diskio.c **** DRESULT USER_write (
 142:Src/user_diskio.c **** 	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
 143:Src/user_diskio.c **** 	const BYTE *buff,   /* Data to be written */
 144:Src/user_diskio.c **** 	DWORD sector,       /* Sector address in LBA */
 145:Src/user_diskio.c **** 	UINT count          /* Number of sectors to write */
 146:Src/user_diskio.c **** )
 147:Src/user_diskio.c **** { 
ARM GAS  /tmp/cc1e1p1A.s 			page 4


 148:Src/user_diskio.c ****   /* USER CODE BEGIN WRITE */
 149:Src/user_diskio.c ****   /* USER CODE HERE */
 150:Src/user_diskio.c ****     BYTE * _buff = buff;
 151:Src/user_diskio.c ****     DRESULT res = RES_OK;
 152:Src/user_diskio.c ****     while (count--)
 153:Src/user_diskio.c ****     {
 154:Src/user_diskio.c ****         if ( SD_Write(dev, (void *)_buff, sector) != SD_OK ) res = RES_ERROR;
 155:Src/user_diskio.c ****         _buff += THIS_BLOCK_SIZE;
 156:Src/user_diskio.c ****     }
 157:Src/user_diskio.c ****     return res;
 158:Src/user_diskio.c ****   /* USER CODE END WRITE */
 159:Src/user_diskio.c **** }
 160:Src/user_diskio.c **** #endif /* _USE_WRITE == 1 */
 161:Src/user_diskio.c **** 
 162:Src/user_diskio.c **** /**
 163:Src/user_diskio.c ****   * @brief  I/O control operation  
 164:Src/user_diskio.c ****   * @param  pdrv: Physical drive number (0..)
 165:Src/user_diskio.c ****   * @param  cmd: Control code
 166:Src/user_diskio.c ****   * @param  *buff: Buffer to send/receive control data
 167:Src/user_diskio.c ****   * @retval DRESULT: Operation result
 168:Src/user_diskio.c ****   */
 169:Src/user_diskio.c **** #if _USE_IOCTL == 1
 170:Src/user_diskio.c **** DRESULT USER_ioctl (
 171:Src/user_diskio.c **** 	BYTE pdrv,      /* Physical drive nmuber (0..) */
 172:Src/user_diskio.c **** 	BYTE cmd,       /* Control code */
 173:Src/user_diskio.c **** 	void *buff      /* Buffer to send/receive control data */
 174:Src/user_diskio.c **** )
 175:Src/user_diskio.c **** {
  26              		.loc 1 175 0
  27              		.cfi_startproc
  28              		@ args = 0, pretend = 0, frame = 0
  29              		@ frame_needed = 0, uses_anonymous_args = 0
  30              		@ link register save eliminated.
  31              	.LVL0:
 176:Src/user_diskio.c ****   /* USER CODE BEGIN IOCTL */
 177:Src/user_diskio.c ****     DRESULT res = RES_ERROR;
 178:Src/user_diskio.c ****     return res;
 179:Src/user_diskio.c ****   /* USER CODE END IOCTL */
 180:Src/user_diskio.c **** }
  32              		.loc 1 180 0
  33 0000 0120     		movs	r0, #1
  34              	.LVL1:
  35 0002 7047     		bx	lr
  36              		.cfi_endproc
  37              	.LFE73:
  39              		.section	.text.USER_initialize,"ax",%progbits
  40              		.align	1
  41              		.global	USER_initialize
  42              		.syntax unified
  43              		.thumb
  44              		.thumb_func
  45              		.fpu softvfp
  47              	USER_initialize:
  48              	.LFB69:
  86:Src/user_diskio.c ****   /* USER CODE BEGIN INIT */
  49              		.loc 1 86 0
  50              		.cfi_startproc
ARM GAS  /tmp/cc1e1p1A.s 			page 5


  51              		@ args = 0, pretend = 0, frame = 0
  52              		@ frame_needed = 0, uses_anonymous_args = 0
  53              	.LVL2:
  54 0000 08B5     		push	{r3, lr}
  55              	.LCFI0:
  56              		.cfi_def_cfa_offset 8
  57              		.cfi_offset 3, -8
  58              		.cfi_offset 14, -4
  88:Src/user_diskio.c ****     if ( SD_Init(dev) == SD_OK ) Stat &= ~STA_NOINIT;
  59              		.loc 1 88 0
  60 0002 0122     		movs	r2, #1
  61 0004 064B     		ldr	r3, .L5
  62 0006 1A70     		strb	r2, [r3]
  89:Src/user_diskio.c ****     return Stat;
  63              		.loc 1 89 0
  64 0008 0648     		ldr	r0, .L5+4
  65              	.LVL3:
  66 000a FFF7FEFF 		bl	SD_Init
  67              	.LVL4:
  68 000e 20B9     		cbnz	r0, .L3
  89:Src/user_diskio.c ****     return Stat;
  69              		.loc 1 89 0 is_stmt 0 discriminator 1
  70 0010 034A     		ldr	r2, .L5
  71 0012 1378     		ldrb	r3, [r2]	@ zero_extendqisi2
  72 0014 03F0FE03 		and	r3, r3, #254
  73 0018 1370     		strb	r3, [r2]
  74              	.L3:
  90:Src/user_diskio.c ****   /* USER CODE END INIT */
  75              		.loc 1 90 0 is_stmt 1
  76 001a 014B     		ldr	r3, .L5
  77 001c 1878     		ldrb	r0, [r3]	@ zero_extendqisi2
  92:Src/user_diskio.c ****  
  78              		.loc 1 92 0
  79 001e 08BD     		pop	{r3, pc}
  80              	.L6:
  81              		.align	2
  82              	.L5:
  83 0020 00000000 		.word	.LANCHOR0
  84 0024 00000000 		.word	dev
  85              		.cfi_endproc
  86              	.LFE69:
  88              		.section	.text.USER_status,"ax",%progbits
  89              		.align	1
  90              		.global	USER_status
  91              		.syntax unified
  92              		.thumb
  93              		.thumb_func
  94              		.fpu softvfp
  96              	USER_status:
  97              	.LFB70:
 102:Src/user_diskio.c ****   /* USER CODE BEGIN STATUS */
  98              		.loc 1 102 0
  99              		.cfi_startproc
 100              		@ args = 0, pretend = 0, frame = 0
 101              		@ frame_needed = 0, uses_anonymous_args = 0
 102              	.LVL5:
 103 0000 08B5     		push	{r3, lr}
ARM GAS  /tmp/cc1e1p1A.s 			page 6


 104              	.LCFI1:
 105              		.cfi_def_cfa_offset 8
 106              		.cfi_offset 3, -8
 107              		.cfi_offset 14, -4
 104:Src/user_diskio.c ****     if ( SD_Status(dev) == SD_OK ) Stat &= ~STA_NOINIT;
 108              		.loc 1 104 0
 109 0002 0122     		movs	r2, #1
 110 0004 064B     		ldr	r3, .L10
 111 0006 1A70     		strb	r2, [r3]
 105:Src/user_diskio.c ****     return Stat;
 112              		.loc 1 105 0
 113 0008 0648     		ldr	r0, .L10+4
 114              	.LVL6:
 115 000a FFF7FEFF 		bl	SD_Status
 116              	.LVL7:
 117 000e 20B9     		cbnz	r0, .L8
 105:Src/user_diskio.c ****     return Stat;
 118              		.loc 1 105 0 is_stmt 0 discriminator 1
 119 0010 034A     		ldr	r2, .L10
 120 0012 1378     		ldrb	r3, [r2]	@ zero_extendqisi2
 121 0014 03F0FE03 		and	r3, r3, #254
 122 0018 1370     		strb	r3, [r2]
 123              	.L8:
 106:Src/user_diskio.c ****   /* USER CODE END STATUS */
 124              		.loc 1 106 0 is_stmt 1
 125 001a 014B     		ldr	r3, .L10
 126 001c 1878     		ldrb	r0, [r3]	@ zero_extendqisi2
 108:Src/user_diskio.c **** 
 127              		.loc 1 108 0
 128 001e 08BD     		pop	{r3, pc}
 129              	.L11:
 130              		.align	2
 131              	.L10:
 132 0020 00000000 		.word	.LANCHOR0
 133 0024 00000000 		.word	dev
 134              		.cfi_endproc
 135              	.LFE70:
 137              		.section	.text.USER_read,"ax",%progbits
 138              		.align	1
 139              		.global	USER_read
 140              		.syntax unified
 141              		.thumb
 142              		.thumb_func
 143              		.fpu softvfp
 145              	USER_read:
 146              	.LFB71:
 124:Src/user_diskio.c ****   /* USER CODE BEGIN READ */
 147              		.loc 1 124 0
 148              		.cfi_startproc
 149              		@ args = 0, pretend = 0, frame = 0
 150              		@ frame_needed = 0, uses_anonymous_args = 0
 151              	.LVL8:
 152 0000 00B5     		push	{lr}
 153              	.LCFI2:
 154              		.cfi_def_cfa_offset 4
 155              		.cfi_offset 14, -4
 156 0002 83B0     		sub	sp, sp, #12
ARM GAS  /tmp/cc1e1p1A.s 			page 7


 157              	.LCFI3:
 158              		.cfi_def_cfa_offset 16
 159              	.LVL9:
 127:Src/user_diskio.c ****     return res;
 160              		.loc 1 127 0
 161 0004 9BB2     		uxth	r3, r3
 162              	.LVL10:
 163 0006 0093     		str	r3, [sp]
 164 0008 0023     		movs	r3, #0
 165 000a 0548     		ldr	r0, .L17
 166              	.LVL11:
 167 000c FFF7FEFF 		bl	SD_Read
 168              	.LVL12:
 169 0010 18B9     		cbnz	r0, .L16
 170 0012 0020     		movs	r0, #0
 171              	.L13:
 172              	.LVL13:
 130:Src/user_diskio.c **** 
 173              		.loc 1 130 0
 174 0014 03B0     		add	sp, sp, #12
 175              	.LCFI4:
 176              		.cfi_remember_state
 177              		.cfi_def_cfa_offset 4
 178              		@ sp needed
 179 0016 5DF804FB 		ldr	pc, [sp], #4
 180              	.LVL14:
 181              	.L16:
 182              	.LCFI5:
 183              		.cfi_restore_state
 126:Src/user_diskio.c ****     if ( SD_Read(dev, (void *)buff, sector, 0, (WORD)count) ==  SD_OK ) res = RES_OK;
 184              		.loc 1 126 0
 185 001a 0120     		movs	r0, #1
 186 001c FAE7     		b	.L13
 187              	.L18:
 188 001e 00BF     		.align	2
 189              	.L17:
 190 0020 00000000 		.word	dev
 191              		.cfi_endproc
 192              	.LFE71:
 194              		.section	.text.USER_write,"ax",%progbits
 195              		.align	1
 196              		.global	USER_write
 197              		.syntax unified
 198              		.thumb
 199              		.thumb_func
 200              		.fpu softvfp
 202              	USER_write:
 203              	.LFB72:
 147:Src/user_diskio.c ****   /* USER CODE BEGIN WRITE */
 204              		.loc 1 147 0
 205              		.cfi_startproc
 206              		@ args = 0, pretend = 0, frame = 0
 207              		@ frame_needed = 0, uses_anonymous_args = 0
 208              	.LVL15:
 209 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 210              	.LCFI6:
 211              		.cfi_def_cfa_offset 24
ARM GAS  /tmp/cc1e1p1A.s 			page 8


 212              		.cfi_offset 3, -24
 213              		.cfi_offset 4, -20
 214              		.cfi_offset 5, -16
 215              		.cfi_offset 6, -12
 216              		.cfi_offset 7, -8
 217              		.cfi_offset 14, -4
 218 0002 1646     		mov	r6, r2
 219              	.LVL16:
 150:Src/user_diskio.c ****     DRESULT res = RES_OK;
 220              		.loc 1 150 0
 221 0004 0C46     		mov	r4, r1
 151:Src/user_diskio.c ****     while (count--)
 222              		.loc 1 151 0
 223 0006 0027     		movs	r7, #0
 152:Src/user_diskio.c ****     {
 224              		.loc 1 152 0
 225 0008 02E0     		b	.L20
 226              	.LVL17:
 227              	.L21:
 155:Src/user_diskio.c ****     }
 228              		.loc 1 155 0
 229 000a 04F50074 		add	r4, r4, #512
 230              	.LVL18:
 152:Src/user_diskio.c ****     {
 231              		.loc 1 152 0
 232 000e 2B46     		mov	r3, r5
 233              	.LVL19:
 234              	.L20:
 235 0010 5D1E     		subs	r5, r3, #1
 236              	.LVL20:
 237 0012 43B1     		cbz	r3, .L25
 154:Src/user_diskio.c ****         _buff += THIS_BLOCK_SIZE;
 238              		.loc 1 154 0
 239 0014 3246     		mov	r2, r6
 240 0016 2146     		mov	r1, r4
 241 0018 0448     		ldr	r0, .L26
 242 001a FFF7FEFF 		bl	SD_Write
 243              	.LVL21:
 244 001e 0028     		cmp	r0, #0
 245 0020 F3D0     		beq	.L21
 246 0022 0127     		movs	r7, #1
 247              	.LVL22:
 248 0024 F1E7     		b	.L21
 249              	.LVL23:
 250              	.L25:
 159:Src/user_diskio.c **** #endif /* _USE_WRITE == 1 */
 251              		.loc 1 159 0
 252 0026 3846     		mov	r0, r7
 253 0028 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 254              	.LVL24:
 255              	.L27:
 256 002a 00BF     		.align	2
 257              	.L26:
 258 002c 00000000 		.word	dev
 259              		.cfi_endproc
 260              	.LFE72:
 262              		.global	USER_Driver
ARM GAS  /tmp/cc1e1p1A.s 			page 9


 263              		.comm	dev,8,4
 264              		.section	.data.Stat,"aw",%progbits
 265              		.set	.LANCHOR0,. + 0
 268              	Stat:
 269 0000 01       		.byte	1
 270              		.section	.data.USER_Driver,"aw",%progbits
 271              		.align	2
 274              	USER_Driver:
 275 0000 00000000 		.word	USER_initialize
 276 0004 00000000 		.word	USER_status
 277 0008 00000000 		.word	USER_read
 278 000c 00000000 		.word	USER_write
 279 0010 00000000 		.word	USER_ioctl
 280              		.text
 281              	.Letext0:
 282              		.file 2 "/usr/include/newlib/machine/_default_types.h"
 283              		.file 3 "/usr/include/newlib/sys/lock.h"
 284              		.file 4 "/usr/include/newlib/sys/_types.h"
 285              		.file 5 "/usr/lib/gcc/arm-none-eabi/6.3.1/include/stddef.h"
 286              		.file 6 "/usr/include/newlib/sys/reent.h"
 287              		.file 7 "Middlewares/Third_Party/FatFs/src/integer.h"
 288              		.file 8 "Middlewares/Third_Party/FatFs/src/diskio.h"
 289              		.file 9 "/usr/include/newlib/sys/_stdint.h"
 290              		.file 10 "Drivers/CMSIS/Include/core_cm3.h"
 291              		.file 11 "Drivers/CMSIS/Device/ST/STM32F1xx/Include/system_stm32f1xx.h"
 292              		.file 12 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal.h"
 293              		.file 13 "Middlewares/Third_Party/FatFs/src/ff_gen_drv.h"
 294              		.file 14 "Middlewares/Third_Party/ulibSD/integer_ulibsd.h"
 295              		.file 15 "Middlewares/Third_Party/ulibSD/sd_io.h"
 296              		.file 16 "Inc/user_diskio.h"
ARM GAS  /tmp/cc1e1p1A.s 			page 10


DEFINED SYMBOLS
                            *ABS*:0000000000000000 user_diskio.c
     /tmp/cc1e1p1A.s:16     .text.USER_ioctl:0000000000000000 $t
     /tmp/cc1e1p1A.s:23     .text.USER_ioctl:0000000000000000 USER_ioctl
     /tmp/cc1e1p1A.s:40     .text.USER_initialize:0000000000000000 $t
     /tmp/cc1e1p1A.s:47     .text.USER_initialize:0000000000000000 USER_initialize
     /tmp/cc1e1p1A.s:83     .text.USER_initialize:0000000000000020 $d
                            *COM*:0000000000000008 dev
     /tmp/cc1e1p1A.s:89     .text.USER_status:0000000000000000 $t
     /tmp/cc1e1p1A.s:96     .text.USER_status:0000000000000000 USER_status
     /tmp/cc1e1p1A.s:132    .text.USER_status:0000000000000020 $d
     /tmp/cc1e1p1A.s:138    .text.USER_read:0000000000000000 $t
     /tmp/cc1e1p1A.s:145    .text.USER_read:0000000000000000 USER_read
     /tmp/cc1e1p1A.s:190    .text.USER_read:0000000000000020 $d
     /tmp/cc1e1p1A.s:195    .text.USER_write:0000000000000000 $t
     /tmp/cc1e1p1A.s:202    .text.USER_write:0000000000000000 USER_write
     /tmp/cc1e1p1A.s:258    .text.USER_write:000000000000002c $d
     /tmp/cc1e1p1A.s:274    .data.USER_Driver:0000000000000000 USER_Driver
     /tmp/cc1e1p1A.s:268    .data.Stat:0000000000000000 Stat
     /tmp/cc1e1p1A.s:271    .data.USER_Driver:0000000000000000 $d
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
SD_Init
SD_Status
SD_Read
SD_Write
