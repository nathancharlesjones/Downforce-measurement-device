ARM GAS  /tmp/cckW4jPf.s 			page 1


   1              		.cpu cortex-m3
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 1
   9              		.eabi_attribute 34, 1
  10              		.eabi_attribute 18, 4
  11              		.file	"main.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.text.Tsk_LED,"ax",%progbits
  16              		.align	1
  17              		.global	Tsk_LED
  18              		.syntax unified
  19              		.thumb
  20              		.thumb_func
  21              		.fpu softvfp
  23              	Tsk_LED:
  24              	.LFB79:
  25              		.file 1 "Src/main.c"
   1:Src/main.c    **** /* USER CODE BEGIN Header */
   2:Src/main.c    **** /**
   3:Src/main.c    ****   ******************************************************************************
   4:Src/main.c    ****   * @file           : main.c
   5:Src/main.c    ****   * @brief          : Main program body
   6:Src/main.c    ****   ******************************************************************************
   7:Src/main.c    ****   * @attention
   8:Src/main.c    ****   *
   9:Src/main.c    ****   * <h2><center>&copy; Copyright (c) 2020 STMicroelectronics.
  10:Src/main.c    ****   * All rights reserved.</center></h2>
  11:Src/main.c    ****   *
  12:Src/main.c    ****   * This software component is licensed by ST under Ultimate Liberty license
  13:Src/main.c    ****   * SLA0044, the "License"; You may not use this file except in compliance with
  14:Src/main.c    ****   * the License. You may obtain a copy of the License at:
  15:Src/main.c    ****   *                             www.st.com/SLA0044
  16:Src/main.c    ****   *
  17:Src/main.c    ****   ******************************************************************************
  18:Src/main.c    ****   */
  19:Src/main.c    **** /* USER CODE END Header */
  20:Src/main.c    **** 
  21:Src/main.c    **** /* Includes ------------------------------------------------------------------*/
  22:Src/main.c    **** #include "main.h"
  23:Src/main.c    **** #include "cmsis_os.h"
  24:Src/main.c    **** #include "fatfs.h"
  25:Src/main.c    **** 
  26:Src/main.c    **** /* Private includes ----------------------------------------------------------*/
  27:Src/main.c    **** /* USER CODE BEGIN Includes */
  28:Src/main.c    **** #include <stdio.h>
  29:Src/main.c    **** #include <string.h>
  30:Src/main.c    **** #include "sd_io.h"
  31:Src/main.c    **** #include "ADC.h"
  32:Src/main.c    **** #include "UART.h"
  33:Src/main.c    **** /* USER CODE END Includes */
ARM GAS  /tmp/cckW4jPf.s 			page 2


  34:Src/main.c    **** 
  35:Src/main.c    **** /* Private typedef -----------------------------------------------------------*/
  36:Src/main.c    **** /* USER CODE BEGIN PTD */
  37:Src/main.c    **** 
  38:Src/main.c    **** /* USER CODE END PTD */
  39:Src/main.c    **** 
  40:Src/main.c    **** /* Private define ------------------------------------------------------------*/
  41:Src/main.c    **** /* USER CODE BEGIN PD */
  42:Src/main.c    **** 
  43:Src/main.c    **** /* USER CODE END PD */
  44:Src/main.c    **** 
  45:Src/main.c    **** /* Private macro -------------------------------------------------------------*/
  46:Src/main.c    **** /* USER CODE BEGIN PM */
  47:Src/main.c    **** 
  48:Src/main.c    **** /* USER CODE END PM */
  49:Src/main.c    **** 
  50:Src/main.c    **** /* Private variables ---------------------------------------------------------*/
  51:Src/main.c    **** ADC_HandleTypeDef hadc1;
  52:Src/main.c    **** 
  53:Src/main.c    **** RTC_HandleTypeDef hrtc;
  54:Src/main.c    **** 
  55:Src/main.c    **** SPI_HandleTypeDef hspi1;
  56:Src/main.c    **** 
  57:Src/main.c    **** UART_HandleTypeDef huart1;
  58:Src/main.c    **** 
  59:Src/main.c    **** /* Definitions for ADC_LightSensor */
  60:Src/main.c    **** osThreadId_t ADC_LightSensorHandle;
  61:Src/main.c    **** const osThreadAttr_t ADC_LightSensor_attributes = {
  62:Src/main.c    ****   .name = "ADC_LightSensor",
  63:Src/main.c    ****   .priority = (osPriority_t) osPriorityNormal,
  64:Src/main.c    ****   .stack_size = 512
  65:Src/main.c    **** };
  66:Src/main.c    **** /* Definitions for UART_TX */
  67:Src/main.c    **** osThreadId_t UART_TXHandle;
  68:Src/main.c    **** const osThreadAttr_t UART_TX_attributes = {
  69:Src/main.c    ****   .name = "UART_TX",
  70:Src/main.c    ****   .priority = (osPriority_t) osPriorityLow,
  71:Src/main.c    ****   .stack_size = 128
  72:Src/main.c    **** };
  73:Src/main.c    **** /* Definitions for LED */
  74:Src/main.c    **** osThreadId_t LEDHandle;
  75:Src/main.c    **** const osThreadAttr_t LED_attributes = {
  76:Src/main.c    ****   .name = "LED",
  77:Src/main.c    ****   .priority = (osPriority_t) osPriorityLow,
  78:Src/main.c    ****   .stack_size = 128
  79:Src/main.c    **** };
  80:Src/main.c    **** /* Definitions for UART_RX */
  81:Src/main.c    **** osThreadId_t UART_RXHandle;
  82:Src/main.c    **** const osThreadAttr_t UART_RX_attributes = {
  83:Src/main.c    ****   .name = "UART_RX",
  84:Src/main.c    ****   .priority = (osPriority_t) osPriorityLow,
  85:Src/main.c    ****   .stack_size = 128
  86:Src/main.c    **** };
  87:Src/main.c    **** /* Definitions for Queue_UART_RX */
  88:Src/main.c    **** osMessageQueueId_t Queue_UART_RXHandle;
  89:Src/main.c    **** const osMessageQueueAttr_t Queue_UART_RX_attributes = {
  90:Src/main.c    ****   .name = "Queue_UART_RX"
ARM GAS  /tmp/cckW4jPf.s 			page 3


  91:Src/main.c    **** };
  92:Src/main.c    **** /* Definitions for Queue_UART_TX */
  93:Src/main.c    **** osMessageQueueId_t Queue_UART_TXHandle;
  94:Src/main.c    **** const osMessageQueueAttr_t Queue_UART_TX_attributes = {
  95:Src/main.c    ****   .name = "Queue_UART_TX"
  96:Src/main.c    **** };
  97:Src/main.c    **** /* USER CODE BEGIN PV */
  98:Src/main.c    **** 
  99:Src/main.c    **** /* USER CODE END PV */
 100:Src/main.c    **** 
 101:Src/main.c    **** /* Private function prototypes -----------------------------------------------*/
 102:Src/main.c    **** void SystemClock_Config(void);
 103:Src/main.c    **** static void MX_GPIO_Init(void);
 104:Src/main.c    **** static void MX_USART1_UART_Init(void);
 105:Src/main.c    **** static void MX_ADC1_Init(void);
 106:Src/main.c    **** static void MX_RTC_Init(void);
 107:Src/main.c    **** static void MX_SPI1_Init(void);
 108:Src/main.c    **** void Tsk_ADC_LightSensor(void *argument);
 109:Src/main.c    **** void Tsk_UART_TX(void *argument);
 110:Src/main.c    **** void Tsk_LED(void *argument);
 111:Src/main.c    **** void Tsk_UART_RX(void *argument);
 112:Src/main.c    **** 
 113:Src/main.c    **** /* USER CODE BEGIN PFP */
 114:Src/main.c    **** 
 115:Src/main.c    **** /* USER CODE END PFP */
 116:Src/main.c    **** 
 117:Src/main.c    **** /* Private user code ---------------------------------------------------------*/
 118:Src/main.c    **** /* USER CODE BEGIN 0 */
 119:Src/main.c    **** 
 120:Src/main.c    **** /* USER CODE END 0 */
 121:Src/main.c    **** 
 122:Src/main.c    **** /**
 123:Src/main.c    ****   * @brief  The application entry point.
 124:Src/main.c    ****   * @retval int
 125:Src/main.c    ****   */
 126:Src/main.c    **** int main(void)
 127:Src/main.c    **** {
 128:Src/main.c    ****   /* USER CODE BEGIN 1 */
 129:Src/main.c    ****   SD_DEV dev[1];
 130:Src/main.c    ****   char write_buffer[512] = "Test message.\n";
 131:Src/main.c    ****   char read_buffer[512] = {0};
 132:Src/main.c    ****   /* USER CODE END 1 */
 133:Src/main.c    ****   
 134:Src/main.c    **** 
 135:Src/main.c    ****   /* MCU Configuration--------------------------------------------------------*/
 136:Src/main.c    **** 
 137:Src/main.c    ****   /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
 138:Src/main.c    ****   HAL_Init();
 139:Src/main.c    **** 
 140:Src/main.c    ****   /* USER CODE BEGIN Init */
 141:Src/main.c    ****   
 142:Src/main.c    ****   /* USER CODE END Init */
 143:Src/main.c    **** 
 144:Src/main.c    ****   /* Configure the system clock */
 145:Src/main.c    ****   SystemClock_Config();
 146:Src/main.c    **** 
 147:Src/main.c    ****   /* USER CODE BEGIN SysInit */
ARM GAS  /tmp/cckW4jPf.s 			page 4


 148:Src/main.c    ****   
 149:Src/main.c    ****   /* USER CODE END SysInit */
 150:Src/main.c    **** 
 151:Src/main.c    ****   /* Initialize all configured peripherals */
 152:Src/main.c    ****   MX_GPIO_Init();
 153:Src/main.c    ****   MX_USART1_UART_Init();
 154:Src/main.c    ****   MX_ADC1_Init();
 155:Src/main.c    ****   MX_RTC_Init();
 156:Src/main.c    ****   MX_SPI1_Init();
 157:Src/main.c    ****   MX_FATFS_Init();
 158:Src/main.c    ****   /* USER CODE BEGIN 2 */
 159:Src/main.c    ****   if ( SD_Init(dev) != SD_OK )
 160:Src/main.c    ****   {
 161:Src/main.c    ****       Error_Handler();
 162:Src/main.c    ****   }
 163:Src/main.c    ****   if ( SD_Write(dev, (void *)write_buffer, 0) != SD_OK )
 164:Src/main.c    ****   {
 165:Src/main.c    ****       Error_Handler();
 166:Src/main.c    ****   }
 167:Src/main.c    ****   if ( SD_Read(dev, (void *)read_buffer, 0, 0, 512) != SD_OK )
 168:Src/main.c    ****   {
 169:Src/main.c    ****       Error_Handler();
 170:Src/main.c    ****   }
 171:Src/main.c    ****   uint8_t read_buffer_size = (uint8_t)strlen(read_buffer);
 172:Src/main.c    ****   HAL_UART_Transmit(&huart1, (uint8_t *)read_buffer, read_buffer_size, HAL_MAX_DELAY);
 173:Src/main.c    ****   /* USER CODE END 2 */
 174:Src/main.c    ****   /* Init scheduler */
 175:Src/main.c    ****   osKernelInitialize();
 176:Src/main.c    **** 
 177:Src/main.c    ****   /* USER CODE BEGIN RTOS_MUTEX */
 178:Src/main.c    ****   /* add mutexes, ... */
 179:Src/main.c    ****   /* USER CODE END RTOS_MUTEX */
 180:Src/main.c    **** 
 181:Src/main.c    ****   /* USER CODE BEGIN RTOS_SEMAPHORES */
 182:Src/main.c    ****   /* add semaphores, ... */
 183:Src/main.c    ****   /* USER CODE END RTOS_SEMAPHORES */
 184:Src/main.c    **** 
 185:Src/main.c    ****   /* USER CODE BEGIN RTOS_TIMERS */
 186:Src/main.c    ****   /* start timers, add new ones, ... */
 187:Src/main.c    ****   /* USER CODE END RTOS_TIMERS */
 188:Src/main.c    **** 
 189:Src/main.c    ****   /* Create the queue(s) */
 190:Src/main.c    ****   /* creation of Queue_UART_RX */
 191:Src/main.c    ****   Queue_UART_RXHandle = osMessageQueueNew (128, sizeof(char), &Queue_UART_RX_attributes);
 192:Src/main.c    **** 
 193:Src/main.c    ****   /* creation of Queue_UART_TX */
 194:Src/main.c    ****   Queue_UART_TXHandle = osMessageQueueNew (128, sizeof(char), &Queue_UART_TX_attributes);
 195:Src/main.c    **** 
 196:Src/main.c    ****   /* USER CODE BEGIN RTOS_QUEUES */
 197:Src/main.c    ****   /* add queues, ... */
 198:Src/main.c    ****   /* USER CODE END RTOS_QUEUES */
 199:Src/main.c    **** 
 200:Src/main.c    ****   /* Create the thread(s) */
 201:Src/main.c    ****   /* creation of ADC_LightSensor */
 202:Src/main.c    ****   ADC_LightSensorHandle = osThreadNew(Tsk_ADC_LightSensor, NULL, &ADC_LightSensor_attributes);
 203:Src/main.c    **** 
 204:Src/main.c    ****   /* creation of UART_TX */
ARM GAS  /tmp/cckW4jPf.s 			page 5


 205:Src/main.c    ****   UART_TXHandle = osThreadNew(Tsk_UART_TX, NULL, &UART_TX_attributes);
 206:Src/main.c    **** 
 207:Src/main.c    ****   /* creation of LED */
 208:Src/main.c    ****   LEDHandle = osThreadNew(Tsk_LED, NULL, &LED_attributes);
 209:Src/main.c    **** 
 210:Src/main.c    ****   /* creation of UART_RX */
 211:Src/main.c    ****   UART_RXHandle = osThreadNew(Tsk_UART_RX, NULL, &UART_RX_attributes);
 212:Src/main.c    **** 
 213:Src/main.c    ****   /* USER CODE BEGIN RTOS_THREADS */
 214:Src/main.c    ****   /* add threads, ... */
 215:Src/main.c    ****   /* USER CODE END RTOS_THREADS */
 216:Src/main.c    **** 
 217:Src/main.c    ****   /* Start scheduler */
 218:Src/main.c    ****   osKernelStart();
 219:Src/main.c    ****  
 220:Src/main.c    ****   /* We should never get here as control is now taken by the scheduler */
 221:Src/main.c    **** 
 222:Src/main.c    ****   /* Infinite loop */
 223:Src/main.c    ****   /* USER CODE BEGIN WHILE */
 224:Src/main.c    ****   while (1)
 225:Src/main.c    ****   {
 226:Src/main.c    ****     /* USER CODE END WHILE */
 227:Src/main.c    **** 
 228:Src/main.c    ****     /* USER CODE BEGIN 3 */
 229:Src/main.c    ****   }
 230:Src/main.c    ****   /* USER CODE END 3 */
 231:Src/main.c    **** }
 232:Src/main.c    **** 
 233:Src/main.c    **** /**
 234:Src/main.c    ****   * @brief System Clock Configuration
 235:Src/main.c    ****   * @retval None
 236:Src/main.c    ****   */
 237:Src/main.c    **** void SystemClock_Config(void)
 238:Src/main.c    **** {
 239:Src/main.c    ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 240:Src/main.c    ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 241:Src/main.c    ****   RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 242:Src/main.c    **** 
 243:Src/main.c    ****   /** Initializes the CPU, AHB and APB busses clocks 
 244:Src/main.c    ****   */
 245:Src/main.c    ****   RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 246:Src/main.c    ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 247:Src/main.c    ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 248:Src/main.c    ****   RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 249:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 250:Src/main.c    ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 251:Src/main.c    ****   {
 252:Src/main.c    ****     Error_Handler();
 253:Src/main.c    ****   }
 254:Src/main.c    ****   /** Initializes the CPU, AHB and APB busses clocks 
 255:Src/main.c    ****   */
 256:Src/main.c    ****   RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 257:Src/main.c    ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 258:Src/main.c    ****   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 259:Src/main.c    ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 260:Src/main.c    ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 261:Src/main.c    ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
ARM GAS  /tmp/cckW4jPf.s 			page 6


 262:Src/main.c    **** 
 263:Src/main.c    ****   if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 264:Src/main.c    ****   {
 265:Src/main.c    ****     Error_Handler();
 266:Src/main.c    ****   }
 267:Src/main.c    ****   PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_ADC;
 268:Src/main.c    ****   PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 269:Src/main.c    ****   PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 270:Src/main.c    ****   if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 271:Src/main.c    ****   {
 272:Src/main.c    ****     Error_Handler();
 273:Src/main.c    ****   }
 274:Src/main.c    **** }
 275:Src/main.c    **** 
 276:Src/main.c    **** /**
 277:Src/main.c    ****   * @brief ADC1 Initialization Function
 278:Src/main.c    ****   * @param None
 279:Src/main.c    ****   * @retval None
 280:Src/main.c    ****   */
 281:Src/main.c    **** static void MX_ADC1_Init(void)
 282:Src/main.c    **** {
 283:Src/main.c    **** 
 284:Src/main.c    ****   /* USER CODE BEGIN ADC1_Init 0 */
 285:Src/main.c    **** 
 286:Src/main.c    ****   /* USER CODE END ADC1_Init 0 */
 287:Src/main.c    **** 
 288:Src/main.c    ****   ADC_ChannelConfTypeDef sConfig = {0};
 289:Src/main.c    **** 
 290:Src/main.c    ****   /* USER CODE BEGIN ADC1_Init 1 */
 291:Src/main.c    **** 
 292:Src/main.c    ****   /* USER CODE END ADC1_Init 1 */
 293:Src/main.c    ****   /** Common config 
 294:Src/main.c    ****   */
 295:Src/main.c    ****   hadc1.Instance = ADC1;
 296:Src/main.c    ****   hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 297:Src/main.c    ****   hadc1.Init.ContinuousConvMode = DISABLE;
 298:Src/main.c    ****   hadc1.Init.DiscontinuousConvMode = DISABLE;
 299:Src/main.c    ****   hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 300:Src/main.c    ****   hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 301:Src/main.c    ****   hadc1.Init.NbrOfConversion = 1;
 302:Src/main.c    ****   if (HAL_ADC_Init(&hadc1) != HAL_OK)
 303:Src/main.c    ****   {
 304:Src/main.c    ****     Error_Handler();
 305:Src/main.c    ****   }
 306:Src/main.c    ****   /** Configure Regular Channel 
 307:Src/main.c    ****   */
 308:Src/main.c    ****   sConfig.Channel = ADC_CHANNEL_1;
 309:Src/main.c    ****   sConfig.Rank = ADC_REGULAR_RANK_1;
 310:Src/main.c    ****   sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 311:Src/main.c    ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 312:Src/main.c    ****   {
 313:Src/main.c    ****     Error_Handler();
 314:Src/main.c    ****   }
 315:Src/main.c    ****   /* USER CODE BEGIN ADC1_Init 2 */
 316:Src/main.c    **** 
 317:Src/main.c    ****   /* USER CODE END ADC1_Init 2 */
 318:Src/main.c    **** 
ARM GAS  /tmp/cckW4jPf.s 			page 7


 319:Src/main.c    **** }
 320:Src/main.c    **** 
 321:Src/main.c    **** /**
 322:Src/main.c    ****   * @brief RTC Initialization Function
 323:Src/main.c    ****   * @param None
 324:Src/main.c    ****   * @retval None
 325:Src/main.c    ****   */
 326:Src/main.c    **** static void MX_RTC_Init(void)
 327:Src/main.c    **** {
 328:Src/main.c    **** 
 329:Src/main.c    ****   /* USER CODE BEGIN RTC_Init 0 */
 330:Src/main.c    **** 
 331:Src/main.c    ****   /* USER CODE END RTC_Init 0 */
 332:Src/main.c    **** 
 333:Src/main.c    ****   RTC_TimeTypeDef sTime = {0};
 334:Src/main.c    ****   RTC_DateTypeDef DateToUpdate = {0};
 335:Src/main.c    **** 
 336:Src/main.c    ****   /* USER CODE BEGIN RTC_Init 1 */
 337:Src/main.c    **** 
 338:Src/main.c    ****   /* USER CODE END RTC_Init 1 */
 339:Src/main.c    ****   /** Initialize RTC Only 
 340:Src/main.c    ****   */
 341:Src/main.c    ****   hrtc.Instance = RTC;
 342:Src/main.c    ****   hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 343:Src/main.c    ****   hrtc.Init.OutPut = RTC_OUTPUTSOURCE_NONE;
 344:Src/main.c    ****   if (HAL_RTC_Init(&hrtc) != HAL_OK)
 345:Src/main.c    ****   {
 346:Src/main.c    ****     Error_Handler();
 347:Src/main.c    ****   }
 348:Src/main.c    **** 
 349:Src/main.c    ****   /* USER CODE BEGIN Check_RTC_BKUP */
 350:Src/main.c    ****     
 351:Src/main.c    ****   /* USER CODE END Check_RTC_BKUP */
 352:Src/main.c    **** 
 353:Src/main.c    ****   /** Initialize RTC and set the Time and Date 
 354:Src/main.c    ****   */
 355:Src/main.c    ****   sTime.Hours = 0x17;
 356:Src/main.c    ****   sTime.Minutes = 0x0;
 357:Src/main.c    ****   sTime.Seconds = 0x30;
 358:Src/main.c    **** 
 359:Src/main.c    ****   if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 360:Src/main.c    ****   {
 361:Src/main.c    ****     Error_Handler();
 362:Src/main.c    ****   }
 363:Src/main.c    ****   DateToUpdate.WeekDay = RTC_WEEKDAY_SATURDAY;
 364:Src/main.c    ****   DateToUpdate.Month = RTC_MONTH_FEBRUARY;
 365:Src/main.c    ****   DateToUpdate.Date = 0x29;
 366:Src/main.c    ****   DateToUpdate.Year = 0x20;
 367:Src/main.c    **** 
 368:Src/main.c    ****   if (HAL_RTC_SetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BCD) != HAL_OK)
 369:Src/main.c    ****   {
 370:Src/main.c    ****     Error_Handler();
 371:Src/main.c    ****   }
 372:Src/main.c    ****   /* USER CODE BEGIN RTC_Init 2 */
 373:Src/main.c    **** 
 374:Src/main.c    ****   /* USER CODE END RTC_Init 2 */
 375:Src/main.c    **** 
ARM GAS  /tmp/cckW4jPf.s 			page 8


 376:Src/main.c    **** }
 377:Src/main.c    **** 
 378:Src/main.c    **** /**
 379:Src/main.c    ****   * @brief SPI1 Initialization Function
 380:Src/main.c    ****   * @param None
 381:Src/main.c    ****   * @retval None
 382:Src/main.c    ****   */
 383:Src/main.c    **** static void MX_SPI1_Init(void)
 384:Src/main.c    **** {
 385:Src/main.c    **** 
 386:Src/main.c    ****   /* USER CODE BEGIN SPI1_Init 0 */
 387:Src/main.c    **** 
 388:Src/main.c    ****   /* USER CODE END SPI1_Init 0 */
 389:Src/main.c    **** 
 390:Src/main.c    ****   /* USER CODE BEGIN SPI1_Init 1 */
 391:Src/main.c    **** 
 392:Src/main.c    ****   /* USER CODE END SPI1_Init 1 */
 393:Src/main.c    ****   /* SPI1 parameter configuration*/
 394:Src/main.c    ****   hspi1.Instance = SPI1;
 395:Src/main.c    ****   hspi1.Init.Mode = SPI_MODE_MASTER;
 396:Src/main.c    ****   hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 397:Src/main.c    ****   hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 398:Src/main.c    ****   hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 399:Src/main.c    ****   hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 400:Src/main.c    ****   hspi1.Init.NSS = SPI_NSS_SOFT;
 401:Src/main.c    ****   hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 402:Src/main.c    ****   hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 403:Src/main.c    ****   hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 404:Src/main.c    ****   hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 405:Src/main.c    ****   hspi1.Init.CRCPolynomial = 10;
 406:Src/main.c    ****   if (HAL_SPI_Init(&hspi1) != HAL_OK)
 407:Src/main.c    ****   {
 408:Src/main.c    ****     Error_Handler();
 409:Src/main.c    ****   }
 410:Src/main.c    ****   /* USER CODE BEGIN SPI1_Init 2 */
 411:Src/main.c    **** 
 412:Src/main.c    ****   /* USER CODE END SPI1_Init 2 */
 413:Src/main.c    **** 
 414:Src/main.c    **** }
 415:Src/main.c    **** 
 416:Src/main.c    **** /**
 417:Src/main.c    ****   * @brief USART1 Initialization Function
 418:Src/main.c    ****   * @param None
 419:Src/main.c    ****   * @retval None
 420:Src/main.c    ****   */
 421:Src/main.c    **** static void MX_USART1_UART_Init(void)
 422:Src/main.c    **** {
 423:Src/main.c    **** 
 424:Src/main.c    ****   /* USER CODE BEGIN USART1_Init 0 */
 425:Src/main.c    **** 
 426:Src/main.c    ****   /* USER CODE END USART1_Init 0 */
 427:Src/main.c    **** 
 428:Src/main.c    ****   /* USER CODE BEGIN USART1_Init 1 */
 429:Src/main.c    **** 
 430:Src/main.c    ****   /* USER CODE END USART1_Init 1 */
 431:Src/main.c    ****   huart1.Instance = USART1;
 432:Src/main.c    ****   huart1.Init.BaudRate = 115200;
ARM GAS  /tmp/cckW4jPf.s 			page 9


 433:Src/main.c    ****   huart1.Init.WordLength = UART_WORDLENGTH_8B;
 434:Src/main.c    ****   huart1.Init.StopBits = UART_STOPBITS_1;
 435:Src/main.c    ****   huart1.Init.Parity = UART_PARITY_NONE;
 436:Src/main.c    ****   huart1.Init.Mode = UART_MODE_TX_RX;
 437:Src/main.c    ****   huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 438:Src/main.c    ****   huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 439:Src/main.c    ****   if (HAL_UART_Init(&huart1) != HAL_OK)
 440:Src/main.c    ****   {
 441:Src/main.c    ****     Error_Handler();
 442:Src/main.c    ****   }
 443:Src/main.c    ****   /* USER CODE BEGIN USART1_Init 2 */
 444:Src/main.c    ****   
 445:Src/main.c    ****   /* USER CODE END USART1_Init 2 */
 446:Src/main.c    **** 
 447:Src/main.c    **** }
 448:Src/main.c    **** 
 449:Src/main.c    **** /**
 450:Src/main.c    ****   * @brief GPIO Initialization Function
 451:Src/main.c    ****   * @param None
 452:Src/main.c    ****   * @retval None
 453:Src/main.c    ****   */
 454:Src/main.c    **** static void MX_GPIO_Init(void)
 455:Src/main.c    **** {
 456:Src/main.c    ****   GPIO_InitTypeDef GPIO_InitStruct = {0};
 457:Src/main.c    **** 
 458:Src/main.c    ****   /* GPIO Ports Clock Enable */
 459:Src/main.c    ****   __HAL_RCC_GPIOC_CLK_ENABLE();
 460:Src/main.c    ****   __HAL_RCC_GPIOD_CLK_ENABLE();
 461:Src/main.c    ****   __HAL_RCC_GPIOA_CLK_ENABLE();
 462:Src/main.c    **** 
 463:Src/main.c    ****   /*Configure GPIO pin Output Level */
 464:Src/main.c    ****   HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 465:Src/main.c    **** 
 466:Src/main.c    ****   /*Configure GPIO pin Output Level */
 467:Src/main.c    ****   HAL_GPIO_WritePin(SD_NSS_GPIO_Port, SD_NSS_Pin, GPIO_PIN_RESET);
 468:Src/main.c    **** 
 469:Src/main.c    ****   /*Configure GPIO pin : LED_Pin */
 470:Src/main.c    ****   GPIO_InitStruct.Pin = LED_Pin;
 471:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 472:Src/main.c    ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 473:Src/main.c    ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 474:Src/main.c    ****   HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 475:Src/main.c    **** 
 476:Src/main.c    ****   /*Configure GPIO pin : SD_NSS_Pin */
 477:Src/main.c    ****   GPIO_InitStruct.Pin = SD_NSS_Pin;
 478:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 479:Src/main.c    ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 480:Src/main.c    ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 481:Src/main.c    ****   HAL_GPIO_Init(SD_NSS_GPIO_Port, &GPIO_InitStruct);
 482:Src/main.c    **** 
 483:Src/main.c    **** }
 484:Src/main.c    **** 
 485:Src/main.c    **** /* USER CODE BEGIN 4 */
 486:Src/main.c    **** 
 487:Src/main.c    **** /* USER CODE END 4 */
 488:Src/main.c    **** 
 489:Src/main.c    **** /* USER CODE BEGIN Header_Tsk_ADC_LightSensor */
ARM GAS  /tmp/cckW4jPf.s 			page 10


 490:Src/main.c    **** /**
 491:Src/main.c    ****   * @brief  Function implementing the ADC_LightSensor thread.
 492:Src/main.c    ****   * @param  argument: Not used 
 493:Src/main.c    ****   * @retval None
 494:Src/main.c    ****   */
 495:Src/main.c    **** /* USER CODE END Header_Tsk_ADC_LightSensor */
 496:Src/main.c    **** void Tsk_ADC_LightSensor(void *argument)
 497:Src/main.c    **** {
 498:Src/main.c    ****   /* USER CODE BEGIN 5 */
 499:Src/main.c    **** 
 500:Src/main.c    ****   /* Infinite loop */
 501:Src/main.c    ****   for(;;)
 502:Src/main.c    ****   {
 503:Src/main.c    ****     Thread_ADC_LightSensor();
 504:Src/main.c    ****   }
 505:Src/main.c    ****   /* USER CODE END 5 */ 
 506:Src/main.c    **** }
 507:Src/main.c    **** 
 508:Src/main.c    **** /* USER CODE BEGIN Header_Tsk_UART_TX */
 509:Src/main.c    **** /**
 510:Src/main.c    **** * @brief Function implementing the UART_TX thread.
 511:Src/main.c    **** * @param argument: Not used
 512:Src/main.c    **** * @retval None
 513:Src/main.c    **** */
 514:Src/main.c    **** /* USER CODE END Header_Tsk_UART_TX */
 515:Src/main.c    **** void Tsk_UART_TX(void *argument)
 516:Src/main.c    **** {
 517:Src/main.c    ****   /* USER CODE BEGIN Tsk_UART_TX */
 518:Src/main.c    ****   
 519:Src/main.c    ****   /* Infinite loop */
 520:Src/main.c    ****   for(;;)
 521:Src/main.c    ****   {
 522:Src/main.c    ****       Thread_UART_TX();
 523:Src/main.c    ****   }
 524:Src/main.c    ****   /* USER CODE END Tsk_UART_TX */
 525:Src/main.c    **** }
 526:Src/main.c    **** 
 527:Src/main.c    **** /* USER CODE BEGIN Header_Tsk_LED */
 528:Src/main.c    **** /**
 529:Src/main.c    **** * @brief Function implementing the LED thread.
 530:Src/main.c    **** * @param argument: Not used
 531:Src/main.c    **** * @retval None
 532:Src/main.c    **** */
 533:Src/main.c    **** /* USER CODE END Header_Tsk_LED */
 534:Src/main.c    **** void Tsk_LED(void *argument)
 535:Src/main.c    **** {
  26              		.loc 1 535 0
  27              		.cfi_startproc
  28              		@ Volatile: function does not return.
  29              		@ args = 0, pretend = 0, frame = 0
  30              		@ frame_needed = 0, uses_anonymous_args = 0
  31              		@ link register save eliminated.
  32              	.LVL0:
  33              	.L2:
  34 0000 FEE7     		b	.L2
  35              		.cfi_endproc
  36              	.LFE79:
ARM GAS  /tmp/cckW4jPf.s 			page 11


  38              		.section	.text.MX_GPIO_Init,"ax",%progbits
  39              		.align	1
  40              		.syntax unified
  41              		.thumb
  42              		.thumb_func
  43              		.fpu softvfp
  45              	MX_GPIO_Init:
  46              	.LFB76:
 455:Src/main.c    ****   GPIO_InitTypeDef GPIO_InitStruct = {0};
  47              		.loc 1 455 0
  48              		.cfi_startproc
  49              		@ args = 0, pretend = 0, frame = 32
  50              		@ frame_needed = 0, uses_anonymous_args = 0
 455:Src/main.c    ****   GPIO_InitTypeDef GPIO_InitStruct = {0};
  51              		.loc 1 455 0
  52 0000 F0B5     		push	{r4, r5, r6, r7, lr}
  53              	.LCFI0:
  54              		.cfi_def_cfa_offset 20
  55              		.cfi_offset 4, -20
  56              		.cfi_offset 5, -16
  57              		.cfi_offset 6, -12
  58              		.cfi_offset 7, -8
  59              		.cfi_offset 14, -4
  60 0002 89B0     		sub	sp, sp, #36
  61              	.LCFI1:
  62              		.cfi_def_cfa_offset 56
 456:Src/main.c    **** 
  63              		.loc 1 456 0
  64 0004 0024     		movs	r4, #0
  65 0006 0494     		str	r4, [sp, #16]
  66 0008 0594     		str	r4, [sp, #20]
  67 000a 0694     		str	r4, [sp, #24]
  68 000c 0794     		str	r4, [sp, #28]
  69              	.LBB2:
 459:Src/main.c    ****   __HAL_RCC_GPIOD_CLK_ENABLE();
  70              		.loc 1 459 0
  71 000e 204B     		ldr	r3, .L5
  72 0010 9A69     		ldr	r2, [r3, #24]
  73 0012 42F01002 		orr	r2, r2, #16
  74 0016 9A61     		str	r2, [r3, #24]
  75 0018 9A69     		ldr	r2, [r3, #24]
  76 001a 02F01002 		and	r2, r2, #16
  77 001e 0192     		str	r2, [sp, #4]
  78 0020 019A     		ldr	r2, [sp, #4]
  79              	.LBE2:
  80              	.LBB3:
 460:Src/main.c    ****   __HAL_RCC_GPIOA_CLK_ENABLE();
  81              		.loc 1 460 0
  82 0022 9A69     		ldr	r2, [r3, #24]
  83 0024 42F02002 		orr	r2, r2, #32
  84 0028 9A61     		str	r2, [r3, #24]
  85 002a 9A69     		ldr	r2, [r3, #24]
  86 002c 02F02002 		and	r2, r2, #32
  87 0030 0292     		str	r2, [sp, #8]
  88 0032 029A     		ldr	r2, [sp, #8]
  89              	.LBE3:
  90              	.LBB4:
ARM GAS  /tmp/cckW4jPf.s 			page 12


 461:Src/main.c    **** 
  91              		.loc 1 461 0
  92 0034 9A69     		ldr	r2, [r3, #24]
  93 0036 42F00402 		orr	r2, r2, #4
  94 003a 9A61     		str	r2, [r3, #24]
  95 003c 9B69     		ldr	r3, [r3, #24]
  96 003e 03F00403 		and	r3, r3, #4
  97 0042 0393     		str	r3, [sp, #12]
  98 0044 039B     		ldr	r3, [sp, #12]
  99              	.LBE4:
 464:Src/main.c    **** 
 100              		.loc 1 464 0
 101 0046 134F     		ldr	r7, .L5+4
 102 0048 2246     		mov	r2, r4
 103 004a 4FF40051 		mov	r1, #8192
 104 004e 3846     		mov	r0, r7
 105 0050 FFF7FEFF 		bl	HAL_GPIO_WritePin
 106              	.LVL1:
 467:Src/main.c    **** 
 107              		.loc 1 467 0
 108 0054 104D     		ldr	r5, .L5+8
 109 0056 2246     		mov	r2, r4
 110 0058 1021     		movs	r1, #16
 111 005a 2846     		mov	r0, r5
 112 005c FFF7FEFF 		bl	HAL_GPIO_WritePin
 113              	.LVL2:
 470:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 114              		.loc 1 470 0
 115 0060 4FF40053 		mov	r3, #8192
 116 0064 0493     		str	r3, [sp, #16]
 471:Src/main.c    ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 117              		.loc 1 471 0
 118 0066 0126     		movs	r6, #1
 119 0068 0596     		str	r6, [sp, #20]
 472:Src/main.c    ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 120              		.loc 1 472 0
 121 006a 0694     		str	r4, [sp, #24]
 473:Src/main.c    ****   HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 122              		.loc 1 473 0
 123 006c 0223     		movs	r3, #2
 124 006e 0793     		str	r3, [sp, #28]
 474:Src/main.c    **** 
 125              		.loc 1 474 0
 126 0070 04A9     		add	r1, sp, #16
 127 0072 3846     		mov	r0, r7
 128 0074 FFF7FEFF 		bl	HAL_GPIO_Init
 129              	.LVL3:
 477:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 130              		.loc 1 477 0
 131 0078 1023     		movs	r3, #16
 132 007a 0493     		str	r3, [sp, #16]
 478:Src/main.c    ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 133              		.loc 1 478 0
 134 007c 0596     		str	r6, [sp, #20]
 479:Src/main.c    ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 135              		.loc 1 479 0
 136 007e 0694     		str	r4, [sp, #24]
ARM GAS  /tmp/cckW4jPf.s 			page 13


 480:Src/main.c    ****   HAL_GPIO_Init(SD_NSS_GPIO_Port, &GPIO_InitStruct);
 137              		.loc 1 480 0
 138 0080 0323     		movs	r3, #3
 139 0082 0793     		str	r3, [sp, #28]
 481:Src/main.c    **** 
 140              		.loc 1 481 0
 141 0084 04A9     		add	r1, sp, #16
 142 0086 2846     		mov	r0, r5
 143 0088 FFF7FEFF 		bl	HAL_GPIO_Init
 144              	.LVL4:
 483:Src/main.c    **** 
 145              		.loc 1 483 0
 146 008c 09B0     		add	sp, sp, #36
 147              	.LCFI2:
 148              		.cfi_def_cfa_offset 20
 149              		@ sp needed
 150 008e F0BD     		pop	{r4, r5, r6, r7, pc}
 151              	.L6:
 152              		.align	2
 153              	.L5:
 154 0090 00100240 		.word	1073876992
 155 0094 00100140 		.word	1073811456
 156 0098 00080140 		.word	1073809408
 157              		.cfi_endproc
 158              	.LFE76:
 160              		.section	.text.Tsk_ADC_LightSensor,"ax",%progbits
 161              		.align	1
 162              		.global	Tsk_ADC_LightSensor
 163              		.syntax unified
 164              		.thumb
 165              		.thumb_func
 166              		.fpu softvfp
 168              	Tsk_ADC_LightSensor:
 169              	.LFB77:
 497:Src/main.c    ****   /* USER CODE BEGIN 5 */
 170              		.loc 1 497 0
 171              		.cfi_startproc
 172              		@ Volatile: function does not return.
 173              		@ args = 0, pretend = 0, frame = 0
 174              		@ frame_needed = 0, uses_anonymous_args = 0
 175              	.LVL5:
 176 0000 08B5     		push	{r3, lr}
 177              	.LCFI3:
 178              		.cfi_def_cfa_offset 8
 179              		.cfi_offset 3, -8
 180              		.cfi_offset 14, -4
 181              	.LVL6:
 182              	.L8:
 503:Src/main.c    ****   }
 183              		.loc 1 503 0 discriminator 1
 184 0002 FFF7FEFF 		bl	Thread_ADC_LightSensor
 185              	.LVL7:
 186 0006 FCE7     		b	.L8
 187              		.cfi_endproc
 188              	.LFE77:
 190              		.section	.text.Tsk_UART_TX,"ax",%progbits
 191              		.align	1
ARM GAS  /tmp/cckW4jPf.s 			page 14


 192              		.global	Tsk_UART_TX
 193              		.syntax unified
 194              		.thumb
 195              		.thumb_func
 196              		.fpu softvfp
 198              	Tsk_UART_TX:
 199              	.LFB78:
 516:Src/main.c    ****   /* USER CODE BEGIN Tsk_UART_TX */
 200              		.loc 1 516 0
 201              		.cfi_startproc
 202              		@ Volatile: function does not return.
 203              		@ args = 0, pretend = 0, frame = 0
 204              		@ frame_needed = 0, uses_anonymous_args = 0
 205              	.LVL8:
 206 0000 08B5     		push	{r3, lr}
 207              	.LCFI4:
 208              		.cfi_def_cfa_offset 8
 209              		.cfi_offset 3, -8
 210              		.cfi_offset 14, -4
 211              	.LVL9:
 212              	.L11:
 522:Src/main.c    ****   }
 213              		.loc 1 522 0 discriminator 1
 214 0002 FFF7FEFF 		bl	Thread_UART_TX
 215              	.LVL10:
 216 0006 FCE7     		b	.L11
 217              		.cfi_endproc
 218              	.LFE78:
 220              		.section	.text.Tsk_UART_RX,"ax",%progbits
 221              		.align	1
 222              		.global	Tsk_UART_RX
 223              		.syntax unified
 224              		.thumb
 225              		.thumb_func
 226              		.fpu softvfp
 228              	Tsk_UART_RX:
 229              	.LFB80:
 536:Src/main.c    ****   /* USER CODE BEGIN Tsk_LED */
 537:Src/main.c    ****   //volatile uint32_t * GPIOC_BSRR = (uint32_t *) 0x40011010;
 538:Src/main.c    ****   //volatile uint32_t * GPIOC_BRR = (uint32_t *) 0x40011014;  
 539:Src/main.c    ****   /* Infinite loop */
 540:Src/main.c    ****   for(;;)
 541:Src/main.c    ****   {
 542:Src/main.c    ****     /*
 543:Src/main.c    ****     *GPIOC_BRR |= (0x1 << 13);
 544:Src/main.c    ****     osDelay(500);
 545:Src/main.c    ****     *GPIOC_BSRR |= (0x1 << 13);
 546:Src/main.c    ****     osDelay(500);
 547:Src/main.c    ****     */
 548:Src/main.c    ****   }
 549:Src/main.c    ****   /* USER CODE END Tsk_LED */
 550:Src/main.c    **** }
 551:Src/main.c    **** 
 552:Src/main.c    **** /* USER CODE BEGIN Header_Tsk_UART_RX */
 553:Src/main.c    **** /**
 554:Src/main.c    **** * @brief Function implementing the UART_RX thread.
 555:Src/main.c    **** * @param argument: Not used
ARM GAS  /tmp/cckW4jPf.s 			page 15


 556:Src/main.c    **** * @retval None
 557:Src/main.c    **** */
 558:Src/main.c    **** /* USER CODE END Header_Tsk_UART_RX */
 559:Src/main.c    **** void Tsk_UART_RX(void *argument)
 560:Src/main.c    **** {
 230              		.loc 1 560 0
 231              		.cfi_startproc
 232              		@ Volatile: function does not return.
 233              		@ args = 0, pretend = 0, frame = 0
 234              		@ frame_needed = 0, uses_anonymous_args = 0
 235              	.LVL11:
 236 0000 08B5     		push	{r3, lr}
 237              	.LCFI5:
 238              		.cfi_def_cfa_offset 8
 239              		.cfi_offset 3, -8
 240              		.cfi_offset 14, -4
 241              	.LVL12:
 242              	.L14:
 561:Src/main.c    ****   /* USER CODE BEGIN Tsk_UART_RX */
 562:Src/main.c    **** 
 563:Src/main.c    ****   /* Infinite loop */
 564:Src/main.c    ****   for(;;)
 565:Src/main.c    ****   {
 566:Src/main.c    ****       Thread_UART_RX();
 243              		.loc 1 566 0 discriminator 1
 244 0002 FFF7FEFF 		bl	Thread_UART_RX
 245              	.LVL13:
 246 0006 FCE7     		b	.L14
 247              		.cfi_endproc
 248              	.LFE80:
 250              		.section	.text.HAL_TIM_PeriodElapsedCallback,"ax",%progbits
 251              		.align	1
 252              		.global	HAL_TIM_PeriodElapsedCallback
 253              		.syntax unified
 254              		.thumb
 255              		.thumb_func
 256              		.fpu softvfp
 258              	HAL_TIM_PeriodElapsedCallback:
 259              	.LFB81:
 567:Src/main.c    ****   }
 568:Src/main.c    ****   /* USER CODE END Tsk_UART_RX */
 569:Src/main.c    **** }
 570:Src/main.c    **** 
 571:Src/main.c    **** /**
 572:Src/main.c    ****   * @brief  Period elapsed callback in non blocking mode
 573:Src/main.c    ****   * @note   This function is called  when TIM1 interrupt took place, inside
 574:Src/main.c    ****   * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 575:Src/main.c    ****   * a global variable "uwTick" used as application time base.
 576:Src/main.c    ****   * @param  htim : TIM handle
 577:Src/main.c    ****   * @retval None
 578:Src/main.c    ****   */
 579:Src/main.c    **** void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
 580:Src/main.c    **** {
 260              		.loc 1 580 0
 261              		.cfi_startproc
 262              		@ args = 0, pretend = 0, frame = 0
 263              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  /tmp/cckW4jPf.s 			page 16


 264              	.LVL14:
 265 0000 08B5     		push	{r3, lr}
 266              	.LCFI6:
 267              		.cfi_def_cfa_offset 8
 268              		.cfi_offset 3, -8
 269              		.cfi_offset 14, -4
 581:Src/main.c    ****   /* USER CODE BEGIN Callback 0 */
 582:Src/main.c    **** 
 583:Src/main.c    ****   /* USER CODE END Callback 0 */
 584:Src/main.c    ****   if (htim->Instance == TIM1) {
 270              		.loc 1 584 0
 271 0002 0268     		ldr	r2, [r0]
 272 0004 034B     		ldr	r3, .L20
 273 0006 9A42     		cmp	r2, r3
 274 0008 00D0     		beq	.L19
 275              	.LVL15:
 276              	.L16:
 277 000a 08BD     		pop	{r3, pc}
 278              	.LVL16:
 279              	.L19:
 585:Src/main.c    ****     HAL_IncTick();
 280              		.loc 1 585 0
 281 000c FFF7FEFF 		bl	HAL_IncTick
 282              	.LVL17:
 586:Src/main.c    ****   }
 587:Src/main.c    ****   /* USER CODE BEGIN Callback 1 */
 588:Src/main.c    **** 
 589:Src/main.c    ****   /* USER CODE END Callback 1 */
 590:Src/main.c    **** }
 283              		.loc 1 590 0
 284 0010 FBE7     		b	.L16
 285              	.L21:
 286 0012 00BF     		.align	2
 287              	.L20:
 288 0014 002C0140 		.word	1073818624
 289              		.cfi_endproc
 290              	.LFE81:
 292              		.section	.text.Error_Handler,"ax",%progbits
 293              		.align	1
 294              		.global	Error_Handler
 295              		.syntax unified
 296              		.thumb
 297              		.thumb_func
 298              		.fpu softvfp
 300              	Error_Handler:
 301              	.LFB82:
 591:Src/main.c    **** 
 592:Src/main.c    **** /**
 593:Src/main.c    ****   * @brief  This function is executed in case of error occurrence.
 594:Src/main.c    ****   * @retval None
 595:Src/main.c    ****   */
 596:Src/main.c    **** void Error_Handler(void)
 597:Src/main.c    **** {
 302              		.loc 1 597 0
 303              		.cfi_startproc
 304              		@ Volatile: function does not return.
 305              		@ args = 0, pretend = 0, frame = 0
ARM GAS  /tmp/cckW4jPf.s 			page 17


 306              		@ frame_needed = 0, uses_anonymous_args = 0
 307              		@ link register save eliminated.
 308              	.L23:
 309 0000 FEE7     		b	.L23
 310              		.cfi_endproc
 311              	.LFE82:
 313              		.section	.text.MX_USART1_UART_Init,"ax",%progbits
 314              		.align	1
 315              		.syntax unified
 316              		.thumb
 317              		.thumb_func
 318              		.fpu softvfp
 320              	MX_USART1_UART_Init:
 321              	.LFB75:
 422:Src/main.c    **** 
 322              		.loc 1 422 0
 323              		.cfi_startproc
 324              		@ args = 0, pretend = 0, frame = 0
 325              		@ frame_needed = 0, uses_anonymous_args = 0
 422:Src/main.c    **** 
 326              		.loc 1 422 0
 327 0000 08B5     		push	{r3, lr}
 328              	.LCFI7:
 329              		.cfi_def_cfa_offset 8
 330              		.cfi_offset 3, -8
 331              		.cfi_offset 14, -4
 431:Src/main.c    ****   huart1.Init.BaudRate = 115200;
 332              		.loc 1 431 0
 333 0002 0A48     		ldr	r0, .L28
 334 0004 0A4B     		ldr	r3, .L28+4
 335 0006 0360     		str	r3, [r0]
 432:Src/main.c    ****   huart1.Init.WordLength = UART_WORDLENGTH_8B;
 336              		.loc 1 432 0
 337 0008 4FF4E133 		mov	r3, #115200
 338 000c 4360     		str	r3, [r0, #4]
 433:Src/main.c    ****   huart1.Init.StopBits = UART_STOPBITS_1;
 339              		.loc 1 433 0
 340 000e 0023     		movs	r3, #0
 341 0010 8360     		str	r3, [r0, #8]
 434:Src/main.c    ****   huart1.Init.Parity = UART_PARITY_NONE;
 342              		.loc 1 434 0
 343 0012 C360     		str	r3, [r0, #12]
 435:Src/main.c    ****   huart1.Init.Mode = UART_MODE_TX_RX;
 344              		.loc 1 435 0
 345 0014 0361     		str	r3, [r0, #16]
 436:Src/main.c    ****   huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 346              		.loc 1 436 0
 347 0016 0C22     		movs	r2, #12
 348 0018 4261     		str	r2, [r0, #20]
 437:Src/main.c    ****   huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 349              		.loc 1 437 0
 350 001a 8361     		str	r3, [r0, #24]
 438:Src/main.c    ****   if (HAL_UART_Init(&huart1) != HAL_OK)
 351              		.loc 1 438 0
 352 001c C361     		str	r3, [r0, #28]
 439:Src/main.c    ****   {
 353              		.loc 1 439 0
ARM GAS  /tmp/cckW4jPf.s 			page 18


 354 001e FFF7FEFF 		bl	HAL_UART_Init
 355              	.LVL18:
 356 0022 00B9     		cbnz	r0, .L27
 357 0024 08BD     		pop	{r3, pc}
 358              	.L27:
 441:Src/main.c    ****   }
 359              		.loc 1 441 0
 360 0026 FFF7FEFF 		bl	Error_Handler
 361              	.LVL19:
 362              	.L29:
 363 002a 00BF     		.align	2
 364              	.L28:
 365 002c 00000000 		.word	huart1
 366 0030 00380140 		.word	1073821696
 367              		.cfi_endproc
 368              	.LFE75:
 370              		.section	.text.MX_ADC1_Init,"ax",%progbits
 371              		.align	1
 372              		.syntax unified
 373              		.thumb
 374              		.thumb_func
 375              		.fpu softvfp
 377              	MX_ADC1_Init:
 378              	.LFB72:
 282:Src/main.c    **** 
 379              		.loc 1 282 0
 380              		.cfi_startproc
 381              		@ args = 0, pretend = 0, frame = 16
 382              		@ frame_needed = 0, uses_anonymous_args = 0
 383 0000 00B5     		push	{lr}
 384              	.LCFI8:
 385              		.cfi_def_cfa_offset 4
 386              		.cfi_offset 14, -4
 387 0002 85B0     		sub	sp, sp, #20
 388              	.LCFI9:
 389              		.cfi_def_cfa_offset 24
 288:Src/main.c    **** 
 390              		.loc 1 288 0
 391 0004 0023     		movs	r3, #0
 392 0006 0193     		str	r3, [sp, #4]
 393 0008 0293     		str	r3, [sp, #8]
 394 000a 0393     		str	r3, [sp, #12]
 295:Src/main.c    ****   hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 395              		.loc 1 295 0
 396 000c 0F48     		ldr	r0, .L36
 397 000e 104A     		ldr	r2, .L36+4
 398 0010 0260     		str	r2, [r0]
 296:Src/main.c    ****   hadc1.Init.ContinuousConvMode = DISABLE;
 399              		.loc 1 296 0
 400 0012 8360     		str	r3, [r0, #8]
 297:Src/main.c    ****   hadc1.Init.DiscontinuousConvMode = DISABLE;
 401              		.loc 1 297 0
 402 0014 0373     		strb	r3, [r0, #12]
 298:Src/main.c    ****   hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 403              		.loc 1 298 0
 404 0016 0375     		strb	r3, [r0, #20]
 299:Src/main.c    ****   hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
ARM GAS  /tmp/cckW4jPf.s 			page 19


 405              		.loc 1 299 0
 406 0018 4FF46022 		mov	r2, #917504
 407 001c C261     		str	r2, [r0, #28]
 300:Src/main.c    ****   hadc1.Init.NbrOfConversion = 1;
 408              		.loc 1 300 0
 409 001e 4360     		str	r3, [r0, #4]
 301:Src/main.c    ****   if (HAL_ADC_Init(&hadc1) != HAL_OK)
 410              		.loc 1 301 0
 411 0020 0123     		movs	r3, #1
 412 0022 0361     		str	r3, [r0, #16]
 302:Src/main.c    ****   {
 413              		.loc 1 302 0
 414 0024 FFF7FEFF 		bl	HAL_ADC_Init
 415              	.LVL20:
 416 0028 60B9     		cbnz	r0, .L34
 308:Src/main.c    ****   sConfig.Rank = ADC_REGULAR_RANK_1;
 417              		.loc 1 308 0
 418 002a 0123     		movs	r3, #1
 419 002c 0193     		str	r3, [sp, #4]
 309:Src/main.c    ****   sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 420              		.loc 1 309 0
 421 002e 0293     		str	r3, [sp, #8]
 310:Src/main.c    ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 422              		.loc 1 310 0
 423 0030 0023     		movs	r3, #0
 424 0032 0393     		str	r3, [sp, #12]
 311:Src/main.c    ****   {
 425              		.loc 1 311 0
 426 0034 01A9     		add	r1, sp, #4
 427 0036 0548     		ldr	r0, .L36
 428 0038 FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 429              	.LVL21:
 430 003c 20B9     		cbnz	r0, .L35
 319:Src/main.c    **** 
 431              		.loc 1 319 0
 432 003e 05B0     		add	sp, sp, #20
 433              	.LCFI10:
 434              		.cfi_remember_state
 435              		.cfi_def_cfa_offset 4
 436              		@ sp needed
 437 0040 5DF804FB 		ldr	pc, [sp], #4
 438              	.L34:
 439              	.LCFI11:
 440              		.cfi_restore_state
 304:Src/main.c    ****   }
 441              		.loc 1 304 0
 442 0044 FFF7FEFF 		bl	Error_Handler
 443              	.LVL22:
 444              	.L35:
 313:Src/main.c    ****   }
 445              		.loc 1 313 0
 446 0048 FFF7FEFF 		bl	Error_Handler
 447              	.LVL23:
 448              	.L37:
 449              		.align	2
 450              	.L36:
 451 004c 00000000 		.word	hadc1
ARM GAS  /tmp/cckW4jPf.s 			page 20


 452 0050 00240140 		.word	1073816576
 453              		.cfi_endproc
 454              	.LFE72:
 456              		.section	.text.MX_RTC_Init,"ax",%progbits
 457              		.align	1
 458              		.syntax unified
 459              		.thumb
 460              		.thumb_func
 461              		.fpu softvfp
 463              	MX_RTC_Init:
 464              	.LFB73:
 327:Src/main.c    **** 
 465              		.loc 1 327 0
 466              		.cfi_startproc
 467              		@ args = 0, pretend = 0, frame = 8
 468              		@ frame_needed = 0, uses_anonymous_args = 0
 469 0000 00B5     		push	{lr}
 470              	.LCFI12:
 471              		.cfi_def_cfa_offset 4
 472              		.cfi_offset 14, -4
 473 0002 83B0     		sub	sp, sp, #12
 474              	.LCFI13:
 475              		.cfi_def_cfa_offset 16
 333:Src/main.c    ****   RTC_DateTypeDef DateToUpdate = {0};
 476              		.loc 1 333 0
 477 0004 0023     		movs	r3, #0
 478 0006 ADF80430 		strh	r3, [sp, #4]	@ movhi
 479 000a 8DF80630 		strb	r3, [sp, #6]
 334:Src/main.c    **** 
 480              		.loc 1 334 0
 481 000e 0093     		str	r3, [sp]
 341:Src/main.c    ****   hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 482              		.loc 1 341 0
 483 0010 1948     		ldr	r0, .L46
 484 0012 1A4A     		ldr	r2, .L46+4
 485 0014 0260     		str	r2, [r0]
 342:Src/main.c    ****   hrtc.Init.OutPut = RTC_OUTPUTSOURCE_NONE;
 486              		.loc 1 342 0
 487 0016 4FF0FF32 		mov	r2, #-1
 488 001a 4260     		str	r2, [r0, #4]
 343:Src/main.c    ****   if (HAL_RTC_Init(&hrtc) != HAL_OK)
 489              		.loc 1 343 0
 490 001c 8360     		str	r3, [r0, #8]
 344:Src/main.c    ****   {
 491              		.loc 1 344 0
 492 001e FFF7FEFF 		bl	HAL_RTC_Init
 493              	.LVL24:
 494 0022 18BB     		cbnz	r0, .L43
 355:Src/main.c    ****   sTime.Minutes = 0x0;
 495              		.loc 1 355 0
 496 0024 1723     		movs	r3, #23
 497 0026 8DF80430 		strb	r3, [sp, #4]
 356:Src/main.c    ****   sTime.Seconds = 0x30;
 498              		.loc 1 356 0
 499 002a 0023     		movs	r3, #0
 500 002c 8DF80530 		strb	r3, [sp, #5]
 357:Src/main.c    **** 
ARM GAS  /tmp/cckW4jPf.s 			page 21


 501              		.loc 1 357 0
 502 0030 3023     		movs	r3, #48
 503 0032 8DF80630 		strb	r3, [sp, #6]
 359:Src/main.c    ****   {
 504              		.loc 1 359 0
 505 0036 0122     		movs	r2, #1
 506 0038 01A9     		add	r1, sp, #4
 507 003a 0F48     		ldr	r0, .L46
 508 003c FFF7FEFF 		bl	HAL_RTC_SetTime
 509              	.LVL25:
 510 0040 B0B9     		cbnz	r0, .L44
 363:Src/main.c    ****   DateToUpdate.Month = RTC_MONTH_FEBRUARY;
 511              		.loc 1 363 0
 512 0042 0623     		movs	r3, #6
 513 0044 8DF80030 		strb	r3, [sp]
 364:Src/main.c    ****   DateToUpdate.Date = 0x29;
 514              		.loc 1 364 0
 515 0048 0223     		movs	r3, #2
 516 004a 8DF80130 		strb	r3, [sp, #1]
 365:Src/main.c    ****   DateToUpdate.Year = 0x20;
 517              		.loc 1 365 0
 518 004e 2923     		movs	r3, #41
 519 0050 8DF80230 		strb	r3, [sp, #2]
 366:Src/main.c    **** 
 520              		.loc 1 366 0
 521 0054 2023     		movs	r3, #32
 522 0056 8DF80330 		strb	r3, [sp, #3]
 368:Src/main.c    ****   {
 523              		.loc 1 368 0
 524 005a 0122     		movs	r2, #1
 525 005c 6946     		mov	r1, sp
 526 005e 0648     		ldr	r0, .L46
 527 0060 FFF7FEFF 		bl	HAL_RTC_SetDate
 528              	.LVL26:
 529 0064 30B9     		cbnz	r0, .L45
 376:Src/main.c    **** 
 530              		.loc 1 376 0
 531 0066 03B0     		add	sp, sp, #12
 532              	.LCFI14:
 533              		.cfi_remember_state
 534              		.cfi_def_cfa_offset 4
 535              		@ sp needed
 536 0068 5DF804FB 		ldr	pc, [sp], #4
 537              	.L43:
 538              	.LCFI15:
 539              		.cfi_restore_state
 346:Src/main.c    ****   }
 540              		.loc 1 346 0
 541 006c FFF7FEFF 		bl	Error_Handler
 542              	.LVL27:
 543              	.L44:
 361:Src/main.c    ****   }
 544              		.loc 1 361 0
 545 0070 FFF7FEFF 		bl	Error_Handler
 546              	.LVL28:
 547              	.L45:
 370:Src/main.c    ****   }
ARM GAS  /tmp/cckW4jPf.s 			page 22


 548              		.loc 1 370 0
 549 0074 FFF7FEFF 		bl	Error_Handler
 550              	.LVL29:
 551              	.L47:
 552              		.align	2
 553              	.L46:
 554 0078 00000000 		.word	hrtc
 555 007c 00280040 		.word	1073752064
 556              		.cfi_endproc
 557              	.LFE73:
 559              		.section	.text.MX_SPI1_Init,"ax",%progbits
 560              		.align	1
 561              		.syntax unified
 562              		.thumb
 563              		.thumb_func
 564              		.fpu softvfp
 566              	MX_SPI1_Init:
 567              	.LFB74:
 384:Src/main.c    **** 
 568              		.loc 1 384 0
 569              		.cfi_startproc
 570              		@ args = 0, pretend = 0, frame = 0
 571              		@ frame_needed = 0, uses_anonymous_args = 0
 572 0000 08B5     		push	{r3, lr}
 573              	.LCFI16:
 574              		.cfi_def_cfa_offset 8
 575              		.cfi_offset 3, -8
 576              		.cfi_offset 14, -4
 394:Src/main.c    ****   hspi1.Init.Mode = SPI_MODE_MASTER;
 577              		.loc 1 394 0
 578 0002 0D48     		ldr	r0, .L52
 579 0004 0D4B     		ldr	r3, .L52+4
 580 0006 0360     		str	r3, [r0]
 395:Src/main.c    ****   hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 581              		.loc 1 395 0
 582 0008 4FF48273 		mov	r3, #260
 583 000c 4360     		str	r3, [r0, #4]
 396:Src/main.c    ****   hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 584              		.loc 1 396 0
 585 000e 0023     		movs	r3, #0
 586 0010 8360     		str	r3, [r0, #8]
 397:Src/main.c    ****   hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 587              		.loc 1 397 0
 588 0012 C360     		str	r3, [r0, #12]
 398:Src/main.c    ****   hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 589              		.loc 1 398 0
 590 0014 0361     		str	r3, [r0, #16]
 399:Src/main.c    ****   hspi1.Init.NSS = SPI_NSS_SOFT;
 591              		.loc 1 399 0
 592 0016 4361     		str	r3, [r0, #20]
 400:Src/main.c    ****   hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 593              		.loc 1 400 0
 594 0018 4FF40072 		mov	r2, #512
 595 001c 8261     		str	r2, [r0, #24]
 401:Src/main.c    ****   hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 596              		.loc 1 401 0
 597 001e C361     		str	r3, [r0, #28]
ARM GAS  /tmp/cckW4jPf.s 			page 23


 402:Src/main.c    ****   hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 598              		.loc 1 402 0
 599 0020 0362     		str	r3, [r0, #32]
 403:Src/main.c    ****   hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 600              		.loc 1 403 0
 601 0022 4362     		str	r3, [r0, #36]
 404:Src/main.c    ****   hspi1.Init.CRCPolynomial = 10;
 602              		.loc 1 404 0
 603 0024 8362     		str	r3, [r0, #40]
 405:Src/main.c    ****   if (HAL_SPI_Init(&hspi1) != HAL_OK)
 604              		.loc 1 405 0
 605 0026 0A23     		movs	r3, #10
 606 0028 C362     		str	r3, [r0, #44]
 406:Src/main.c    ****   {
 607              		.loc 1 406 0
 608 002a FFF7FEFF 		bl	HAL_SPI_Init
 609              	.LVL30:
 610 002e 00B9     		cbnz	r0, .L51
 611 0030 08BD     		pop	{r3, pc}
 612              	.L51:
 408:Src/main.c    ****   }
 613              		.loc 1 408 0
 614 0032 FFF7FEFF 		bl	Error_Handler
 615              	.LVL31:
 616              	.L53:
 617 0036 00BF     		.align	2
 618              	.L52:
 619 0038 00000000 		.word	hspi1
 620 003c 00300140 		.word	1073819648
 621              		.cfi_endproc
 622              	.LFE74:
 624              		.section	.text.SystemClock_Config,"ax",%progbits
 625              		.align	1
 626              		.global	SystemClock_Config
 627              		.syntax unified
 628              		.thumb
 629              		.thumb_func
 630              		.fpu softvfp
 632              	SystemClock_Config:
 633              	.LFB71:
 238:Src/main.c    ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 634              		.loc 1 238 0
 635              		.cfi_startproc
 636              		@ args = 0, pretend = 0, frame = 80
 637              		@ frame_needed = 0, uses_anonymous_args = 0
 638 0000 00B5     		push	{lr}
 639              	.LCFI17:
 640              		.cfi_def_cfa_offset 4
 641              		.cfi_offset 14, -4
 642 0002 95B0     		sub	sp, sp, #84
 643              	.LCFI18:
 644              		.cfi_def_cfa_offset 88
 239:Src/main.c    ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 645              		.loc 1 239 0
 646 0004 2822     		movs	r2, #40
 647 0006 0021     		movs	r1, #0
 648 0008 0DEB0200 		add	r0, sp, r2
ARM GAS  /tmp/cckW4jPf.s 			page 24


 649 000c FFF7FEFF 		bl	memset
 650              	.LVL32:
 240:Src/main.c    ****   RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 651              		.loc 1 240 0
 652 0010 0023     		movs	r3, #0
 653 0012 0593     		str	r3, [sp, #20]
 654 0014 0693     		str	r3, [sp, #24]
 655 0016 0793     		str	r3, [sp, #28]
 656 0018 0893     		str	r3, [sp, #32]
 657 001a 0993     		str	r3, [sp, #36]
 241:Src/main.c    **** 
 658              		.loc 1 241 0
 659 001c 0193     		str	r3, [sp, #4]
 660 001e 0293     		str	r3, [sp, #8]
 661 0020 0393     		str	r3, [sp, #12]
 662 0022 0493     		str	r3, [sp, #16]
 245:Src/main.c    ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 663              		.loc 1 245 0
 664 0024 0A23     		movs	r3, #10
 665 0026 0A93     		str	r3, [sp, #40]
 246:Src/main.c    ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 666              		.loc 1 246 0
 667 0028 0123     		movs	r3, #1
 668 002a 0E93     		str	r3, [sp, #56]
 247:Src/main.c    ****   RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 669              		.loc 1 247 0
 670 002c 1022     		movs	r2, #16
 671 002e 0F92     		str	r2, [sp, #60]
 248:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 672              		.loc 1 248 0
 673 0030 1093     		str	r3, [sp, #64]
 250:Src/main.c    ****   {
 674              		.loc 1 250 0
 675 0032 0AA8     		add	r0, sp, #40
 676 0034 FFF7FEFF 		bl	HAL_RCC_OscConfig
 677              	.LVL33:
 678 0038 C0B9     		cbnz	r0, .L59
 256:Src/main.c    ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 679              		.loc 1 256 0
 680 003a 0F23     		movs	r3, #15
 681 003c 0593     		str	r3, [sp, #20]
 258:Src/main.c    ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 682              		.loc 1 258 0
 683 003e 0021     		movs	r1, #0
 684 0040 0691     		str	r1, [sp, #24]
 259:Src/main.c    ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 685              		.loc 1 259 0
 686 0042 0791     		str	r1, [sp, #28]
 260:Src/main.c    ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 687              		.loc 1 260 0
 688 0044 0891     		str	r1, [sp, #32]
 261:Src/main.c    **** 
 689              		.loc 1 261 0
 690 0046 0991     		str	r1, [sp, #36]
 263:Src/main.c    ****   {
 691              		.loc 1 263 0
 692 0048 05A8     		add	r0, sp, #20
ARM GAS  /tmp/cckW4jPf.s 			page 25


 693 004a FFF7FEFF 		bl	HAL_RCC_ClockConfig
 694              	.LVL34:
 695 004e 78B9     		cbnz	r0, .L60
 267:Src/main.c    ****   PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 696              		.loc 1 267 0
 697 0050 0323     		movs	r3, #3
 698 0052 0193     		str	r3, [sp, #4]
 268:Src/main.c    ****   PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 699              		.loc 1 268 0
 700 0054 4FF40073 		mov	r3, #512
 701 0058 0293     		str	r3, [sp, #8]
 269:Src/main.c    ****   if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 702              		.loc 1 269 0
 703 005a 0023     		movs	r3, #0
 704 005c 0393     		str	r3, [sp, #12]
 270:Src/main.c    ****   {
 705              		.loc 1 270 0
 706 005e 01A8     		add	r0, sp, #4
 707 0060 FFF7FEFF 		bl	HAL_RCCEx_PeriphCLKConfig
 708              	.LVL35:
 709 0064 30B9     		cbnz	r0, .L61
 274:Src/main.c    **** 
 710              		.loc 1 274 0
 711 0066 15B0     		add	sp, sp, #84
 712              	.LCFI19:
 713              		.cfi_remember_state
 714              		.cfi_def_cfa_offset 4
 715              		@ sp needed
 716 0068 5DF804FB 		ldr	pc, [sp], #4
 717              	.L59:
 718              	.LCFI20:
 719              		.cfi_restore_state
 252:Src/main.c    ****   }
 720              		.loc 1 252 0
 721 006c FFF7FEFF 		bl	Error_Handler
 722              	.LVL36:
 723              	.L60:
 265:Src/main.c    ****   }
 724              		.loc 1 265 0
 725 0070 FFF7FEFF 		bl	Error_Handler
 726              	.LVL37:
 727              	.L61:
 272:Src/main.c    ****   }
 728              		.loc 1 272 0
 729 0074 FFF7FEFF 		bl	Error_Handler
 730              	.LVL38:
 731              		.cfi_endproc
 732              	.LFE71:
 734              		.section	.text.main,"ax",%progbits
 735              		.align	1
 736              		.global	main
 737              		.syntax unified
 738              		.thumb
 739              		.thumb_func
 740              		.fpu softvfp
 742              	main:
 743              	.LFB70:
ARM GAS  /tmp/cckW4jPf.s 			page 26


 127:Src/main.c    ****   /* USER CODE BEGIN 1 */
 744              		.loc 1 127 0
 745              		.cfi_startproc
 746              		@ args = 0, pretend = 0, frame = 1032
 747              		@ frame_needed = 0, uses_anonymous_args = 0
 748 0000 10B5     		push	{r4, lr}
 749              	.LCFI21:
 750              		.cfi_def_cfa_offset 8
 751              		.cfi_offset 4, -8
 752              		.cfi_offset 14, -4
 753 0002 ADF5826D 		sub	sp, sp, #1040
 754              	.LCFI22:
 755              		.cfi_def_cfa_offset 1048
 130:Src/main.c    ****   char read_buffer[512] = {0};
 756              		.loc 1 130 0
 757 0006 3D4B     		ldr	r3, .L68
 758 0008 82AC     		add	r4, sp, #520
 759 000a 0FCB     		ldm	r3, {r0, r1, r2, r3}
 760 000c 07C4     		stmia	r4!, {r0, r1, r2}
 761 000e 24F8023B 		strh	r3, [r4], #2	@ movhi
 762 0012 1B0C     		lsrs	r3, r3, #16
 763 0014 2370     		strb	r3, [r4]
 764 0016 40F2F112 		movw	r2, #497
 765 001a 0021     		movs	r1, #0
 766 001c 0DF21720 		addw	r0, sp, #535
 767 0020 FFF7FEFF 		bl	memset
 768              	.LVL39:
 131:Src/main.c    ****   /* USER CODE END 1 */
 769              		.loc 1 131 0
 770 0024 4FF40072 		mov	r2, #512
 771 0028 0021     		movs	r1, #0
 772 002a 02A8     		add	r0, sp, #8
 773 002c FFF7FEFF 		bl	memset
 774              	.LVL40:
 138:Src/main.c    **** 
 775              		.loc 1 138 0
 776 0030 FFF7FEFF 		bl	HAL_Init
 777              	.LVL41:
 145:Src/main.c    **** 
 778              		.loc 1 145 0
 779 0034 FFF7FEFF 		bl	SystemClock_Config
 780              	.LVL42:
 152:Src/main.c    ****   MX_USART1_UART_Init();
 781              		.loc 1 152 0
 782 0038 FFF7FEFF 		bl	MX_GPIO_Init
 783              	.LVL43:
 153:Src/main.c    ****   MX_ADC1_Init();
 784              		.loc 1 153 0
 785 003c FFF7FEFF 		bl	MX_USART1_UART_Init
 786              	.LVL44:
 154:Src/main.c    ****   MX_RTC_Init();
 787              		.loc 1 154 0
 788 0040 FFF7FEFF 		bl	MX_ADC1_Init
 789              	.LVL45:
 155:Src/main.c    ****   MX_SPI1_Init();
 790              		.loc 1 155 0
 791 0044 FFF7FEFF 		bl	MX_RTC_Init
ARM GAS  /tmp/cckW4jPf.s 			page 27


 792              	.LVL46:
 156:Src/main.c    ****   MX_FATFS_Init();
 793              		.loc 1 156 0
 794 0048 FFF7FEFF 		bl	MX_SPI1_Init
 795              	.LVL47:
 157:Src/main.c    ****   /* USER CODE BEGIN 2 */
 796              		.loc 1 157 0
 797 004c FFF7FEFF 		bl	MX_FATFS_Init
 798              	.LVL48:
 159:Src/main.c    ****   {
 799              		.loc 1 159 0
 800 0050 0DF58160 		add	r0, sp, #1032
 801 0054 FFF7FEFF 		bl	SD_Init
 802              	.LVL49:
 803 0058 08B1     		cbz	r0, .L63
 161:Src/main.c    ****   }
 804              		.loc 1 161 0
 805 005a FFF7FEFF 		bl	Error_Handler
 806              	.LVL50:
 807              	.L63:
 163:Src/main.c    ****   {
 808              		.loc 1 163 0
 809 005e 0022     		movs	r2, #0
 810 0060 82A9     		add	r1, sp, #520
 811 0062 0DF58160 		add	r0, sp, #1032
 812 0066 FFF7FEFF 		bl	SD_Write
 813              	.LVL51:
 814 006a 08B1     		cbz	r0, .L64
 165:Src/main.c    ****   }
 815              		.loc 1 165 0
 816 006c FFF7FEFF 		bl	Error_Handler
 817              	.LVL52:
 818              	.L64:
 167:Src/main.c    ****   {
 819              		.loc 1 167 0
 820 0070 4FF40073 		mov	r3, #512
 821 0074 0093     		str	r3, [sp]
 822 0076 0023     		movs	r3, #0
 823 0078 1A46     		mov	r2, r3
 824 007a 02A9     		add	r1, sp, #8
 825 007c 0DF58160 		add	r0, sp, #1032
 826 0080 FFF7FEFF 		bl	SD_Read
 827              	.LVL53:
 828 0084 08B1     		cbz	r0, .L65
 169:Src/main.c    ****   }
 829              		.loc 1 169 0
 830 0086 FFF7FEFF 		bl	Error_Handler
 831              	.LVL54:
 832              	.L65:
 171:Src/main.c    ****   HAL_UART_Transmit(&huart1, (uint8_t *)read_buffer, read_buffer_size, HAL_MAX_DELAY);
 833              		.loc 1 171 0
 834 008a 02A8     		add	r0, sp, #8
 835 008c FFF7FEFF 		bl	strlen
 836              	.LVL55:
 172:Src/main.c    ****   /* USER CODE END 2 */
 837              		.loc 1 172 0
 838 0090 4FF0FF33 		mov	r3, #-1
ARM GAS  /tmp/cckW4jPf.s 			page 28


 839 0094 C2B2     		uxtb	r2, r0
 840 0096 02A9     		add	r1, sp, #8
 841 0098 1948     		ldr	r0, .L68+4
 842              	.LVL56:
 843 009a FFF7FEFF 		bl	HAL_UART_Transmit
 844              	.LVL57:
 175:Src/main.c    **** 
 845              		.loc 1 175 0
 846 009e FFF7FEFF 		bl	osKernelInitialize
 847              	.LVL58:
 191:Src/main.c    **** 
 848              		.loc 1 191 0
 849 00a2 184A     		ldr	r2, .L68+8
 850 00a4 0121     		movs	r1, #1
 851 00a6 8020     		movs	r0, #128
 852 00a8 FFF7FEFF 		bl	osMessageQueueNew
 853              	.LVL59:
 854 00ac 164B     		ldr	r3, .L68+12
 855 00ae 1860     		str	r0, [r3]
 194:Src/main.c    **** 
 856              		.loc 1 194 0
 857 00b0 164A     		ldr	r2, .L68+16
 858 00b2 0121     		movs	r1, #1
 859 00b4 8020     		movs	r0, #128
 860 00b6 FFF7FEFF 		bl	osMessageQueueNew
 861              	.LVL60:
 862 00ba 154B     		ldr	r3, .L68+20
 863 00bc 1860     		str	r0, [r3]
 202:Src/main.c    **** 
 864              		.loc 1 202 0
 865 00be 154A     		ldr	r2, .L68+24
 866 00c0 0021     		movs	r1, #0
 867 00c2 1548     		ldr	r0, .L68+28
 868 00c4 FFF7FEFF 		bl	osThreadNew
 869              	.LVL61:
 870 00c8 144B     		ldr	r3, .L68+32
 871 00ca 1860     		str	r0, [r3]
 205:Src/main.c    **** 
 872              		.loc 1 205 0
 873 00cc 144A     		ldr	r2, .L68+36
 874 00ce 0021     		movs	r1, #0
 875 00d0 1448     		ldr	r0, .L68+40
 876 00d2 FFF7FEFF 		bl	osThreadNew
 877              	.LVL62:
 878 00d6 144B     		ldr	r3, .L68+44
 879 00d8 1860     		str	r0, [r3]
 208:Src/main.c    **** 
 880              		.loc 1 208 0
 881 00da 144A     		ldr	r2, .L68+48
 882 00dc 0021     		movs	r1, #0
 883 00de 1448     		ldr	r0, .L68+52
 884 00e0 FFF7FEFF 		bl	osThreadNew
 885              	.LVL63:
 886 00e4 134B     		ldr	r3, .L68+56
 887 00e6 1860     		str	r0, [r3]
 211:Src/main.c    **** 
 888              		.loc 1 211 0
ARM GAS  /tmp/cckW4jPf.s 			page 29


 889 00e8 134A     		ldr	r2, .L68+60
 890 00ea 0021     		movs	r1, #0
 891 00ec 1348     		ldr	r0, .L68+64
 892 00ee FFF7FEFF 		bl	osThreadNew
 893              	.LVL64:
 894 00f2 134B     		ldr	r3, .L68+68
 895 00f4 1860     		str	r0, [r3]
 218:Src/main.c    ****  
 896              		.loc 1 218 0
 897 00f6 FFF7FEFF 		bl	osKernelStart
 898              	.LVL65:
 899              	.L66:
 900 00fa FEE7     		b	.L66
 901              	.L69:
 902              		.align	2
 903              	.L68:
 904 00fc 00000000 		.word	.LANCHOR0
 905 0100 00000000 		.word	huart1
 906 0104 00000000 		.word	.LANCHOR1
 907 0108 00000000 		.word	Queue_UART_RXHandle
 908 010c 00000000 		.word	.LANCHOR2
 909 0110 00000000 		.word	Queue_UART_TXHandle
 910 0114 00000000 		.word	.LANCHOR3
 911 0118 00000000 		.word	Tsk_ADC_LightSensor
 912 011c 00000000 		.word	ADC_LightSensorHandle
 913 0120 00000000 		.word	.LANCHOR4
 914 0124 00000000 		.word	Tsk_UART_TX
 915 0128 00000000 		.word	UART_TXHandle
 916 012c 00000000 		.word	.LANCHOR5
 917 0130 00000000 		.word	Tsk_LED
 918 0134 00000000 		.word	LEDHandle
 919 0138 00000000 		.word	.LANCHOR6
 920 013c 00000000 		.word	Tsk_UART_RX
 921 0140 00000000 		.word	UART_RXHandle
 922              		.cfi_endproc
 923              	.LFE70:
 925              		.global	Queue_UART_TX_attributes
 926              		.comm	Queue_UART_TXHandle,4,4
 927              		.global	Queue_UART_RX_attributes
 928              		.comm	Queue_UART_RXHandle,4,4
 929              		.global	UART_RX_attributes
 930              		.comm	UART_RXHandle,4,4
 931              		.global	LED_attributes
 932              		.comm	LEDHandle,4,4
 933              		.global	UART_TX_attributes
 934              		.comm	UART_TXHandle,4,4
 935              		.global	ADC_LightSensor_attributes
 936              		.comm	ADC_LightSensorHandle,4,4
 937              		.comm	huart1,64,4
 938              		.comm	hspi1,88,4
 939              		.comm	hrtc,20,4
 940              		.comm	hadc1,48,4
 941              		.section	.rodata
 942              		.align	2
 943              		.set	.LANCHOR0,. + 0
 944              	.LC0:
 945 0000 54657374 		.ascii	"Test message.\012\000"
ARM GAS  /tmp/cckW4jPf.s 			page 30


 945      206D6573 
 945      73616765 
 945      2E0A00
 946 000f 00000000 		.space	497
 946      00000000 
 946      00000000 
 946      00000000 
 946      00000000 
 947              		.section	.rodata.ADC_LightSensor_attributes,"a",%progbits
 948              		.align	2
 949              		.set	.LANCHOR3,. + 0
 952              	ADC_LightSensor_attributes:
 953 0000 34000000 		.word	.LC6
 954 0004 00000000 		.space	16
 954      00000000 
 954      00000000 
 954      00000000 
 955 0014 00020000 		.word	512
 956 0018 18000000 		.word	24
 957 001c 00000000 		.space	8
 957      00000000 
 958              		.section	.rodata.LED_attributes,"a",%progbits
 959              		.align	2
 960              		.set	.LANCHOR5,. + 0
 963              	LED_attributes:
 964 0000 28000000 		.word	.LC4
 965 0004 00000000 		.space	16
 965      00000000 
 965      00000000 
 965      00000000 
 966 0014 80000000 		.word	128
 967 0018 08000000 		.word	8
 968 001c 00000000 		.space	8
 968      00000000 
 969              		.section	.rodata.Queue_UART_RX_attributes,"a",%progbits
 970              		.align	2
 971              		.set	.LANCHOR1,. + 0
 974              	Queue_UART_RX_attributes:
 975 0000 10000000 		.word	.LC2
 976 0004 00000000 		.space	20
 976      00000000 
 976      00000000 
 976      00000000 
 976      00000000 
 977              		.section	.rodata.Queue_UART_TX_attributes,"a",%progbits
 978              		.align	2
 979              		.set	.LANCHOR2,. + 0
 982              	Queue_UART_TX_attributes:
 983 0000 00000000 		.word	.LC1
 984 0004 00000000 		.space	20
 984      00000000 
 984      00000000 
 984      00000000 
 984      00000000 
 985              		.section	.rodata.UART_RX_attributes,"a",%progbits
 986              		.align	2
 987              		.set	.LANCHOR6,. + 0
ARM GAS  /tmp/cckW4jPf.s 			page 31


 990              	UART_RX_attributes:
 991 0000 20000000 		.word	.LC3
 992 0004 00000000 		.space	16
 992      00000000 
 992      00000000 
 992      00000000 
 993 0014 80000000 		.word	128
 994 0018 08000000 		.word	8
 995 001c 00000000 		.space	8
 995      00000000 
 996              		.section	.rodata.UART_TX_attributes,"a",%progbits
 997              		.align	2
 998              		.set	.LANCHOR4,. + 0
 1001              	UART_TX_attributes:
 1002 0000 2C000000 		.word	.LC5
 1003 0004 00000000 		.space	16
 1003      00000000 
 1003      00000000 
 1003      00000000 
 1004 0014 80000000 		.word	128
 1005 0018 08000000 		.word	8
 1006 001c 00000000 		.space	8
 1006      00000000 
 1007              		.section	.rodata.str1.4,"aMS",%progbits,1
 1008              		.align	2
 1009              	.LC1:
 1010 0000 51756575 		.ascii	"Queue_UART_TX\000"
 1010      655F5541 
 1010      52545F54 
 1010      5800
 1011 000e 0000     		.space	2
 1012              	.LC2:
 1013 0010 51756575 		.ascii	"Queue_UART_RX\000"
 1013      655F5541 
 1013      52545F52 
 1013      5800
 1014 001e 0000     		.space	2
 1015              	.LC3:
 1016 0020 55415254 		.ascii	"UART_RX\000"
 1016      5F525800 
 1017              	.LC4:
 1018 0028 4C454400 		.ascii	"LED\000"
 1019              	.LC5:
 1020 002c 55415254 		.ascii	"UART_TX\000"
 1020      5F545800 
 1021              	.LC6:
 1022 0034 4144435F 		.ascii	"ADC_LightSensor\000"
 1022      4C696768 
 1022      7453656E 
 1022      736F7200 
 1023              		.text
 1024              	.Letext0:
 1025              		.file 2 "/usr/include/newlib/machine/_default_types.h"
 1026              		.file 3 "/usr/include/newlib/sys/_stdint.h"
 1027              		.file 4 "Drivers/CMSIS/Include/core_cm3.h"
 1028              		.file 5 "Drivers/CMSIS/Device/ST/STM32F1xx/Include/system_stm32f1xx.h"
 1029              		.file 6 "Drivers/CMSIS/Device/ST/STM32F1xx/Include/stm32f103xb.h"
ARM GAS  /tmp/cckW4jPf.s 			page 32


 1030              		.file 7 "Drivers/CMSIS/Device/ST/STM32F1xx/Include/stm32f1xx.h"
 1031              		.file 8 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_def.h"
 1032              		.file 9 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_rcc.h"
 1033              		.file 10 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_rcc_ex.h"
 1034              		.file 11 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_gpio.h"
 1035              		.file 12 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_dma.h"
 1036              		.file 13 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_adc.h"
 1037              		.file 14 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_rtc.h"
 1038              		.file 15 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_spi.h"
 1039              		.file 16 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_tim.h"
 1040              		.file 17 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_uart.h"
 1041              		.file 18 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal.h"
 1042              		.file 19 "Middlewares/Third_Party/FreeRTOS/Source/CMSIS_RTOS_V2/cmsis_os2.h"
 1043              		.file 20 "Middlewares/Third_Party/FatFs/src/integer.h"
 1044              		.file 21 "Middlewares/Third_Party/FatFs/src/ff.h"
 1045              		.file 22 "Middlewares/Third_Party/FatFs/src/diskio.h"
 1046              		.file 23 "Middlewares/Third_Party/FatFs/src/ff_gen_drv.h"
 1047              		.file 24 "Inc/user_diskio.h"
 1048              		.file 25 "Inc/fatfs.h"
 1049              		.file 26 "/usr/include/newlib/sys/lock.h"
 1050              		.file 27 "/usr/include/newlib/sys/_types.h"
 1051              		.file 28 "/usr/lib/gcc/arm-none-eabi/6.3.1/include/stddef.h"
 1052              		.file 29 "/usr/include/newlib/sys/reent.h"
 1053              		.file 30 "Middlewares/Third_Party/ulibSD/integer_ulibsd.h"
 1054              		.file 31 "Middlewares/Third_Party/ulibSD/sd_io.h"
 1055              		.file 32 "Inc/UART.h"
 1056              		.file 33 "Inc/ADC.h"
 1057              		.file 34 "/usr/include/newlib/string.h"
ARM GAS  /tmp/cckW4jPf.s 			page 33


DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
     /tmp/cckW4jPf.s:16     .text.Tsk_LED:0000000000000000 $t
     /tmp/cckW4jPf.s:23     .text.Tsk_LED:0000000000000000 Tsk_LED
     /tmp/cckW4jPf.s:39     .text.MX_GPIO_Init:0000000000000000 $t
     /tmp/cckW4jPf.s:45     .text.MX_GPIO_Init:0000000000000000 MX_GPIO_Init
     /tmp/cckW4jPf.s:154    .text.MX_GPIO_Init:0000000000000090 $d
     /tmp/cckW4jPf.s:161    .text.Tsk_ADC_LightSensor:0000000000000000 $t
     /tmp/cckW4jPf.s:168    .text.Tsk_ADC_LightSensor:0000000000000000 Tsk_ADC_LightSensor
     /tmp/cckW4jPf.s:191    .text.Tsk_UART_TX:0000000000000000 $t
     /tmp/cckW4jPf.s:198    .text.Tsk_UART_TX:0000000000000000 Tsk_UART_TX
     /tmp/cckW4jPf.s:221    .text.Tsk_UART_RX:0000000000000000 $t
     /tmp/cckW4jPf.s:228    .text.Tsk_UART_RX:0000000000000000 Tsk_UART_RX
     /tmp/cckW4jPf.s:251    .text.HAL_TIM_PeriodElapsedCallback:0000000000000000 $t
     /tmp/cckW4jPf.s:258    .text.HAL_TIM_PeriodElapsedCallback:0000000000000000 HAL_TIM_PeriodElapsedCallback
     /tmp/cckW4jPf.s:288    .text.HAL_TIM_PeriodElapsedCallback:0000000000000014 $d
     /tmp/cckW4jPf.s:293    .text.Error_Handler:0000000000000000 $t
     /tmp/cckW4jPf.s:300    .text.Error_Handler:0000000000000000 Error_Handler
     /tmp/cckW4jPf.s:314    .text.MX_USART1_UART_Init:0000000000000000 $t
     /tmp/cckW4jPf.s:320    .text.MX_USART1_UART_Init:0000000000000000 MX_USART1_UART_Init
     /tmp/cckW4jPf.s:365    .text.MX_USART1_UART_Init:000000000000002c $d
                            *COM*:0000000000000040 huart1
     /tmp/cckW4jPf.s:371    .text.MX_ADC1_Init:0000000000000000 $t
     /tmp/cckW4jPf.s:377    .text.MX_ADC1_Init:0000000000000000 MX_ADC1_Init
     /tmp/cckW4jPf.s:451    .text.MX_ADC1_Init:000000000000004c $d
                            *COM*:0000000000000030 hadc1
     /tmp/cckW4jPf.s:457    .text.MX_RTC_Init:0000000000000000 $t
     /tmp/cckW4jPf.s:463    .text.MX_RTC_Init:0000000000000000 MX_RTC_Init
     /tmp/cckW4jPf.s:554    .text.MX_RTC_Init:0000000000000078 $d
                            *COM*:0000000000000014 hrtc
     /tmp/cckW4jPf.s:560    .text.MX_SPI1_Init:0000000000000000 $t
     /tmp/cckW4jPf.s:566    .text.MX_SPI1_Init:0000000000000000 MX_SPI1_Init
     /tmp/cckW4jPf.s:619    .text.MX_SPI1_Init:0000000000000038 $d
                            *COM*:0000000000000058 hspi1
     /tmp/cckW4jPf.s:625    .text.SystemClock_Config:0000000000000000 $t
     /tmp/cckW4jPf.s:632    .text.SystemClock_Config:0000000000000000 SystemClock_Config
     /tmp/cckW4jPf.s:735    .text.main:0000000000000000 $t
     /tmp/cckW4jPf.s:742    .text.main:0000000000000000 main
     /tmp/cckW4jPf.s:904    .text.main:00000000000000fc $d
                            *COM*:0000000000000004 Queue_UART_RXHandle
                            *COM*:0000000000000004 Queue_UART_TXHandle
                            *COM*:0000000000000004 ADC_LightSensorHandle
                            *COM*:0000000000000004 UART_TXHandle
                            *COM*:0000000000000004 LEDHandle
                            *COM*:0000000000000004 UART_RXHandle
     /tmp/cckW4jPf.s:982    .rodata.Queue_UART_TX_attributes:0000000000000000 Queue_UART_TX_attributes
     /tmp/cckW4jPf.s:974    .rodata.Queue_UART_RX_attributes:0000000000000000 Queue_UART_RX_attributes
     /tmp/cckW4jPf.s:990    .rodata.UART_RX_attributes:0000000000000000 UART_RX_attributes
     /tmp/cckW4jPf.s:963    .rodata.LED_attributes:0000000000000000 LED_attributes
     /tmp/cckW4jPf.s:1001   .rodata.UART_TX_attributes:0000000000000000 UART_TX_attributes
     /tmp/cckW4jPf.s:952    .rodata.ADC_LightSensor_attributes:0000000000000000 ADC_LightSensor_attributes
     /tmp/cckW4jPf.s:942    .rodata:0000000000000000 $d
     /tmp/cckW4jPf.s:948    .rodata.ADC_LightSensor_attributes:0000000000000000 $d
     /tmp/cckW4jPf.s:959    .rodata.LED_attributes:0000000000000000 $d
     /tmp/cckW4jPf.s:970    .rodata.Queue_UART_RX_attributes:0000000000000000 $d
     /tmp/cckW4jPf.s:978    .rodata.Queue_UART_TX_attributes:0000000000000000 $d
     /tmp/cckW4jPf.s:986    .rodata.UART_RX_attributes:0000000000000000 $d
ARM GAS  /tmp/cckW4jPf.s 			page 34


     /tmp/cckW4jPf.s:997    .rodata.UART_TX_attributes:0000000000000000 $d
     /tmp/cckW4jPf.s:1008   .rodata.str1.4:0000000000000000 $d
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
HAL_GPIO_WritePin
HAL_GPIO_Init
Thread_ADC_LightSensor
Thread_UART_TX
Thread_UART_RX
HAL_IncTick
HAL_UART_Init
HAL_ADC_Init
HAL_ADC_ConfigChannel
HAL_RTC_Init
HAL_RTC_SetTime
HAL_RTC_SetDate
HAL_SPI_Init
memset
HAL_RCC_OscConfig
HAL_RCC_ClockConfig
HAL_RCCEx_PeriphCLKConfig
HAL_Init
MX_FATFS_Init
SD_Init
SD_Write
SD_Read
strlen
HAL_UART_Transmit
osKernelInitialize
osMessageQueueNew
osThreadNew
osKernelStart
