ARM GAS  /tmp/ccMKUzo5.s 			page 1


   1              		.cpu cortex-m3
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 1
   9              		.eabi_attribute 34, 1
  10              		.eabi_attribute 18, 4
  11              		.file	"main.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.text.Tsk_LED,"ax",%progbits
  16              		.align	1
  17              		.global	Tsk_LED
  18              		.syntax unified
  19              		.thumb
  20              		.thumb_func
  21              		.fpu softvfp
  23              	Tsk_LED:
  24              	.LFB79:
  25              		.file 1 "Src/main.c"
   1:Src/main.c    **** /* USER CODE BEGIN Header */
   2:Src/main.c    **** /**
   3:Src/main.c    ****   ******************************************************************************
   4:Src/main.c    ****   * @file           : main.c
   5:Src/main.c    ****   * @brief          : Main program body
   6:Src/main.c    ****   ******************************************************************************
   7:Src/main.c    ****   * @attention
   8:Src/main.c    ****   *
   9:Src/main.c    ****   * <h2><center>&copy; Copyright (c) 2020 STMicroelectronics.
  10:Src/main.c    ****   * All rights reserved.</center></h2>
  11:Src/main.c    ****   *
  12:Src/main.c    ****   * This software component is licensed by ST under Ultimate Liberty license
  13:Src/main.c    ****   * SLA0044, the "License"; You may not use this file except in compliance with
  14:Src/main.c    ****   * the License. You may obtain a copy of the License at:
  15:Src/main.c    ****   *                             www.st.com/SLA0044
  16:Src/main.c    ****   *
  17:Src/main.c    ****   ******************************************************************************
  18:Src/main.c    ****   */
  19:Src/main.c    **** /* USER CODE END Header */
  20:Src/main.c    **** 
  21:Src/main.c    **** /* Includes ------------------------------------------------------------------*/
  22:Src/main.c    **** #include "main.h"
  23:Src/main.c    **** #include "cmsis_os.h"
  24:Src/main.c    **** #include "fatfs.h"
  25:Src/main.c    **** 
  26:Src/main.c    **** /* Private includes ----------------------------------------------------------*/
  27:Src/main.c    **** /* USER CODE BEGIN Includes */
  28:Src/main.c    **** #include <stdio.h>
  29:Src/main.c    **** #include <string.h>
  30:Src/main.c    **** #include "sd_io.h"
  31:Src/main.c    **** #include "ADC.h"
  32:Src/main.c    **** #include "UART.h"
  33:Src/main.c    **** /* USER CODE END Includes */
ARM GAS  /tmp/ccMKUzo5.s 			page 2


  34:Src/main.c    **** 
  35:Src/main.c    **** /* Private typedef -----------------------------------------------------------*/
  36:Src/main.c    **** /* USER CODE BEGIN PTD */
  37:Src/main.c    **** 
  38:Src/main.c    **** /* USER CODE END PTD */
  39:Src/main.c    **** 
  40:Src/main.c    **** /* Private define ------------------------------------------------------------*/
  41:Src/main.c    **** /* USER CODE BEGIN PD */
  42:Src/main.c    **** 
  43:Src/main.c    **** /* USER CODE END PD */
  44:Src/main.c    **** 
  45:Src/main.c    **** /* Private macro -------------------------------------------------------------*/
  46:Src/main.c    **** /* USER CODE BEGIN PM */
  47:Src/main.c    **** 
  48:Src/main.c    **** /* USER CODE END PM */
  49:Src/main.c    **** 
  50:Src/main.c    **** /* Private variables ---------------------------------------------------------*/
  51:Src/main.c    **** ADC_HandleTypeDef hadc1;
  52:Src/main.c    **** 
  53:Src/main.c    **** RTC_HandleTypeDef hrtc;
  54:Src/main.c    **** 
  55:Src/main.c    **** SPI_HandleTypeDef hspi1;
  56:Src/main.c    **** 
  57:Src/main.c    **** UART_HandleTypeDef huart1;
  58:Src/main.c    **** 
  59:Src/main.c    **** /* Definitions for ADC_LightSensor */
  60:Src/main.c    **** osThreadId_t ADC_LightSensorHandle;
  61:Src/main.c    **** const osThreadAttr_t ADC_LightSensor_attributes = {
  62:Src/main.c    ****   .name = "ADC_LightSensor",
  63:Src/main.c    ****   .priority = (osPriority_t) osPriorityNormal,
  64:Src/main.c    ****   .stack_size = 512
  65:Src/main.c    **** };
  66:Src/main.c    **** /* Definitions for UART_TX */
  67:Src/main.c    **** osThreadId_t UART_TXHandle;
  68:Src/main.c    **** const osThreadAttr_t UART_TX_attributes = {
  69:Src/main.c    ****   .name = "UART_TX",
  70:Src/main.c    ****   .priority = (osPriority_t) osPriorityLow,
  71:Src/main.c    ****   .stack_size = 128
  72:Src/main.c    **** };
  73:Src/main.c    **** /* Definitions for LED */
  74:Src/main.c    **** osThreadId_t LEDHandle;
  75:Src/main.c    **** const osThreadAttr_t LED_attributes = {
  76:Src/main.c    ****   .name = "LED",
  77:Src/main.c    ****   .priority = (osPriority_t) osPriorityLow,
  78:Src/main.c    ****   .stack_size = 128
  79:Src/main.c    **** };
  80:Src/main.c    **** /* Definitions for UART_RX */
  81:Src/main.c    **** osThreadId_t UART_RXHandle;
  82:Src/main.c    **** const osThreadAttr_t UART_RX_attributes = {
  83:Src/main.c    ****   .name = "UART_RX",
  84:Src/main.c    ****   .priority = (osPriority_t) osPriorityLow,
  85:Src/main.c    ****   .stack_size = 128
  86:Src/main.c    **** };
  87:Src/main.c    **** /* Definitions for Queue_UART_RX */
  88:Src/main.c    **** osMessageQueueId_t Queue_UART_RXHandle;
  89:Src/main.c    **** const osMessageQueueAttr_t Queue_UART_RX_attributes = {
  90:Src/main.c    ****   .name = "Queue_UART_RX"
ARM GAS  /tmp/ccMKUzo5.s 			page 3


  91:Src/main.c    **** };
  92:Src/main.c    **** /* Definitions for Queue_UART_TX */
  93:Src/main.c    **** osMessageQueueId_t Queue_UART_TXHandle;
  94:Src/main.c    **** const osMessageQueueAttr_t Queue_UART_TX_attributes = {
  95:Src/main.c    ****   .name = "Queue_UART_TX"
  96:Src/main.c    **** };
  97:Src/main.c    **** /* USER CODE BEGIN PV */
  98:Src/main.c    **** 
  99:Src/main.c    **** /* USER CODE END PV */
 100:Src/main.c    **** 
 101:Src/main.c    **** /* Private function prototypes -----------------------------------------------*/
 102:Src/main.c    **** void SystemClock_Config(void);
 103:Src/main.c    **** static void MX_GPIO_Init(void);
 104:Src/main.c    **** static void MX_USART1_UART_Init(void);
 105:Src/main.c    **** static void MX_ADC1_Init(void);
 106:Src/main.c    **** static void MX_RTC_Init(void);
 107:Src/main.c    **** static void MX_SPI1_Init(void);
 108:Src/main.c    **** void Tsk_ADC_LightSensor(void *argument);
 109:Src/main.c    **** void Tsk_UART_TX(void *argument);
 110:Src/main.c    **** void Tsk_LED(void *argument);
 111:Src/main.c    **** void Tsk_UART_RX(void *argument);
 112:Src/main.c    **** 
 113:Src/main.c    **** /* USER CODE BEGIN PFP */
 114:Src/main.c    **** 
 115:Src/main.c    **** /* USER CODE END PFP */
 116:Src/main.c    **** 
 117:Src/main.c    **** /* Private user code ---------------------------------------------------------*/
 118:Src/main.c    **** /* USER CODE BEGIN 0 */
 119:Src/main.c    **** 
 120:Src/main.c    **** /* USER CODE END 0 */
 121:Src/main.c    **** 
 122:Src/main.c    **** /**
 123:Src/main.c    ****   * @brief  The application entry point.
 124:Src/main.c    ****   * @retval int
 125:Src/main.c    ****   */
 126:Src/main.c    **** int main(void)
 127:Src/main.c    **** {
 128:Src/main.c    ****   /* USER CODE BEGIN 1 */
 129:Src/main.c    ****   SD_DEV dev[1];          // Create device descriptor
 130:Src/main.c    ****   uint8_t buffer[512];    // Example of your buffer data
 131:Src/main.c    ****   /* USER CODE END 1 */
 132:Src/main.c    ****   
 133:Src/main.c    **** 
 134:Src/main.c    ****   /* MCU Configuration--------------------------------------------------------*/
 135:Src/main.c    **** 
 136:Src/main.c    ****   /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
 137:Src/main.c    ****   HAL_Init();
 138:Src/main.c    **** 
 139:Src/main.c    ****   /* USER CODE BEGIN Init */
 140:Src/main.c    ****   
 141:Src/main.c    ****   /* USER CODE END Init */
 142:Src/main.c    **** 
 143:Src/main.c    ****   /* Configure the system clock */
 144:Src/main.c    ****   SystemClock_Config();
 145:Src/main.c    **** 
 146:Src/main.c    ****   /* USER CODE BEGIN SysInit */
 147:Src/main.c    ****   
ARM GAS  /tmp/ccMKUzo5.s 			page 4


 148:Src/main.c    ****   /* USER CODE END SysInit */
 149:Src/main.c    **** 
 150:Src/main.c    ****   /* Initialize all configured peripherals */
 151:Src/main.c    ****   MX_GPIO_Init();
 152:Src/main.c    ****   MX_USART1_UART_Init();
 153:Src/main.c    ****   MX_ADC1_Init();
 154:Src/main.c    ****   MX_RTC_Init();
 155:Src/main.c    ****   MX_SPI1_Init();
 156:Src/main.c    ****   MX_FATFS_Init();
 157:Src/main.c    ****   /* USER CODE BEGIN 2 */
 158:Src/main.c    ****   SDRESULTS res = SD_Init(dev);
 159:Src/main.c    ****   /* USER CODE END 2 */
 160:Src/main.c    ****   /* Init scheduler */
 161:Src/main.c    ****   osKernelInitialize();
 162:Src/main.c    **** 
 163:Src/main.c    ****   /* USER CODE BEGIN RTOS_MUTEX */
 164:Src/main.c    ****   /* add mutexes, ... */
 165:Src/main.c    ****   /* USER CODE END RTOS_MUTEX */
 166:Src/main.c    **** 
 167:Src/main.c    ****   /* USER CODE BEGIN RTOS_SEMAPHORES */
 168:Src/main.c    ****   /* add semaphores, ... */
 169:Src/main.c    ****   /* USER CODE END RTOS_SEMAPHORES */
 170:Src/main.c    **** 
 171:Src/main.c    ****   /* USER CODE BEGIN RTOS_TIMERS */
 172:Src/main.c    ****   /* start timers, add new ones, ... */
 173:Src/main.c    ****   /* USER CODE END RTOS_TIMERS */
 174:Src/main.c    **** 
 175:Src/main.c    ****   /* Create the queue(s) */
 176:Src/main.c    ****   /* creation of Queue_UART_RX */
 177:Src/main.c    ****   Queue_UART_RXHandle = osMessageQueueNew (128, sizeof(char), &Queue_UART_RX_attributes);
 178:Src/main.c    **** 
 179:Src/main.c    ****   /* creation of Queue_UART_TX */
 180:Src/main.c    ****   Queue_UART_TXHandle = osMessageQueueNew (128, sizeof(char), &Queue_UART_TX_attributes);
 181:Src/main.c    **** 
 182:Src/main.c    ****   /* USER CODE BEGIN RTOS_QUEUES */
 183:Src/main.c    ****   /* add queues, ... */
 184:Src/main.c    ****   /* USER CODE END RTOS_QUEUES */
 185:Src/main.c    **** 
 186:Src/main.c    ****   /* Create the thread(s) */
 187:Src/main.c    ****   /* creation of ADC_LightSensor */
 188:Src/main.c    ****   ADC_LightSensorHandle = osThreadNew(Tsk_ADC_LightSensor, NULL, &ADC_LightSensor_attributes);
 189:Src/main.c    **** 
 190:Src/main.c    ****   /* creation of UART_TX */
 191:Src/main.c    ****   UART_TXHandle = osThreadNew(Tsk_UART_TX, NULL, &UART_TX_attributes);
 192:Src/main.c    **** 
 193:Src/main.c    ****   /* creation of LED */
 194:Src/main.c    ****   LEDHandle = osThreadNew(Tsk_LED, NULL, &LED_attributes);
 195:Src/main.c    **** 
 196:Src/main.c    ****   /* creation of UART_RX */
 197:Src/main.c    ****   UART_RXHandle = osThreadNew(Tsk_UART_RX, NULL, &UART_RX_attributes);
 198:Src/main.c    **** 
 199:Src/main.c    ****   /* USER CODE BEGIN RTOS_THREADS */
 200:Src/main.c    ****   /* add threads, ... */
 201:Src/main.c    ****   /* USER CODE END RTOS_THREADS */
 202:Src/main.c    **** 
 203:Src/main.c    ****   /* Start scheduler */
 204:Src/main.c    ****   osKernelStart();
ARM GAS  /tmp/ccMKUzo5.s 			page 5


 205:Src/main.c    ****  
 206:Src/main.c    ****   /* We should never get here as control is now taken by the scheduler */
 207:Src/main.c    **** 
 208:Src/main.c    ****   /* Infinite loop */
 209:Src/main.c    ****   /* USER CODE BEGIN WHILE */
 210:Src/main.c    ****   while (1)
 211:Src/main.c    ****   {
 212:Src/main.c    ****     /* USER CODE END WHILE */
 213:Src/main.c    **** 
 214:Src/main.c    ****     /* USER CODE BEGIN 3 */
 215:Src/main.c    ****   }
 216:Src/main.c    ****   /* USER CODE END 3 */
 217:Src/main.c    **** }
 218:Src/main.c    **** 
 219:Src/main.c    **** /**
 220:Src/main.c    ****   * @brief System Clock Configuration
 221:Src/main.c    ****   * @retval None
 222:Src/main.c    ****   */
 223:Src/main.c    **** void SystemClock_Config(void)
 224:Src/main.c    **** {
 225:Src/main.c    ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 226:Src/main.c    ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 227:Src/main.c    ****   RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 228:Src/main.c    **** 
 229:Src/main.c    ****   /** Initializes the CPU, AHB and APB busses clocks 
 230:Src/main.c    ****   */
 231:Src/main.c    ****   RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 232:Src/main.c    ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 233:Src/main.c    ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 234:Src/main.c    ****   RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 235:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 236:Src/main.c    ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 237:Src/main.c    ****   {
 238:Src/main.c    ****     Error_Handler();
 239:Src/main.c    ****   }
 240:Src/main.c    ****   /** Initializes the CPU, AHB and APB busses clocks 
 241:Src/main.c    ****   */
 242:Src/main.c    ****   RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 243:Src/main.c    ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 244:Src/main.c    ****   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 245:Src/main.c    ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 246:Src/main.c    ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 247:Src/main.c    ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 248:Src/main.c    **** 
 249:Src/main.c    ****   if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 250:Src/main.c    ****   {
 251:Src/main.c    ****     Error_Handler();
 252:Src/main.c    ****   }
 253:Src/main.c    ****   PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_ADC;
 254:Src/main.c    ****   PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 255:Src/main.c    ****   PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 256:Src/main.c    ****   if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 257:Src/main.c    ****   {
 258:Src/main.c    ****     Error_Handler();
 259:Src/main.c    ****   }
 260:Src/main.c    **** }
 261:Src/main.c    **** 
ARM GAS  /tmp/ccMKUzo5.s 			page 6


 262:Src/main.c    **** /**
 263:Src/main.c    ****   * @brief ADC1 Initialization Function
 264:Src/main.c    ****   * @param None
 265:Src/main.c    ****   * @retval None
 266:Src/main.c    ****   */
 267:Src/main.c    **** static void MX_ADC1_Init(void)
 268:Src/main.c    **** {
 269:Src/main.c    **** 
 270:Src/main.c    ****   /* USER CODE BEGIN ADC1_Init 0 */
 271:Src/main.c    **** 
 272:Src/main.c    ****   /* USER CODE END ADC1_Init 0 */
 273:Src/main.c    **** 
 274:Src/main.c    ****   ADC_ChannelConfTypeDef sConfig = {0};
 275:Src/main.c    **** 
 276:Src/main.c    ****   /* USER CODE BEGIN ADC1_Init 1 */
 277:Src/main.c    **** 
 278:Src/main.c    ****   /* USER CODE END ADC1_Init 1 */
 279:Src/main.c    ****   /** Common config 
 280:Src/main.c    ****   */
 281:Src/main.c    ****   hadc1.Instance = ADC1;
 282:Src/main.c    ****   hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 283:Src/main.c    ****   hadc1.Init.ContinuousConvMode = DISABLE;
 284:Src/main.c    ****   hadc1.Init.DiscontinuousConvMode = DISABLE;
 285:Src/main.c    ****   hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 286:Src/main.c    ****   hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 287:Src/main.c    ****   hadc1.Init.NbrOfConversion = 1;
 288:Src/main.c    ****   if (HAL_ADC_Init(&hadc1) != HAL_OK)
 289:Src/main.c    ****   {
 290:Src/main.c    ****     Error_Handler();
 291:Src/main.c    ****   }
 292:Src/main.c    ****   /** Configure Regular Channel 
 293:Src/main.c    ****   */
 294:Src/main.c    ****   sConfig.Channel = ADC_CHANNEL_1;
 295:Src/main.c    ****   sConfig.Rank = ADC_REGULAR_RANK_1;
 296:Src/main.c    ****   sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 297:Src/main.c    ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 298:Src/main.c    ****   {
 299:Src/main.c    ****     Error_Handler();
 300:Src/main.c    ****   }
 301:Src/main.c    ****   /* USER CODE BEGIN ADC1_Init 2 */
 302:Src/main.c    **** 
 303:Src/main.c    ****   /* USER CODE END ADC1_Init 2 */
 304:Src/main.c    **** 
 305:Src/main.c    **** }
 306:Src/main.c    **** 
 307:Src/main.c    **** /**
 308:Src/main.c    ****   * @brief RTC Initialization Function
 309:Src/main.c    ****   * @param None
 310:Src/main.c    ****   * @retval None
 311:Src/main.c    ****   */
 312:Src/main.c    **** static void MX_RTC_Init(void)
 313:Src/main.c    **** {
 314:Src/main.c    **** 
 315:Src/main.c    ****   /* USER CODE BEGIN RTC_Init 0 */
 316:Src/main.c    **** 
 317:Src/main.c    ****   /* USER CODE END RTC_Init 0 */
 318:Src/main.c    **** 
ARM GAS  /tmp/ccMKUzo5.s 			page 7


 319:Src/main.c    ****   RTC_TimeTypeDef sTime = {0};
 320:Src/main.c    ****   RTC_DateTypeDef DateToUpdate = {0};
 321:Src/main.c    **** 
 322:Src/main.c    ****   /* USER CODE BEGIN RTC_Init 1 */
 323:Src/main.c    **** 
 324:Src/main.c    ****   /* USER CODE END RTC_Init 1 */
 325:Src/main.c    ****   /** Initialize RTC Only 
 326:Src/main.c    ****   */
 327:Src/main.c    ****   hrtc.Instance = RTC;
 328:Src/main.c    ****   hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 329:Src/main.c    ****   hrtc.Init.OutPut = RTC_OUTPUTSOURCE_NONE;
 330:Src/main.c    ****   if (HAL_RTC_Init(&hrtc) != HAL_OK)
 331:Src/main.c    ****   {
 332:Src/main.c    ****     Error_Handler();
 333:Src/main.c    ****   }
 334:Src/main.c    **** 
 335:Src/main.c    ****   /* USER CODE BEGIN Check_RTC_BKUP */
 336:Src/main.c    ****     
 337:Src/main.c    ****   /* USER CODE END Check_RTC_BKUP */
 338:Src/main.c    **** 
 339:Src/main.c    ****   /** Initialize RTC and set the Time and Date 
 340:Src/main.c    ****   */
 341:Src/main.c    ****   sTime.Hours = 0x17;
 342:Src/main.c    ****   sTime.Minutes = 0x0;
 343:Src/main.c    ****   sTime.Seconds = 0x30;
 344:Src/main.c    **** 
 345:Src/main.c    ****   if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 346:Src/main.c    ****   {
 347:Src/main.c    ****     Error_Handler();
 348:Src/main.c    ****   }
 349:Src/main.c    ****   DateToUpdate.WeekDay = RTC_WEEKDAY_SATURDAY;
 350:Src/main.c    ****   DateToUpdate.Month = RTC_MONTH_FEBRUARY;
 351:Src/main.c    ****   DateToUpdate.Date = 0x29;
 352:Src/main.c    ****   DateToUpdate.Year = 0x20;
 353:Src/main.c    **** 
 354:Src/main.c    ****   if (HAL_RTC_SetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BCD) != HAL_OK)
 355:Src/main.c    ****   {
 356:Src/main.c    ****     Error_Handler();
 357:Src/main.c    ****   }
 358:Src/main.c    ****   /* USER CODE BEGIN RTC_Init 2 */
 359:Src/main.c    **** 
 360:Src/main.c    ****   /* USER CODE END RTC_Init 2 */
 361:Src/main.c    **** 
 362:Src/main.c    **** }
 363:Src/main.c    **** 
 364:Src/main.c    **** /**
 365:Src/main.c    ****   * @brief SPI1 Initialization Function
 366:Src/main.c    ****   * @param None
 367:Src/main.c    ****   * @retval None
 368:Src/main.c    ****   */
 369:Src/main.c    **** static void MX_SPI1_Init(void)
 370:Src/main.c    **** {
 371:Src/main.c    **** 
 372:Src/main.c    ****   /* USER CODE BEGIN SPI1_Init 0 */
 373:Src/main.c    **** 
 374:Src/main.c    ****   /* USER CODE END SPI1_Init 0 */
 375:Src/main.c    **** 
ARM GAS  /tmp/ccMKUzo5.s 			page 8


 376:Src/main.c    ****   /* USER CODE BEGIN SPI1_Init 1 */
 377:Src/main.c    **** 
 378:Src/main.c    ****   /* USER CODE END SPI1_Init 1 */
 379:Src/main.c    ****   /* SPI1 parameter configuration*/
 380:Src/main.c    ****   hspi1.Instance = SPI1;
 381:Src/main.c    ****   hspi1.Init.Mode = SPI_MODE_MASTER;
 382:Src/main.c    ****   hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 383:Src/main.c    ****   hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 384:Src/main.c    ****   hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 385:Src/main.c    ****   hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 386:Src/main.c    ****   hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 387:Src/main.c    ****   hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 388:Src/main.c    ****   hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 389:Src/main.c    ****   hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 390:Src/main.c    ****   hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 391:Src/main.c    ****   hspi1.Init.CRCPolynomial = 10;
 392:Src/main.c    ****   if (HAL_SPI_Init(&hspi1) != HAL_OK)
 393:Src/main.c    ****   {
 394:Src/main.c    ****     Error_Handler();
 395:Src/main.c    ****   }
 396:Src/main.c    ****   /* USER CODE BEGIN SPI1_Init 2 */
 397:Src/main.c    **** 
 398:Src/main.c    ****   /* USER CODE END SPI1_Init 2 */
 399:Src/main.c    **** 
 400:Src/main.c    **** }
 401:Src/main.c    **** 
 402:Src/main.c    **** /**
 403:Src/main.c    ****   * @brief USART1 Initialization Function
 404:Src/main.c    ****   * @param None
 405:Src/main.c    ****   * @retval None
 406:Src/main.c    ****   */
 407:Src/main.c    **** static void MX_USART1_UART_Init(void)
 408:Src/main.c    **** {
 409:Src/main.c    **** 
 410:Src/main.c    ****   /* USER CODE BEGIN USART1_Init 0 */
 411:Src/main.c    **** 
 412:Src/main.c    ****   /* USER CODE END USART1_Init 0 */
 413:Src/main.c    **** 
 414:Src/main.c    ****   /* USER CODE BEGIN USART1_Init 1 */
 415:Src/main.c    **** 
 416:Src/main.c    ****   /* USER CODE END USART1_Init 1 */
 417:Src/main.c    ****   huart1.Instance = USART1;
 418:Src/main.c    ****   huart1.Init.BaudRate = 115200;
 419:Src/main.c    ****   huart1.Init.WordLength = UART_WORDLENGTH_8B;
 420:Src/main.c    ****   huart1.Init.StopBits = UART_STOPBITS_1;
 421:Src/main.c    ****   huart1.Init.Parity = UART_PARITY_NONE;
 422:Src/main.c    ****   huart1.Init.Mode = UART_MODE_TX_RX;
 423:Src/main.c    ****   huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 424:Src/main.c    ****   huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 425:Src/main.c    ****   if (HAL_UART_Init(&huart1) != HAL_OK)
 426:Src/main.c    ****   {
 427:Src/main.c    ****     Error_Handler();
 428:Src/main.c    ****   }
 429:Src/main.c    ****   /* USER CODE BEGIN USART1_Init 2 */
 430:Src/main.c    ****   
 431:Src/main.c    ****   /* USER CODE END USART1_Init 2 */
 432:Src/main.c    **** 
ARM GAS  /tmp/ccMKUzo5.s 			page 9


 433:Src/main.c    **** }
 434:Src/main.c    **** 
 435:Src/main.c    **** /**
 436:Src/main.c    ****   * @brief GPIO Initialization Function
 437:Src/main.c    ****   * @param None
 438:Src/main.c    ****   * @retval None
 439:Src/main.c    ****   */
 440:Src/main.c    **** static void MX_GPIO_Init(void)
 441:Src/main.c    **** {
 442:Src/main.c    ****   GPIO_InitTypeDef GPIO_InitStruct = {0};
 443:Src/main.c    **** 
 444:Src/main.c    ****   /* GPIO Ports Clock Enable */
 445:Src/main.c    ****   __HAL_RCC_GPIOC_CLK_ENABLE();
 446:Src/main.c    ****   __HAL_RCC_GPIOD_CLK_ENABLE();
 447:Src/main.c    ****   __HAL_RCC_GPIOA_CLK_ENABLE();
 448:Src/main.c    **** 
 449:Src/main.c    ****   /*Configure GPIO pin Output Level */
 450:Src/main.c    ****   HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 451:Src/main.c    **** 
 452:Src/main.c    ****   /*Configure GPIO pin : LED_Pin */
 453:Src/main.c    ****   GPIO_InitStruct.Pin = LED_Pin;
 454:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 455:Src/main.c    ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 456:Src/main.c    ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 457:Src/main.c    ****   HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 458:Src/main.c    **** 
 459:Src/main.c    **** }
 460:Src/main.c    **** 
 461:Src/main.c    **** /* USER CODE BEGIN 4 */
 462:Src/main.c    **** 
 463:Src/main.c    **** /* USER CODE END 4 */
 464:Src/main.c    **** 
 465:Src/main.c    **** /* USER CODE BEGIN Header_Tsk_ADC_LightSensor */
 466:Src/main.c    **** /**
 467:Src/main.c    ****   * @brief  Function implementing the ADC_LightSensor thread.
 468:Src/main.c    ****   * @param  argument: Not used 
 469:Src/main.c    ****   * @retval None
 470:Src/main.c    ****   */
 471:Src/main.c    **** /* USER CODE END Header_Tsk_ADC_LightSensor */
 472:Src/main.c    **** void Tsk_ADC_LightSensor(void *argument)
 473:Src/main.c    **** {
 474:Src/main.c    ****   /* USER CODE BEGIN 5 */
 475:Src/main.c    **** 
 476:Src/main.c    ****   /* Infinite loop */
 477:Src/main.c    ****   for(;;)
 478:Src/main.c    ****   {
 479:Src/main.c    ****     Thread_ADC_LightSensor();
 480:Src/main.c    ****   }
 481:Src/main.c    ****   /* USER CODE END 5 */ 
 482:Src/main.c    **** }
 483:Src/main.c    **** 
 484:Src/main.c    **** /* USER CODE BEGIN Header_Tsk_UART_TX */
 485:Src/main.c    **** /**
 486:Src/main.c    **** * @brief Function implementing the UART_TX thread.
 487:Src/main.c    **** * @param argument: Not used
 488:Src/main.c    **** * @retval None
 489:Src/main.c    **** */
ARM GAS  /tmp/ccMKUzo5.s 			page 10


 490:Src/main.c    **** /* USER CODE END Header_Tsk_UART_TX */
 491:Src/main.c    **** void Tsk_UART_TX(void *argument)
 492:Src/main.c    **** {
 493:Src/main.c    ****   /* USER CODE BEGIN Tsk_UART_TX */
 494:Src/main.c    ****   
 495:Src/main.c    ****   /* Infinite loop */
 496:Src/main.c    ****   for(;;)
 497:Src/main.c    ****   {
 498:Src/main.c    ****       Thread_UART_TX();
 499:Src/main.c    ****   }
 500:Src/main.c    ****   /* USER CODE END Tsk_UART_TX */
 501:Src/main.c    **** }
 502:Src/main.c    **** 
 503:Src/main.c    **** /* USER CODE BEGIN Header_Tsk_LED */
 504:Src/main.c    **** /**
 505:Src/main.c    **** * @brief Function implementing the LED thread.
 506:Src/main.c    **** * @param argument: Not used
 507:Src/main.c    **** * @retval None
 508:Src/main.c    **** */
 509:Src/main.c    **** /* USER CODE END Header_Tsk_LED */
 510:Src/main.c    **** void Tsk_LED(void *argument)
 511:Src/main.c    **** {
  26              		.loc 1 511 0
  27              		.cfi_startproc
  28              		@ args = 0, pretend = 0, frame = 0
  29              		@ frame_needed = 0, uses_anonymous_args = 0
  30              		@ link register save eliminated.
  31              	.LVL0:
  32              	.L2:
  33 0000 FEE7     		b	.L2
  34              		.cfi_endproc
  35              	.LFE79:
  37              		.section	.text.MX_GPIO_Init,"ax",%progbits
  38              		.align	1
  39              		.syntax unified
  40              		.thumb
  41              		.thumb_func
  42              		.fpu softvfp
  44              	MX_GPIO_Init:
  45              	.LFB76:
 441:Src/main.c    ****   GPIO_InitTypeDef GPIO_InitStruct = {0};
  46              		.loc 1 441 0
  47              		.cfi_startproc
  48              		@ args = 0, pretend = 0, frame = 32
  49              		@ frame_needed = 0, uses_anonymous_args = 0
 441:Src/main.c    ****   GPIO_InitTypeDef GPIO_InitStruct = {0};
  50              		.loc 1 441 0
  51 0000 30B5     		push	{r4, r5, lr}
  52              	.LCFI0:
  53              		.cfi_def_cfa_offset 12
  54              		.cfi_offset 4, -12
  55              		.cfi_offset 5, -8
  56              		.cfi_offset 14, -4
  57 0002 89B0     		sub	sp, sp, #36
  58              	.LCFI1:
  59              		.cfi_def_cfa_offset 48
 442:Src/main.c    **** 
ARM GAS  /tmp/ccMKUzo5.s 			page 11


  60              		.loc 1 442 0
  61 0004 0024     		movs	r4, #0
  62 0006 0494     		str	r4, [sp, #16]
  63 0008 0594     		str	r4, [sp, #20]
  64 000a 0694     		str	r4, [sp, #24]
  65 000c 0794     		str	r4, [sp, #28]
  66              	.LBB2:
 445:Src/main.c    ****   __HAL_RCC_GPIOD_CLK_ENABLE();
  67              		.loc 1 445 0
  68 000e 184B     		ldr	r3, .L5
  69 0010 9A69     		ldr	r2, [r3, #24]
  70 0012 42F01002 		orr	r2, r2, #16
  71 0016 9A61     		str	r2, [r3, #24]
  72 0018 9A69     		ldr	r2, [r3, #24]
  73 001a 02F01002 		and	r2, r2, #16
  74 001e 0192     		str	r2, [sp, #4]
  75 0020 019A     		ldr	r2, [sp, #4]
  76              	.LBE2:
  77              	.LBB3:
 446:Src/main.c    ****   __HAL_RCC_GPIOA_CLK_ENABLE();
  78              		.loc 1 446 0
  79 0022 9A69     		ldr	r2, [r3, #24]
  80 0024 42F02002 		orr	r2, r2, #32
  81 0028 9A61     		str	r2, [r3, #24]
  82 002a 9A69     		ldr	r2, [r3, #24]
  83 002c 02F02002 		and	r2, r2, #32
  84 0030 0292     		str	r2, [sp, #8]
  85 0032 029A     		ldr	r2, [sp, #8]
  86              	.LBE3:
  87              	.LBB4:
 447:Src/main.c    **** 
  88              		.loc 1 447 0
  89 0034 9A69     		ldr	r2, [r3, #24]
  90 0036 42F00402 		orr	r2, r2, #4
  91 003a 9A61     		str	r2, [r3, #24]
  92 003c 9B69     		ldr	r3, [r3, #24]
  93 003e 03F00403 		and	r3, r3, #4
  94 0042 0393     		str	r3, [sp, #12]
  95 0044 039B     		ldr	r3, [sp, #12]
  96              	.LBE4:
 450:Src/main.c    **** 
  97              		.loc 1 450 0
  98 0046 0B4D     		ldr	r5, .L5+4
  99 0048 2246     		mov	r2, r4
 100 004a 4FF40051 		mov	r1, #8192
 101 004e 2846     		mov	r0, r5
 102 0050 FFF7FEFF 		bl	HAL_GPIO_WritePin
 103              	.LVL1:
 453:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 104              		.loc 1 453 0
 105 0054 4FF40053 		mov	r3, #8192
 106 0058 0493     		str	r3, [sp, #16]
 454:Src/main.c    ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 107              		.loc 1 454 0
 108 005a 0123     		movs	r3, #1
 109 005c 0593     		str	r3, [sp, #20]
 455:Src/main.c    ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
ARM GAS  /tmp/ccMKUzo5.s 			page 12


 110              		.loc 1 455 0
 111 005e 0694     		str	r4, [sp, #24]
 456:Src/main.c    ****   HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 112              		.loc 1 456 0
 113 0060 0223     		movs	r3, #2
 114 0062 0793     		str	r3, [sp, #28]
 457:Src/main.c    **** 
 115              		.loc 1 457 0
 116 0064 04A9     		add	r1, sp, #16
 117 0066 2846     		mov	r0, r5
 118 0068 FFF7FEFF 		bl	HAL_GPIO_Init
 119              	.LVL2:
 459:Src/main.c    **** 
 120              		.loc 1 459 0
 121 006c 09B0     		add	sp, sp, #36
 122              	.LCFI2:
 123              		.cfi_def_cfa_offset 12
 124              		@ sp needed
 125 006e 30BD     		pop	{r4, r5, pc}
 126              	.L6:
 127              		.align	2
 128              	.L5:
 129 0070 00100240 		.word	1073876992
 130 0074 00100140 		.word	1073811456
 131              		.cfi_endproc
 132              	.LFE76:
 134              		.section	.text.Tsk_ADC_LightSensor,"ax",%progbits
 135              		.align	1
 136              		.global	Tsk_ADC_LightSensor
 137              		.syntax unified
 138              		.thumb
 139              		.thumb_func
 140              		.fpu softvfp
 142              	Tsk_ADC_LightSensor:
 143              	.LFB77:
 473:Src/main.c    ****   /* USER CODE BEGIN 5 */
 144              		.loc 1 473 0
 145              		.cfi_startproc
 146              		@ Volatile: function does not return.
 147              		@ args = 0, pretend = 0, frame = 0
 148              		@ frame_needed = 0, uses_anonymous_args = 0
 149              	.LVL3:
 150 0000 08B5     		push	{r3, lr}
 151              	.LCFI3:
 152              		.cfi_def_cfa_offset 8
 153              		.cfi_offset 3, -8
 154              		.cfi_offset 14, -4
 155              	.LVL4:
 156              	.L8:
 479:Src/main.c    ****   }
 157              		.loc 1 479 0 discriminator 1
 158 0002 FFF7FEFF 		bl	Thread_ADC_LightSensor
 159              	.LVL5:
 160 0006 FCE7     		b	.L8
 161              		.cfi_endproc
 162              	.LFE77:
 164              		.section	.text.Tsk_UART_TX,"ax",%progbits
ARM GAS  /tmp/ccMKUzo5.s 			page 13


 165              		.align	1
 166              		.global	Tsk_UART_TX
 167              		.syntax unified
 168              		.thumb
 169              		.thumb_func
 170              		.fpu softvfp
 172              	Tsk_UART_TX:
 173              	.LFB78:
 492:Src/main.c    ****   /* USER CODE BEGIN Tsk_UART_TX */
 174              		.loc 1 492 0
 175              		.cfi_startproc
 176              		@ Volatile: function does not return.
 177              		@ args = 0, pretend = 0, frame = 0
 178              		@ frame_needed = 0, uses_anonymous_args = 0
 179              	.LVL6:
 180 0000 08B5     		push	{r3, lr}
 181              	.LCFI4:
 182              		.cfi_def_cfa_offset 8
 183              		.cfi_offset 3, -8
 184              		.cfi_offset 14, -4
 185              	.LVL7:
 186              	.L11:
 498:Src/main.c    ****   }
 187              		.loc 1 498 0 discriminator 1
 188 0002 FFF7FEFF 		bl	Thread_UART_TX
 189              	.LVL8:
 190 0006 FCE7     		b	.L11
 191              		.cfi_endproc
 192              	.LFE78:
 194              		.section	.text.Tsk_UART_RX,"ax",%progbits
 195              		.align	1
 196              		.global	Tsk_UART_RX
 197              		.syntax unified
 198              		.thumb
 199              		.thumb_func
 200              		.fpu softvfp
 202              	Tsk_UART_RX:
 203              	.LFB80:
 512:Src/main.c    ****   /* USER CODE BEGIN Tsk_LED */
 513:Src/main.c    ****   volatile uint32_t * GPIOC_BSRR = (uint32_t *) 0x40011010;
 514:Src/main.c    ****   volatile uint32_t * GPIOC_BRR = (uint32_t *) 0x40011014;  
 515:Src/main.c    ****   /* Infinite loop */
 516:Src/main.c    ****   for(;;)
 517:Src/main.c    ****   {
 518:Src/main.c    ****     /*
 519:Src/main.c    ****     *GPIOC_BRR |= (0x1 << 13);
 520:Src/main.c    ****     osDelay(500);
 521:Src/main.c    ****     *GPIOC_BSRR |= (0x1 << 13);
 522:Src/main.c    ****     osDelay(500);
 523:Src/main.c    ****     */
 524:Src/main.c    ****   }
 525:Src/main.c    ****   /* USER CODE END Tsk_LED */
 526:Src/main.c    **** }
 527:Src/main.c    **** 
 528:Src/main.c    **** /* USER CODE BEGIN Header_Tsk_UART_RX */
 529:Src/main.c    **** /**
 530:Src/main.c    **** * @brief Function implementing the UART_RX thread.
ARM GAS  /tmp/ccMKUzo5.s 			page 14


 531:Src/main.c    **** * @param argument: Not used
 532:Src/main.c    **** * @retval None
 533:Src/main.c    **** */
 534:Src/main.c    **** /* USER CODE END Header_Tsk_UART_RX */
 535:Src/main.c    **** void Tsk_UART_RX(void *argument)
 536:Src/main.c    **** {
 204              		.loc 1 536 0
 205              		.cfi_startproc
 206              		@ Volatile: function does not return.
 207              		@ args = 0, pretend = 0, frame = 0
 208              		@ frame_needed = 0, uses_anonymous_args = 0
 209              	.LVL9:
 210 0000 08B5     		push	{r3, lr}
 211              	.LCFI5:
 212              		.cfi_def_cfa_offset 8
 213              		.cfi_offset 3, -8
 214              		.cfi_offset 14, -4
 215              	.LVL10:
 216              	.L14:
 537:Src/main.c    ****   /* USER CODE BEGIN Tsk_UART_RX */
 538:Src/main.c    **** 
 539:Src/main.c    ****   /* Infinite loop */
 540:Src/main.c    ****   for(;;)
 541:Src/main.c    ****   {
 542:Src/main.c    ****       Thread_UART_RX();
 217              		.loc 1 542 0 discriminator 1
 218 0002 FFF7FEFF 		bl	Thread_UART_RX
 219              	.LVL11:
 220 0006 FCE7     		b	.L14
 221              		.cfi_endproc
 222              	.LFE80:
 224              		.section	.text.HAL_TIM_PeriodElapsedCallback,"ax",%progbits
 225              		.align	1
 226              		.global	HAL_TIM_PeriodElapsedCallback
 227              		.syntax unified
 228              		.thumb
 229              		.thumb_func
 230              		.fpu softvfp
 232              	HAL_TIM_PeriodElapsedCallback:
 233              	.LFB81:
 543:Src/main.c    ****   }
 544:Src/main.c    ****   /* USER CODE END Tsk_UART_RX */
 545:Src/main.c    **** }
 546:Src/main.c    **** 
 547:Src/main.c    **** /**
 548:Src/main.c    ****   * @brief  Period elapsed callback in non blocking mode
 549:Src/main.c    ****   * @note   This function is called  when TIM1 interrupt took place, inside
 550:Src/main.c    ****   * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 551:Src/main.c    ****   * a global variable "uwTick" used as application time base.
 552:Src/main.c    ****   * @param  htim : TIM handle
 553:Src/main.c    ****   * @retval None
 554:Src/main.c    ****   */
 555:Src/main.c    **** void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
 556:Src/main.c    **** {
 234              		.loc 1 556 0
 235              		.cfi_startproc
 236              		@ args = 0, pretend = 0, frame = 0
ARM GAS  /tmp/ccMKUzo5.s 			page 15


 237              		@ frame_needed = 0, uses_anonymous_args = 0
 238              	.LVL12:
 239 0000 08B5     		push	{r3, lr}
 240              	.LCFI6:
 241              		.cfi_def_cfa_offset 8
 242              		.cfi_offset 3, -8
 243              		.cfi_offset 14, -4
 557:Src/main.c    ****   /* USER CODE BEGIN Callback 0 */
 558:Src/main.c    **** 
 559:Src/main.c    ****   /* USER CODE END Callback 0 */
 560:Src/main.c    ****   if (htim->Instance == TIM1) {
 244              		.loc 1 560 0
 245 0002 0268     		ldr	r2, [r0]
 246 0004 034B     		ldr	r3, .L20
 247 0006 9A42     		cmp	r2, r3
 248 0008 00D0     		beq	.L19
 249              	.LVL13:
 250              	.L16:
 251 000a 08BD     		pop	{r3, pc}
 252              	.LVL14:
 253              	.L19:
 561:Src/main.c    ****     HAL_IncTick();
 254              		.loc 1 561 0
 255 000c FFF7FEFF 		bl	HAL_IncTick
 256              	.LVL15:
 562:Src/main.c    ****   }
 563:Src/main.c    ****   /* USER CODE BEGIN Callback 1 */
 564:Src/main.c    **** 
 565:Src/main.c    ****   /* USER CODE END Callback 1 */
 566:Src/main.c    **** }
 257              		.loc 1 566 0
 258 0010 FBE7     		b	.L16
 259              	.L21:
 260 0012 00BF     		.align	2
 261              	.L20:
 262 0014 002C0140 		.word	1073818624
 263              		.cfi_endproc
 264              	.LFE81:
 266              		.section	.text.Error_Handler,"ax",%progbits
 267              		.align	1
 268              		.global	Error_Handler
 269              		.syntax unified
 270              		.thumb
 271              		.thumb_func
 272              		.fpu softvfp
 274              	Error_Handler:
 275              	.LFB82:
 567:Src/main.c    **** 
 568:Src/main.c    **** /**
 569:Src/main.c    ****   * @brief  This function is executed in case of error occurrence.
 570:Src/main.c    ****   * @retval None
 571:Src/main.c    ****   */
 572:Src/main.c    **** void Error_Handler(void)
 573:Src/main.c    **** {
 276              		.loc 1 573 0
 277              		.cfi_startproc
 278              		@ Volatile: function does not return.
ARM GAS  /tmp/ccMKUzo5.s 			page 16


 279              		@ args = 0, pretend = 0, frame = 0
 280              		@ frame_needed = 0, uses_anonymous_args = 0
 281              		@ link register save eliminated.
 282              	.L23:
 283 0000 FEE7     		b	.L23
 284              		.cfi_endproc
 285              	.LFE82:
 287              		.section	.text.MX_USART1_UART_Init,"ax",%progbits
 288              		.align	1
 289              		.syntax unified
 290              		.thumb
 291              		.thumb_func
 292              		.fpu softvfp
 294              	MX_USART1_UART_Init:
 295              	.LFB75:
 408:Src/main.c    **** 
 296              		.loc 1 408 0
 297              		.cfi_startproc
 298              		@ args = 0, pretend = 0, frame = 0
 299              		@ frame_needed = 0, uses_anonymous_args = 0
 408:Src/main.c    **** 
 300              		.loc 1 408 0
 301 0000 08B5     		push	{r3, lr}
 302              	.LCFI7:
 303              		.cfi_def_cfa_offset 8
 304              		.cfi_offset 3, -8
 305              		.cfi_offset 14, -4
 417:Src/main.c    ****   huart1.Init.BaudRate = 115200;
 306              		.loc 1 417 0
 307 0002 0A48     		ldr	r0, .L28
 308 0004 0A4B     		ldr	r3, .L28+4
 309 0006 0360     		str	r3, [r0]
 418:Src/main.c    ****   huart1.Init.WordLength = UART_WORDLENGTH_8B;
 310              		.loc 1 418 0
 311 0008 4FF4E133 		mov	r3, #115200
 312 000c 4360     		str	r3, [r0, #4]
 419:Src/main.c    ****   huart1.Init.StopBits = UART_STOPBITS_1;
 313              		.loc 1 419 0
 314 000e 0023     		movs	r3, #0
 315 0010 8360     		str	r3, [r0, #8]
 420:Src/main.c    ****   huart1.Init.Parity = UART_PARITY_NONE;
 316              		.loc 1 420 0
 317 0012 C360     		str	r3, [r0, #12]
 421:Src/main.c    ****   huart1.Init.Mode = UART_MODE_TX_RX;
 318              		.loc 1 421 0
 319 0014 0361     		str	r3, [r0, #16]
 422:Src/main.c    ****   huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 320              		.loc 1 422 0
 321 0016 0C22     		movs	r2, #12
 322 0018 4261     		str	r2, [r0, #20]
 423:Src/main.c    ****   huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 323              		.loc 1 423 0
 324 001a 8361     		str	r3, [r0, #24]
 424:Src/main.c    ****   if (HAL_UART_Init(&huart1) != HAL_OK)
 325              		.loc 1 424 0
 326 001c C361     		str	r3, [r0, #28]
 425:Src/main.c    ****   {
ARM GAS  /tmp/ccMKUzo5.s 			page 17


 327              		.loc 1 425 0
 328 001e FFF7FEFF 		bl	HAL_UART_Init
 329              	.LVL16:
 330 0022 00B9     		cbnz	r0, .L27
 331 0024 08BD     		pop	{r3, pc}
 332              	.L27:
 427:Src/main.c    ****   }
 333              		.loc 1 427 0
 334 0026 FFF7FEFF 		bl	Error_Handler
 335              	.LVL17:
 336              	.L29:
 337 002a 00BF     		.align	2
 338              	.L28:
 339 002c 00000000 		.word	huart1
 340 0030 00380140 		.word	1073821696
 341              		.cfi_endproc
 342              	.LFE75:
 344              		.section	.text.MX_ADC1_Init,"ax",%progbits
 345              		.align	1
 346              		.syntax unified
 347              		.thumb
 348              		.thumb_func
 349              		.fpu softvfp
 351              	MX_ADC1_Init:
 352              	.LFB72:
 268:Src/main.c    **** 
 353              		.loc 1 268 0
 354              		.cfi_startproc
 355              		@ args = 0, pretend = 0, frame = 16
 356              		@ frame_needed = 0, uses_anonymous_args = 0
 357 0000 00B5     		push	{lr}
 358              	.LCFI8:
 359              		.cfi_def_cfa_offset 4
 360              		.cfi_offset 14, -4
 361 0002 85B0     		sub	sp, sp, #20
 362              	.LCFI9:
 363              		.cfi_def_cfa_offset 24
 274:Src/main.c    **** 
 364              		.loc 1 274 0
 365 0004 0023     		movs	r3, #0
 366 0006 0193     		str	r3, [sp, #4]
 367 0008 0293     		str	r3, [sp, #8]
 368 000a 0393     		str	r3, [sp, #12]
 281:Src/main.c    ****   hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 369              		.loc 1 281 0
 370 000c 0F48     		ldr	r0, .L36
 371 000e 104A     		ldr	r2, .L36+4
 372 0010 0260     		str	r2, [r0]
 282:Src/main.c    ****   hadc1.Init.ContinuousConvMode = DISABLE;
 373              		.loc 1 282 0
 374 0012 8360     		str	r3, [r0, #8]
 283:Src/main.c    ****   hadc1.Init.DiscontinuousConvMode = DISABLE;
 375              		.loc 1 283 0
 376 0014 0373     		strb	r3, [r0, #12]
 284:Src/main.c    ****   hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 377              		.loc 1 284 0
 378 0016 0375     		strb	r3, [r0, #20]
ARM GAS  /tmp/ccMKUzo5.s 			page 18


 285:Src/main.c    ****   hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 379              		.loc 1 285 0
 380 0018 4FF46022 		mov	r2, #917504
 381 001c C261     		str	r2, [r0, #28]
 286:Src/main.c    ****   hadc1.Init.NbrOfConversion = 1;
 382              		.loc 1 286 0
 383 001e 4360     		str	r3, [r0, #4]
 287:Src/main.c    ****   if (HAL_ADC_Init(&hadc1) != HAL_OK)
 384              		.loc 1 287 0
 385 0020 0123     		movs	r3, #1
 386 0022 0361     		str	r3, [r0, #16]
 288:Src/main.c    ****   {
 387              		.loc 1 288 0
 388 0024 FFF7FEFF 		bl	HAL_ADC_Init
 389              	.LVL18:
 390 0028 60B9     		cbnz	r0, .L34
 294:Src/main.c    ****   sConfig.Rank = ADC_REGULAR_RANK_1;
 391              		.loc 1 294 0
 392 002a 0123     		movs	r3, #1
 393 002c 0193     		str	r3, [sp, #4]
 295:Src/main.c    ****   sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 394              		.loc 1 295 0
 395 002e 0293     		str	r3, [sp, #8]
 296:Src/main.c    ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 396              		.loc 1 296 0
 397 0030 0023     		movs	r3, #0
 398 0032 0393     		str	r3, [sp, #12]
 297:Src/main.c    ****   {
 399              		.loc 1 297 0
 400 0034 01A9     		add	r1, sp, #4
 401 0036 0548     		ldr	r0, .L36
 402 0038 FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 403              	.LVL19:
 404 003c 20B9     		cbnz	r0, .L35
 305:Src/main.c    **** 
 405              		.loc 1 305 0
 406 003e 05B0     		add	sp, sp, #20
 407              	.LCFI10:
 408              		.cfi_remember_state
 409              		.cfi_def_cfa_offset 4
 410              		@ sp needed
 411 0040 5DF804FB 		ldr	pc, [sp], #4
 412              	.L34:
 413              	.LCFI11:
 414              		.cfi_restore_state
 290:Src/main.c    ****   }
 415              		.loc 1 290 0
 416 0044 FFF7FEFF 		bl	Error_Handler
 417              	.LVL20:
 418              	.L35:
 299:Src/main.c    ****   }
 419              		.loc 1 299 0
 420 0048 FFF7FEFF 		bl	Error_Handler
 421              	.LVL21:
 422              	.L37:
 423              		.align	2
 424              	.L36:
ARM GAS  /tmp/ccMKUzo5.s 			page 19


 425 004c 00000000 		.word	hadc1
 426 0050 00240140 		.word	1073816576
 427              		.cfi_endproc
 428              	.LFE72:
 430              		.section	.text.MX_RTC_Init,"ax",%progbits
 431              		.align	1
 432              		.syntax unified
 433              		.thumb
 434              		.thumb_func
 435              		.fpu softvfp
 437              	MX_RTC_Init:
 438              	.LFB73:
 313:Src/main.c    **** 
 439              		.loc 1 313 0
 440              		.cfi_startproc
 441              		@ args = 0, pretend = 0, frame = 8
 442              		@ frame_needed = 0, uses_anonymous_args = 0
 443 0000 00B5     		push	{lr}
 444              	.LCFI12:
 445              		.cfi_def_cfa_offset 4
 446              		.cfi_offset 14, -4
 447 0002 83B0     		sub	sp, sp, #12
 448              	.LCFI13:
 449              		.cfi_def_cfa_offset 16
 319:Src/main.c    ****   RTC_DateTypeDef DateToUpdate = {0};
 450              		.loc 1 319 0
 451 0004 0023     		movs	r3, #0
 452 0006 ADF80430 		strh	r3, [sp, #4]	@ movhi
 453 000a 8DF80630 		strb	r3, [sp, #6]
 320:Src/main.c    **** 
 454              		.loc 1 320 0
 455 000e 0093     		str	r3, [sp]
 327:Src/main.c    ****   hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 456              		.loc 1 327 0
 457 0010 1948     		ldr	r0, .L46
 458 0012 1A4A     		ldr	r2, .L46+4
 459 0014 0260     		str	r2, [r0]
 328:Src/main.c    ****   hrtc.Init.OutPut = RTC_OUTPUTSOURCE_NONE;
 460              		.loc 1 328 0
 461 0016 4FF0FF32 		mov	r2, #-1
 462 001a 4260     		str	r2, [r0, #4]
 329:Src/main.c    ****   if (HAL_RTC_Init(&hrtc) != HAL_OK)
 463              		.loc 1 329 0
 464 001c 8360     		str	r3, [r0, #8]
 330:Src/main.c    ****   {
 465              		.loc 1 330 0
 466 001e FFF7FEFF 		bl	HAL_RTC_Init
 467              	.LVL22:
 468 0022 18BB     		cbnz	r0, .L43
 341:Src/main.c    ****   sTime.Minutes = 0x0;
 469              		.loc 1 341 0
 470 0024 1723     		movs	r3, #23
 471 0026 8DF80430 		strb	r3, [sp, #4]
 342:Src/main.c    ****   sTime.Seconds = 0x30;
 472              		.loc 1 342 0
 473 002a 0023     		movs	r3, #0
 474 002c 8DF80530 		strb	r3, [sp, #5]
ARM GAS  /tmp/ccMKUzo5.s 			page 20


 343:Src/main.c    **** 
 475              		.loc 1 343 0
 476 0030 3023     		movs	r3, #48
 477 0032 8DF80630 		strb	r3, [sp, #6]
 345:Src/main.c    ****   {
 478              		.loc 1 345 0
 479 0036 0122     		movs	r2, #1
 480 0038 01A9     		add	r1, sp, #4
 481 003a 0F48     		ldr	r0, .L46
 482 003c FFF7FEFF 		bl	HAL_RTC_SetTime
 483              	.LVL23:
 484 0040 B0B9     		cbnz	r0, .L44
 349:Src/main.c    ****   DateToUpdate.Month = RTC_MONTH_FEBRUARY;
 485              		.loc 1 349 0
 486 0042 0623     		movs	r3, #6
 487 0044 8DF80030 		strb	r3, [sp]
 350:Src/main.c    ****   DateToUpdate.Date = 0x29;
 488              		.loc 1 350 0
 489 0048 0223     		movs	r3, #2
 490 004a 8DF80130 		strb	r3, [sp, #1]
 351:Src/main.c    ****   DateToUpdate.Year = 0x20;
 491              		.loc 1 351 0
 492 004e 2923     		movs	r3, #41
 493 0050 8DF80230 		strb	r3, [sp, #2]
 352:Src/main.c    **** 
 494              		.loc 1 352 0
 495 0054 2023     		movs	r3, #32
 496 0056 8DF80330 		strb	r3, [sp, #3]
 354:Src/main.c    ****   {
 497              		.loc 1 354 0
 498 005a 0122     		movs	r2, #1
 499 005c 6946     		mov	r1, sp
 500 005e 0648     		ldr	r0, .L46
 501 0060 FFF7FEFF 		bl	HAL_RTC_SetDate
 502              	.LVL24:
 503 0064 30B9     		cbnz	r0, .L45
 362:Src/main.c    **** 
 504              		.loc 1 362 0
 505 0066 03B0     		add	sp, sp, #12
 506              	.LCFI14:
 507              		.cfi_remember_state
 508              		.cfi_def_cfa_offset 4
 509              		@ sp needed
 510 0068 5DF804FB 		ldr	pc, [sp], #4
 511              	.L43:
 512              	.LCFI15:
 513              		.cfi_restore_state
 332:Src/main.c    ****   }
 514              		.loc 1 332 0
 515 006c FFF7FEFF 		bl	Error_Handler
 516              	.LVL25:
 517              	.L44:
 347:Src/main.c    ****   }
 518              		.loc 1 347 0
 519 0070 FFF7FEFF 		bl	Error_Handler
 520              	.LVL26:
 521              	.L45:
ARM GAS  /tmp/ccMKUzo5.s 			page 21


 356:Src/main.c    ****   }
 522              		.loc 1 356 0
 523 0074 FFF7FEFF 		bl	Error_Handler
 524              	.LVL27:
 525              	.L47:
 526              		.align	2
 527              	.L46:
 528 0078 00000000 		.word	hrtc
 529 007c 00280040 		.word	1073752064
 530              		.cfi_endproc
 531              	.LFE73:
 533              		.section	.text.MX_SPI1_Init,"ax",%progbits
 534              		.align	1
 535              		.syntax unified
 536              		.thumb
 537              		.thumb_func
 538              		.fpu softvfp
 540              	MX_SPI1_Init:
 541              	.LFB74:
 370:Src/main.c    **** 
 542              		.loc 1 370 0
 543              		.cfi_startproc
 544              		@ args = 0, pretend = 0, frame = 0
 545              		@ frame_needed = 0, uses_anonymous_args = 0
 546 0000 08B5     		push	{r3, lr}
 547              	.LCFI16:
 548              		.cfi_def_cfa_offset 8
 549              		.cfi_offset 3, -8
 550              		.cfi_offset 14, -4
 380:Src/main.c    ****   hspi1.Init.Mode = SPI_MODE_MASTER;
 551              		.loc 1 380 0
 552 0002 0D48     		ldr	r0, .L52
 553 0004 0D4B     		ldr	r3, .L52+4
 554 0006 0360     		str	r3, [r0]
 381:Src/main.c    ****   hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 555              		.loc 1 381 0
 556 0008 4FF48273 		mov	r3, #260
 557 000c 4360     		str	r3, [r0, #4]
 382:Src/main.c    ****   hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 558              		.loc 1 382 0
 559 000e 0023     		movs	r3, #0
 560 0010 8360     		str	r3, [r0, #8]
 383:Src/main.c    ****   hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 561              		.loc 1 383 0
 562 0012 C360     		str	r3, [r0, #12]
 384:Src/main.c    ****   hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 563              		.loc 1 384 0
 564 0014 0222     		movs	r2, #2
 565 0016 0261     		str	r2, [r0, #16]
 385:Src/main.c    ****   hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 566              		.loc 1 385 0
 567 0018 4361     		str	r3, [r0, #20]
 386:Src/main.c    ****   hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 568              		.loc 1 386 0
 569 001a 4FF48022 		mov	r2, #262144
 570 001e 8261     		str	r2, [r0, #24]
 387:Src/main.c    ****   hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
ARM GAS  /tmp/ccMKUzo5.s 			page 22


 571              		.loc 1 387 0
 572 0020 C361     		str	r3, [r0, #28]
 388:Src/main.c    ****   hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 573              		.loc 1 388 0
 574 0022 0362     		str	r3, [r0, #32]
 389:Src/main.c    ****   hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 575              		.loc 1 389 0
 576 0024 4362     		str	r3, [r0, #36]
 390:Src/main.c    ****   hspi1.Init.CRCPolynomial = 10;
 577              		.loc 1 390 0
 578 0026 8362     		str	r3, [r0, #40]
 391:Src/main.c    ****   if (HAL_SPI_Init(&hspi1) != HAL_OK)
 579              		.loc 1 391 0
 580 0028 0A23     		movs	r3, #10
 581 002a C362     		str	r3, [r0, #44]
 392:Src/main.c    ****   {
 582              		.loc 1 392 0
 583 002c FFF7FEFF 		bl	HAL_SPI_Init
 584              	.LVL28:
 585 0030 00B9     		cbnz	r0, .L51
 586 0032 08BD     		pop	{r3, pc}
 587              	.L51:
 394:Src/main.c    ****   }
 588              		.loc 1 394 0
 589 0034 FFF7FEFF 		bl	Error_Handler
 590              	.LVL29:
 591              	.L53:
 592              		.align	2
 593              	.L52:
 594 0038 00000000 		.word	hspi1
 595 003c 00300140 		.word	1073819648
 596              		.cfi_endproc
 597              	.LFE74:
 599              		.section	.text.SystemClock_Config,"ax",%progbits
 600              		.align	1
 601              		.global	SystemClock_Config
 602              		.syntax unified
 603              		.thumb
 604              		.thumb_func
 605              		.fpu softvfp
 607              	SystemClock_Config:
 608              	.LFB71:
 224:Src/main.c    ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 609              		.loc 1 224 0
 610              		.cfi_startproc
 611              		@ args = 0, pretend = 0, frame = 80
 612              		@ frame_needed = 0, uses_anonymous_args = 0
 613 0000 00B5     		push	{lr}
 614              	.LCFI17:
 615              		.cfi_def_cfa_offset 4
 616              		.cfi_offset 14, -4
 617 0002 95B0     		sub	sp, sp, #84
 618              	.LCFI18:
 619              		.cfi_def_cfa_offset 88
 225:Src/main.c    ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 620              		.loc 1 225 0
 621 0004 2822     		movs	r2, #40
ARM GAS  /tmp/ccMKUzo5.s 			page 23


 622 0006 0021     		movs	r1, #0
 623 0008 0DEB0200 		add	r0, sp, r2
 624 000c FFF7FEFF 		bl	memset
 625              	.LVL30:
 226:Src/main.c    ****   RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 626              		.loc 1 226 0
 627 0010 0023     		movs	r3, #0
 628 0012 0593     		str	r3, [sp, #20]
 629 0014 0693     		str	r3, [sp, #24]
 630 0016 0793     		str	r3, [sp, #28]
 631 0018 0893     		str	r3, [sp, #32]
 632 001a 0993     		str	r3, [sp, #36]
 227:Src/main.c    **** 
 633              		.loc 1 227 0
 634 001c 0193     		str	r3, [sp, #4]
 635 001e 0293     		str	r3, [sp, #8]
 636 0020 0393     		str	r3, [sp, #12]
 637 0022 0493     		str	r3, [sp, #16]
 231:Src/main.c    ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 638              		.loc 1 231 0
 639 0024 0A23     		movs	r3, #10
 640 0026 0A93     		str	r3, [sp, #40]
 232:Src/main.c    ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 641              		.loc 1 232 0
 642 0028 0123     		movs	r3, #1
 643 002a 0E93     		str	r3, [sp, #56]
 233:Src/main.c    ****   RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 644              		.loc 1 233 0
 645 002c 1022     		movs	r2, #16
 646 002e 0F92     		str	r2, [sp, #60]
 234:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 647              		.loc 1 234 0
 648 0030 1093     		str	r3, [sp, #64]
 236:Src/main.c    ****   {
 649              		.loc 1 236 0
 650 0032 0AA8     		add	r0, sp, #40
 651 0034 FFF7FEFF 		bl	HAL_RCC_OscConfig
 652              	.LVL31:
 653 0038 C0B9     		cbnz	r0, .L59
 242:Src/main.c    ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 654              		.loc 1 242 0
 655 003a 0F23     		movs	r3, #15
 656 003c 0593     		str	r3, [sp, #20]
 244:Src/main.c    ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 657              		.loc 1 244 0
 658 003e 0021     		movs	r1, #0
 659 0040 0691     		str	r1, [sp, #24]
 245:Src/main.c    ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 660              		.loc 1 245 0
 661 0042 0791     		str	r1, [sp, #28]
 246:Src/main.c    ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 662              		.loc 1 246 0
 663 0044 0891     		str	r1, [sp, #32]
 247:Src/main.c    **** 
 664              		.loc 1 247 0
 665 0046 0991     		str	r1, [sp, #36]
 249:Src/main.c    ****   {
ARM GAS  /tmp/ccMKUzo5.s 			page 24


 666              		.loc 1 249 0
 667 0048 05A8     		add	r0, sp, #20
 668 004a FFF7FEFF 		bl	HAL_RCC_ClockConfig
 669              	.LVL32:
 670 004e 78B9     		cbnz	r0, .L60
 253:Src/main.c    ****   PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 671              		.loc 1 253 0
 672 0050 0323     		movs	r3, #3
 673 0052 0193     		str	r3, [sp, #4]
 254:Src/main.c    ****   PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 674              		.loc 1 254 0
 675 0054 4FF40073 		mov	r3, #512
 676 0058 0293     		str	r3, [sp, #8]
 255:Src/main.c    ****   if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 677              		.loc 1 255 0
 678 005a 0023     		movs	r3, #0
 679 005c 0393     		str	r3, [sp, #12]
 256:Src/main.c    ****   {
 680              		.loc 1 256 0
 681 005e 01A8     		add	r0, sp, #4
 682 0060 FFF7FEFF 		bl	HAL_RCCEx_PeriphCLKConfig
 683              	.LVL33:
 684 0064 30B9     		cbnz	r0, .L61
 260:Src/main.c    **** 
 685              		.loc 1 260 0
 686 0066 15B0     		add	sp, sp, #84
 687              	.LCFI19:
 688              		.cfi_remember_state
 689              		.cfi_def_cfa_offset 4
 690              		@ sp needed
 691 0068 5DF804FB 		ldr	pc, [sp], #4
 692              	.L59:
 693              	.LCFI20:
 694              		.cfi_restore_state
 238:Src/main.c    ****   }
 695              		.loc 1 238 0
 696 006c FFF7FEFF 		bl	Error_Handler
 697              	.LVL34:
 698              	.L60:
 251:Src/main.c    ****   }
 699              		.loc 1 251 0
 700 0070 FFF7FEFF 		bl	Error_Handler
 701              	.LVL35:
 702              	.L61:
 258:Src/main.c    ****   }
 703              		.loc 1 258 0
 704 0074 FFF7FEFF 		bl	Error_Handler
 705              	.LVL36:
 706              		.cfi_endproc
 707              	.LFE71:
 709              		.section	.text.main,"ax",%progbits
 710              		.align	1
 711              		.global	main
 712              		.syntax unified
 713              		.thumb
 714              		.thumb_func
 715              		.fpu softvfp
ARM GAS  /tmp/ccMKUzo5.s 			page 25


 717              	main:
 718              	.LFB70:
 127:Src/main.c    ****   /* USER CODE BEGIN 1 */
 719              		.loc 1 127 0
 720              		.cfi_startproc
 721              		@ args = 0, pretend = 0, frame = 8
 722              		@ frame_needed = 0, uses_anonymous_args = 0
 723 0000 00B5     		push	{lr}
 724              	.LCFI21:
 725              		.cfi_def_cfa_offset 4
 726              		.cfi_offset 14, -4
 727 0002 83B0     		sub	sp, sp, #12
 728              	.LCFI22:
 729              		.cfi_def_cfa_offset 16
 137:Src/main.c    **** 
 730              		.loc 1 137 0
 731 0004 FFF7FEFF 		bl	HAL_Init
 732              	.LVL37:
 144:Src/main.c    **** 
 733              		.loc 1 144 0
 734 0008 FFF7FEFF 		bl	SystemClock_Config
 735              	.LVL38:
 151:Src/main.c    ****   MX_USART1_UART_Init();
 736              		.loc 1 151 0
 737 000c FFF7FEFF 		bl	MX_GPIO_Init
 738              	.LVL39:
 152:Src/main.c    ****   MX_ADC1_Init();
 739              		.loc 1 152 0
 740 0010 FFF7FEFF 		bl	MX_USART1_UART_Init
 741              	.LVL40:
 153:Src/main.c    ****   MX_RTC_Init();
 742              		.loc 1 153 0
 743 0014 FFF7FEFF 		bl	MX_ADC1_Init
 744              	.LVL41:
 154:Src/main.c    ****   MX_SPI1_Init();
 745              		.loc 1 154 0
 746 0018 FFF7FEFF 		bl	MX_RTC_Init
 747              	.LVL42:
 155:Src/main.c    ****   MX_FATFS_Init();
 748              		.loc 1 155 0
 749 001c FFF7FEFF 		bl	MX_SPI1_Init
 750              	.LVL43:
 156:Src/main.c    ****   /* USER CODE BEGIN 2 */
 751              		.loc 1 156 0
 752 0020 FFF7FEFF 		bl	MX_FATFS_Init
 753              	.LVL44:
 158:Src/main.c    ****   /* USER CODE END 2 */
 754              		.loc 1 158 0
 755 0024 6846     		mov	r0, sp
 756 0026 FFF7FEFF 		bl	SD_Init
 757              	.LVL45:
 161:Src/main.c    **** 
 758              		.loc 1 161 0
 759 002a FFF7FEFF 		bl	osKernelInitialize
 760              	.LVL46:
 177:Src/main.c    **** 
 761              		.loc 1 177 0
ARM GAS  /tmp/ccMKUzo5.s 			page 26


 762 002e 164A     		ldr	r2, .L65
 763 0030 0121     		movs	r1, #1
 764 0032 8020     		movs	r0, #128
 765 0034 FFF7FEFF 		bl	osMessageQueueNew
 766              	.LVL47:
 767 0038 144B     		ldr	r3, .L65+4
 768 003a 1860     		str	r0, [r3]
 180:Src/main.c    **** 
 769              		.loc 1 180 0
 770 003c 144A     		ldr	r2, .L65+8
 771 003e 0121     		movs	r1, #1
 772 0040 8020     		movs	r0, #128
 773 0042 FFF7FEFF 		bl	osMessageQueueNew
 774              	.LVL48:
 775 0046 134B     		ldr	r3, .L65+12
 776 0048 1860     		str	r0, [r3]
 188:Src/main.c    **** 
 777              		.loc 1 188 0
 778 004a 134A     		ldr	r2, .L65+16
 779 004c 0021     		movs	r1, #0
 780 004e 1348     		ldr	r0, .L65+20
 781 0050 FFF7FEFF 		bl	osThreadNew
 782              	.LVL49:
 783 0054 124B     		ldr	r3, .L65+24
 784 0056 1860     		str	r0, [r3]
 191:Src/main.c    **** 
 785              		.loc 1 191 0
 786 0058 124A     		ldr	r2, .L65+28
 787 005a 0021     		movs	r1, #0
 788 005c 1248     		ldr	r0, .L65+32
 789 005e FFF7FEFF 		bl	osThreadNew
 790              	.LVL50:
 791 0062 124B     		ldr	r3, .L65+36
 792 0064 1860     		str	r0, [r3]
 194:Src/main.c    **** 
 793              		.loc 1 194 0
 794 0066 124A     		ldr	r2, .L65+40
 795 0068 0021     		movs	r1, #0
 796 006a 1248     		ldr	r0, .L65+44
 797 006c FFF7FEFF 		bl	osThreadNew
 798              	.LVL51:
 799 0070 114B     		ldr	r3, .L65+48
 800 0072 1860     		str	r0, [r3]
 197:Src/main.c    **** 
 801              		.loc 1 197 0
 802 0074 114A     		ldr	r2, .L65+52
 803 0076 0021     		movs	r1, #0
 804 0078 1148     		ldr	r0, .L65+56
 805 007a FFF7FEFF 		bl	osThreadNew
 806              	.LVL52:
 807 007e 114B     		ldr	r3, .L65+60
 808 0080 1860     		str	r0, [r3]
 204:Src/main.c    ****  
 809              		.loc 1 204 0
 810 0082 FFF7FEFF 		bl	osKernelStart
 811              	.LVL53:
 812              	.L63:
ARM GAS  /tmp/ccMKUzo5.s 			page 27


 813 0086 FEE7     		b	.L63
 814              	.L66:
 815              		.align	2
 816              	.L65:
 817 0088 00000000 		.word	.LANCHOR0
 818 008c 00000000 		.word	Queue_UART_RXHandle
 819 0090 00000000 		.word	.LANCHOR1
 820 0094 00000000 		.word	Queue_UART_TXHandle
 821 0098 00000000 		.word	.LANCHOR2
 822 009c 00000000 		.word	Tsk_ADC_LightSensor
 823 00a0 00000000 		.word	ADC_LightSensorHandle
 824 00a4 00000000 		.word	.LANCHOR3
 825 00a8 00000000 		.word	Tsk_UART_TX
 826 00ac 00000000 		.word	UART_TXHandle
 827 00b0 00000000 		.word	.LANCHOR4
 828 00b4 00000000 		.word	Tsk_LED
 829 00b8 00000000 		.word	LEDHandle
 830 00bc 00000000 		.word	.LANCHOR5
 831 00c0 00000000 		.word	Tsk_UART_RX
 832 00c4 00000000 		.word	UART_RXHandle
 833              		.cfi_endproc
 834              	.LFE70:
 836              		.global	Queue_UART_TX_attributes
 837              		.comm	Queue_UART_TXHandle,4,4
 838              		.global	Queue_UART_RX_attributes
 839              		.comm	Queue_UART_RXHandle,4,4
 840              		.global	UART_RX_attributes
 841              		.comm	UART_RXHandle,4,4
 842              		.global	LED_attributes
 843              		.comm	LEDHandle,4,4
 844              		.global	UART_TX_attributes
 845              		.comm	UART_TXHandle,4,4
 846              		.global	ADC_LightSensor_attributes
 847              		.comm	ADC_LightSensorHandle,4,4
 848              		.comm	huart1,64,4
 849              		.comm	hspi1,88,4
 850              		.comm	hrtc,20,4
 851              		.comm	hadc1,48,4
 852              		.section	.rodata.ADC_LightSensor_attributes,"a",%progbits
 853              		.align	2
 854              		.set	.LANCHOR2,. + 0
 857              	ADC_LightSensor_attributes:
 858 0000 34000000 		.word	.LC5
 859 0004 00000000 		.space	16
 859      00000000 
 859      00000000 
 859      00000000 
 860 0014 00020000 		.word	512
 861 0018 18000000 		.word	24
 862 001c 00000000 		.space	8
 862      00000000 
 863              		.section	.rodata.LED_attributes,"a",%progbits
 864              		.align	2
 865              		.set	.LANCHOR4,. + 0
 868              	LED_attributes:
 869 0000 28000000 		.word	.LC3
 870 0004 00000000 		.space	16
ARM GAS  /tmp/ccMKUzo5.s 			page 28


 870      00000000 
 870      00000000 
 870      00000000 
 871 0014 80000000 		.word	128
 872 0018 08000000 		.word	8
 873 001c 00000000 		.space	8
 873      00000000 
 874              		.section	.rodata.Queue_UART_RX_attributes,"a",%progbits
 875              		.align	2
 876              		.set	.LANCHOR0,. + 0
 879              	Queue_UART_RX_attributes:
 880 0000 10000000 		.word	.LC1
 881 0004 00000000 		.space	20
 881      00000000 
 881      00000000 
 881      00000000 
 881      00000000 
 882              		.section	.rodata.Queue_UART_TX_attributes,"a",%progbits
 883              		.align	2
 884              		.set	.LANCHOR1,. + 0
 887              	Queue_UART_TX_attributes:
 888 0000 00000000 		.word	.LC0
 889 0004 00000000 		.space	20
 889      00000000 
 889      00000000 
 889      00000000 
 889      00000000 
 890              		.section	.rodata.UART_RX_attributes,"a",%progbits
 891              		.align	2
 892              		.set	.LANCHOR5,. + 0
 895              	UART_RX_attributes:
 896 0000 20000000 		.word	.LC2
 897 0004 00000000 		.space	16
 897      00000000 
 897      00000000 
 897      00000000 
 898 0014 80000000 		.word	128
 899 0018 08000000 		.word	8
 900 001c 00000000 		.space	8
 900      00000000 
 901              		.section	.rodata.UART_TX_attributes,"a",%progbits
 902              		.align	2
 903              		.set	.LANCHOR3,. + 0
 906              	UART_TX_attributes:
 907 0000 2C000000 		.word	.LC4
 908 0004 00000000 		.space	16
 908      00000000 
 908      00000000 
 908      00000000 
 909 0014 80000000 		.word	128
 910 0018 08000000 		.word	8
 911 001c 00000000 		.space	8
 911      00000000 
 912              		.section	.rodata.str1.4,"aMS",%progbits,1
 913              		.align	2
 914              	.LC0:
 915 0000 51756575 		.ascii	"Queue_UART_TX\000"
ARM GAS  /tmp/ccMKUzo5.s 			page 29


 915      655F5541 
 915      52545F54 
 915      5800
 916 000e 0000     		.space	2
 917              	.LC1:
 918 0010 51756575 		.ascii	"Queue_UART_RX\000"
 918      655F5541 
 918      52545F52 
 918      5800
 919 001e 0000     		.space	2
 920              	.LC2:
 921 0020 55415254 		.ascii	"UART_RX\000"
 921      5F525800 
 922              	.LC3:
 923 0028 4C454400 		.ascii	"LED\000"
 924              	.LC4:
 925 002c 55415254 		.ascii	"UART_TX\000"
 925      5F545800 
 926              	.LC5:
 927 0034 4144435F 		.ascii	"ADC_LightSensor\000"
 927      4C696768 
 927      7453656E 
 927      736F7200 
 928              		.text
 929              	.Letext0:
 930              		.file 2 "/usr/include/newlib/machine/_default_types.h"
 931              		.file 3 "/usr/include/newlib/sys/_stdint.h"
 932              		.file 4 "Drivers/CMSIS/Include/core_cm3.h"
 933              		.file 5 "Drivers/CMSIS/Device/ST/STM32F1xx/Include/system_stm32f1xx.h"
 934              		.file 6 "Drivers/CMSIS/Device/ST/STM32F1xx/Include/stm32f103xb.h"
 935              		.file 7 "Drivers/CMSIS/Device/ST/STM32F1xx/Include/stm32f1xx.h"
 936              		.file 8 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_def.h"
 937              		.file 9 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_rcc.h"
 938              		.file 10 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_rcc_ex.h"
 939              		.file 11 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_gpio.h"
 940              		.file 12 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_dma.h"
 941              		.file 13 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_adc.h"
 942              		.file 14 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_rtc.h"
 943              		.file 15 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_spi.h"
 944              		.file 16 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_tim.h"
 945              		.file 17 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_uart.h"
 946              		.file 18 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal.h"
 947              		.file 19 "Middlewares/Third_Party/FreeRTOS/Source/CMSIS_RTOS_V2/cmsis_os2.h"
 948              		.file 20 "Middlewares/Third_Party/FatFs/src/integer.h"
 949              		.file 21 "Middlewares/Third_Party/FatFs/src/ff.h"
 950              		.file 22 "Middlewares/Third_Party/FatFs/src/diskio.h"
 951              		.file 23 "Middlewares/Third_Party/FatFs/src/ff_gen_drv.h"
 952              		.file 24 "Inc/user_diskio.h"
 953              		.file 25 "Inc/fatfs.h"
 954              		.file 26 "/usr/include/newlib/sys/lock.h"
 955              		.file 27 "/usr/include/newlib/sys/_types.h"
 956              		.file 28 "/usr/lib/gcc/arm-none-eabi/6.3.1/include/stddef.h"
 957              		.file 29 "/usr/include/newlib/sys/reent.h"
 958              		.file 30 "Middlewares/Third_Party/ulibSD/integer_ulibsd.h"
 959              		.file 31 "Middlewares/Third_Party/ulibSD/sd_io.h"
 960              		.file 32 "Inc/UART.h"
 961              		.file 33 "Inc/ADC.h"
ARM GAS  /tmp/ccMKUzo5.s 			page 30


ARM GAS  /tmp/ccMKUzo5.s 			page 31


DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
     /tmp/ccMKUzo5.s:16     .text.Tsk_LED:0000000000000000 $t
     /tmp/ccMKUzo5.s:23     .text.Tsk_LED:0000000000000000 Tsk_LED
     /tmp/ccMKUzo5.s:38     .text.MX_GPIO_Init:0000000000000000 $t
     /tmp/ccMKUzo5.s:44     .text.MX_GPIO_Init:0000000000000000 MX_GPIO_Init
     /tmp/ccMKUzo5.s:129    .text.MX_GPIO_Init:0000000000000070 $d
     /tmp/ccMKUzo5.s:135    .text.Tsk_ADC_LightSensor:0000000000000000 $t
     /tmp/ccMKUzo5.s:142    .text.Tsk_ADC_LightSensor:0000000000000000 Tsk_ADC_LightSensor
     /tmp/ccMKUzo5.s:165    .text.Tsk_UART_TX:0000000000000000 $t
     /tmp/ccMKUzo5.s:172    .text.Tsk_UART_TX:0000000000000000 Tsk_UART_TX
     /tmp/ccMKUzo5.s:195    .text.Tsk_UART_RX:0000000000000000 $t
     /tmp/ccMKUzo5.s:202    .text.Tsk_UART_RX:0000000000000000 Tsk_UART_RX
     /tmp/ccMKUzo5.s:225    .text.HAL_TIM_PeriodElapsedCallback:0000000000000000 $t
     /tmp/ccMKUzo5.s:232    .text.HAL_TIM_PeriodElapsedCallback:0000000000000000 HAL_TIM_PeriodElapsedCallback
     /tmp/ccMKUzo5.s:262    .text.HAL_TIM_PeriodElapsedCallback:0000000000000014 $d
     /tmp/ccMKUzo5.s:267    .text.Error_Handler:0000000000000000 $t
     /tmp/ccMKUzo5.s:274    .text.Error_Handler:0000000000000000 Error_Handler
     /tmp/ccMKUzo5.s:288    .text.MX_USART1_UART_Init:0000000000000000 $t
     /tmp/ccMKUzo5.s:294    .text.MX_USART1_UART_Init:0000000000000000 MX_USART1_UART_Init
     /tmp/ccMKUzo5.s:339    .text.MX_USART1_UART_Init:000000000000002c $d
                            *COM*:0000000000000040 huart1
     /tmp/ccMKUzo5.s:345    .text.MX_ADC1_Init:0000000000000000 $t
     /tmp/ccMKUzo5.s:351    .text.MX_ADC1_Init:0000000000000000 MX_ADC1_Init
     /tmp/ccMKUzo5.s:425    .text.MX_ADC1_Init:000000000000004c $d
                            *COM*:0000000000000030 hadc1
     /tmp/ccMKUzo5.s:431    .text.MX_RTC_Init:0000000000000000 $t
     /tmp/ccMKUzo5.s:437    .text.MX_RTC_Init:0000000000000000 MX_RTC_Init
     /tmp/ccMKUzo5.s:528    .text.MX_RTC_Init:0000000000000078 $d
                            *COM*:0000000000000014 hrtc
     /tmp/ccMKUzo5.s:534    .text.MX_SPI1_Init:0000000000000000 $t
     /tmp/ccMKUzo5.s:540    .text.MX_SPI1_Init:0000000000000000 MX_SPI1_Init
     /tmp/ccMKUzo5.s:594    .text.MX_SPI1_Init:0000000000000038 $d
                            *COM*:0000000000000058 hspi1
     /tmp/ccMKUzo5.s:600    .text.SystemClock_Config:0000000000000000 $t
     /tmp/ccMKUzo5.s:607    .text.SystemClock_Config:0000000000000000 SystemClock_Config
     /tmp/ccMKUzo5.s:710    .text.main:0000000000000000 $t
     /tmp/ccMKUzo5.s:717    .text.main:0000000000000000 main
     /tmp/ccMKUzo5.s:817    .text.main:0000000000000088 $d
                            *COM*:0000000000000004 Queue_UART_RXHandle
                            *COM*:0000000000000004 Queue_UART_TXHandle
                            *COM*:0000000000000004 ADC_LightSensorHandle
                            *COM*:0000000000000004 UART_TXHandle
                            *COM*:0000000000000004 LEDHandle
                            *COM*:0000000000000004 UART_RXHandle
     /tmp/ccMKUzo5.s:887    .rodata.Queue_UART_TX_attributes:0000000000000000 Queue_UART_TX_attributes
     /tmp/ccMKUzo5.s:879    .rodata.Queue_UART_RX_attributes:0000000000000000 Queue_UART_RX_attributes
     /tmp/ccMKUzo5.s:895    .rodata.UART_RX_attributes:0000000000000000 UART_RX_attributes
     /tmp/ccMKUzo5.s:868    .rodata.LED_attributes:0000000000000000 LED_attributes
     /tmp/ccMKUzo5.s:906    .rodata.UART_TX_attributes:0000000000000000 UART_TX_attributes
     /tmp/ccMKUzo5.s:857    .rodata.ADC_LightSensor_attributes:0000000000000000 ADC_LightSensor_attributes
     /tmp/ccMKUzo5.s:853    .rodata.ADC_LightSensor_attributes:0000000000000000 $d
     /tmp/ccMKUzo5.s:864    .rodata.LED_attributes:0000000000000000 $d
     /tmp/ccMKUzo5.s:875    .rodata.Queue_UART_RX_attributes:0000000000000000 $d
     /tmp/ccMKUzo5.s:883    .rodata.Queue_UART_TX_attributes:0000000000000000 $d
     /tmp/ccMKUzo5.s:891    .rodata.UART_RX_attributes:0000000000000000 $d
     /tmp/ccMKUzo5.s:902    .rodata.UART_TX_attributes:0000000000000000 $d
ARM GAS  /tmp/ccMKUzo5.s 			page 32


     /tmp/ccMKUzo5.s:913    .rodata.str1.4:0000000000000000 $d
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
HAL_GPIO_WritePin
HAL_GPIO_Init
Thread_ADC_LightSensor
Thread_UART_TX
Thread_UART_RX
HAL_IncTick
HAL_UART_Init
HAL_ADC_Init
HAL_ADC_ConfigChannel
HAL_RTC_Init
HAL_RTC_SetTime
HAL_RTC_SetDate
HAL_SPI_Init
memset
HAL_RCC_OscConfig
HAL_RCC_ClockConfig
HAL_RCCEx_PeriphCLKConfig
HAL_Init
MX_FATFS_Init
SD_Init
osKernelInitialize
osMessageQueueNew
osThreadNew
osKernelStart
