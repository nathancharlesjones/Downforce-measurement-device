ARM GAS  /tmp/cc5Olqt4.s 			page 1


   1              		.cpu cortex-m3
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 1
   9              		.eabi_attribute 34, 1
  10              		.eabi_attribute 18, 4
  11              		.file	"main.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.text.Tsk_LED,"ax",%progbits
  16              		.align	1
  17              		.global	Tsk_LED
  18              		.syntax unified
  19              		.thumb
  20              		.thumb_func
  21              		.fpu softvfp
  23              	Tsk_LED:
  24              	.LFB79:
  25              		.file 1 "Src/main.c"
   1:Src/main.c    **** /* USER CODE BEGIN Header */
   2:Src/main.c    **** /**
   3:Src/main.c    ****   ******************************************************************************
   4:Src/main.c    ****   * @file           : main.c
   5:Src/main.c    ****   * @brief          : Main program body
   6:Src/main.c    ****   ******************************************************************************
   7:Src/main.c    ****   * @attention
   8:Src/main.c    ****   *
   9:Src/main.c    ****   * <h2><center>&copy; Copyright (c) 2020 STMicroelectronics.
  10:Src/main.c    ****   * All rights reserved.</center></h2>
  11:Src/main.c    ****   *
  12:Src/main.c    ****   * This software component is licensed by ST under Ultimate Liberty license
  13:Src/main.c    ****   * SLA0044, the "License"; You may not use this file except in compliance with
  14:Src/main.c    ****   * the License. You may obtain a copy of the License at:
  15:Src/main.c    ****   *                             www.st.com/SLA0044
  16:Src/main.c    ****   *
  17:Src/main.c    ****   ******************************************************************************
  18:Src/main.c    ****   */
  19:Src/main.c    **** /* USER CODE END Header */
  20:Src/main.c    **** 
  21:Src/main.c    **** /* Includes ------------------------------------------------------------------*/
  22:Src/main.c    **** #include "main.h"
  23:Src/main.c    **** #include "cmsis_os.h"
  24:Src/main.c    **** #include "fatfs.h"
  25:Src/main.c    **** 
  26:Src/main.c    **** /* Private includes ----------------------------------------------------------*/
  27:Src/main.c    **** /* USER CODE BEGIN Includes */
  28:Src/main.c    **** #include <stdio.h>
  29:Src/main.c    **** #include <string.h>
  30:Src/main.c    **** #include "sd_io.h"
  31:Src/main.c    **** #include "ADC.h"
  32:Src/main.c    **** #include "UART.h"
  33:Src/main.c    **** /* USER CODE END Includes */
ARM GAS  /tmp/cc5Olqt4.s 			page 2


  34:Src/main.c    **** 
  35:Src/main.c    **** /* Private typedef -----------------------------------------------------------*/
  36:Src/main.c    **** /* USER CODE BEGIN PTD */
  37:Src/main.c    **** 
  38:Src/main.c    **** /* USER CODE END PTD */
  39:Src/main.c    **** 
  40:Src/main.c    **** /* Private define ------------------------------------------------------------*/
  41:Src/main.c    **** /* USER CODE BEGIN PD */
  42:Src/main.c    **** 
  43:Src/main.c    **** /* USER CODE END PD */
  44:Src/main.c    **** 
  45:Src/main.c    **** /* Private macro -------------------------------------------------------------*/
  46:Src/main.c    **** /* USER CODE BEGIN PM */
  47:Src/main.c    **** 
  48:Src/main.c    **** /* USER CODE END PM */
  49:Src/main.c    **** 
  50:Src/main.c    **** /* Private variables ---------------------------------------------------------*/
  51:Src/main.c    **** ADC_HandleTypeDef hadc1;
  52:Src/main.c    **** 
  53:Src/main.c    **** RTC_HandleTypeDef hrtc;
  54:Src/main.c    **** 
  55:Src/main.c    **** SPI_HandleTypeDef hspi1;
  56:Src/main.c    **** 
  57:Src/main.c    **** UART_HandleTypeDef huart1;
  58:Src/main.c    **** 
  59:Src/main.c    **** /* Definitions for ADC_LightSensor */
  60:Src/main.c    **** osThreadId_t ADC_LightSensorHandle;
  61:Src/main.c    **** const osThreadAttr_t ADC_LightSensor_attributes = {
  62:Src/main.c    ****   .name = "ADC_LightSensor",
  63:Src/main.c    ****   .priority = (osPriority_t) osPriorityNormal,
  64:Src/main.c    ****   .stack_size = 512
  65:Src/main.c    **** };
  66:Src/main.c    **** /* Definitions for UART_TX */
  67:Src/main.c    **** osThreadId_t UART_TXHandle;
  68:Src/main.c    **** const osThreadAttr_t UART_TX_attributes = {
  69:Src/main.c    ****   .name = "UART_TX",
  70:Src/main.c    ****   .priority = (osPriority_t) osPriorityLow,
  71:Src/main.c    ****   .stack_size = 128
  72:Src/main.c    **** };
  73:Src/main.c    **** /* Definitions for LED */
  74:Src/main.c    **** osThreadId_t LEDHandle;
  75:Src/main.c    **** const osThreadAttr_t LED_attributes = {
  76:Src/main.c    ****   .name = "LED",
  77:Src/main.c    ****   .priority = (osPriority_t) osPriorityLow,
  78:Src/main.c    ****   .stack_size = 128
  79:Src/main.c    **** };
  80:Src/main.c    **** /* Definitions for UART_RX */
  81:Src/main.c    **** osThreadId_t UART_RXHandle;
  82:Src/main.c    **** const osThreadAttr_t UART_RX_attributes = {
  83:Src/main.c    ****   .name = "UART_RX",
  84:Src/main.c    ****   .priority = (osPriority_t) osPriorityLow,
  85:Src/main.c    ****   .stack_size = 128
  86:Src/main.c    **** };
  87:Src/main.c    **** /* Definitions for Queue_UART_RX */
  88:Src/main.c    **** osMessageQueueId_t Queue_UART_RXHandle;
  89:Src/main.c    **** const osMessageQueueAttr_t Queue_UART_RX_attributes = {
  90:Src/main.c    ****   .name = "Queue_UART_RX"
ARM GAS  /tmp/cc5Olqt4.s 			page 3


  91:Src/main.c    **** };
  92:Src/main.c    **** /* Definitions for Queue_UART_TX */
  93:Src/main.c    **** osMessageQueueId_t Queue_UART_TXHandle;
  94:Src/main.c    **** const osMessageQueueAttr_t Queue_UART_TX_attributes = {
  95:Src/main.c    ****   .name = "Queue_UART_TX"
  96:Src/main.c    **** };
  97:Src/main.c    **** /* USER CODE BEGIN PV */
  98:Src/main.c    **** 
  99:Src/main.c    **** /* USER CODE END PV */
 100:Src/main.c    **** 
 101:Src/main.c    **** /* Private function prototypes -----------------------------------------------*/
 102:Src/main.c    **** void SystemClock_Config(void);
 103:Src/main.c    **** static void MX_GPIO_Init(void);
 104:Src/main.c    **** static void MX_USART1_UART_Init(void);
 105:Src/main.c    **** static void MX_ADC1_Init(void);
 106:Src/main.c    **** static void MX_RTC_Init(void);
 107:Src/main.c    **** static void MX_SPI1_Init(void);
 108:Src/main.c    **** void Tsk_ADC_LightSensor(void *argument);
 109:Src/main.c    **** void Tsk_UART_TX(void *argument);
 110:Src/main.c    **** void Tsk_LED(void *argument);
 111:Src/main.c    **** void Tsk_UART_RX(void *argument);
 112:Src/main.c    **** 
 113:Src/main.c    **** /* USER CODE BEGIN PFP */
 114:Src/main.c    **** 
 115:Src/main.c    **** /* USER CODE END PFP */
 116:Src/main.c    **** 
 117:Src/main.c    **** /* Private user code ---------------------------------------------------------*/
 118:Src/main.c    **** /* USER CODE BEGIN 0 */
 119:Src/main.c    **** 
 120:Src/main.c    **** /* USER CODE END 0 */
 121:Src/main.c    **** 
 122:Src/main.c    **** /**
 123:Src/main.c    ****   * @brief  The application entry point.
 124:Src/main.c    ****   * @retval int
 125:Src/main.c    ****   */
 126:Src/main.c    **** int main(void)
 127:Src/main.c    **** {
 128:Src/main.c    ****   /* USER CODE BEGIN 1 */
 129:Src/main.c    **** 
 130:Src/main.c    ****   /* USER CODE END 1 */
 131:Src/main.c    ****   
 132:Src/main.c    **** 
 133:Src/main.c    ****   /* MCU Configuration--------------------------------------------------------*/
 134:Src/main.c    **** 
 135:Src/main.c    ****   /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
 136:Src/main.c    ****   HAL_Init();
 137:Src/main.c    **** 
 138:Src/main.c    ****   /* USER CODE BEGIN Init */
 139:Src/main.c    ****   
 140:Src/main.c    ****   /* USER CODE END Init */
 141:Src/main.c    **** 
 142:Src/main.c    ****   /* Configure the system clock */
 143:Src/main.c    ****   SystemClock_Config();
 144:Src/main.c    **** 
 145:Src/main.c    ****   /* USER CODE BEGIN SysInit */
 146:Src/main.c    ****   
 147:Src/main.c    ****   /* USER CODE END SysInit */
ARM GAS  /tmp/cc5Olqt4.s 			page 4


 148:Src/main.c    **** 
 149:Src/main.c    ****   /* Initialize all configured peripherals */
 150:Src/main.c    ****   MX_GPIO_Init();
 151:Src/main.c    ****   MX_USART1_UART_Init();
 152:Src/main.c    ****   MX_ADC1_Init();
 153:Src/main.c    ****   MX_RTC_Init();
 154:Src/main.c    ****   MX_SPI1_Init();
 155:Src/main.c    ****   MX_FATFS_Init();
 156:Src/main.c    ****   /* USER CODE BEGIN 2 */
 157:Src/main.c    ****   
 158:Src/main.c    ****   /* USER CODE END 2 */
 159:Src/main.c    ****   /* Init scheduler */
 160:Src/main.c    ****   osKernelInitialize();
 161:Src/main.c    **** 
 162:Src/main.c    ****   /* USER CODE BEGIN RTOS_MUTEX */
 163:Src/main.c    ****   /* add mutexes, ... */
 164:Src/main.c    ****   /* USER CODE END RTOS_MUTEX */
 165:Src/main.c    **** 
 166:Src/main.c    ****   /* USER CODE BEGIN RTOS_SEMAPHORES */
 167:Src/main.c    ****   /* add semaphores, ... */
 168:Src/main.c    ****   /* USER CODE END RTOS_SEMAPHORES */
 169:Src/main.c    **** 
 170:Src/main.c    ****   /* USER CODE BEGIN RTOS_TIMERS */
 171:Src/main.c    ****   /* start timers, add new ones, ... */
 172:Src/main.c    ****   /* USER CODE END RTOS_TIMERS */
 173:Src/main.c    **** 
 174:Src/main.c    ****   /* Create the queue(s) */
 175:Src/main.c    ****   /* creation of Queue_UART_RX */
 176:Src/main.c    ****   Queue_UART_RXHandle = osMessageQueueNew (128, sizeof(char), &Queue_UART_RX_attributes);
 177:Src/main.c    **** 
 178:Src/main.c    ****   /* creation of Queue_UART_TX */
 179:Src/main.c    ****   Queue_UART_TXHandle = osMessageQueueNew (128, sizeof(char), &Queue_UART_TX_attributes);
 180:Src/main.c    **** 
 181:Src/main.c    ****   /* USER CODE BEGIN RTOS_QUEUES */
 182:Src/main.c    ****   /* add queues, ... */
 183:Src/main.c    ****   /* USER CODE END RTOS_QUEUES */
 184:Src/main.c    **** 
 185:Src/main.c    ****   /* Create the thread(s) */
 186:Src/main.c    ****   /* creation of ADC_LightSensor */
 187:Src/main.c    ****   ADC_LightSensorHandle = osThreadNew(Tsk_ADC_LightSensor, NULL, &ADC_LightSensor_attributes);
 188:Src/main.c    **** 
 189:Src/main.c    ****   /* creation of UART_TX */
 190:Src/main.c    ****   UART_TXHandle = osThreadNew(Tsk_UART_TX, NULL, &UART_TX_attributes);
 191:Src/main.c    **** 
 192:Src/main.c    ****   /* creation of LED */
 193:Src/main.c    ****   LEDHandle = osThreadNew(Tsk_LED, NULL, &LED_attributes);
 194:Src/main.c    **** 
 195:Src/main.c    ****   /* creation of UART_RX */
 196:Src/main.c    ****   UART_RXHandle = osThreadNew(Tsk_UART_RX, NULL, &UART_RX_attributes);
 197:Src/main.c    **** 
 198:Src/main.c    ****   /* USER CODE BEGIN RTOS_THREADS */
 199:Src/main.c    ****   /* add threads, ... */
 200:Src/main.c    ****   /* USER CODE END RTOS_THREADS */
 201:Src/main.c    **** 
 202:Src/main.c    ****   /* Start scheduler */
 203:Src/main.c    ****   osKernelStart();
 204:Src/main.c    ****  
ARM GAS  /tmp/cc5Olqt4.s 			page 5


 205:Src/main.c    ****   /* We should never get here as control is now taken by the scheduler */
 206:Src/main.c    **** 
 207:Src/main.c    ****   /* Infinite loop */
 208:Src/main.c    ****   /* USER CODE BEGIN WHILE */
 209:Src/main.c    ****   while (1)
 210:Src/main.c    ****   {
 211:Src/main.c    ****     /* USER CODE END WHILE */
 212:Src/main.c    **** 
 213:Src/main.c    ****     /* USER CODE BEGIN 3 */
 214:Src/main.c    ****   }
 215:Src/main.c    ****   /* USER CODE END 3 */
 216:Src/main.c    **** }
 217:Src/main.c    **** 
 218:Src/main.c    **** /**
 219:Src/main.c    ****   * @brief System Clock Configuration
 220:Src/main.c    ****   * @retval None
 221:Src/main.c    ****   */
 222:Src/main.c    **** void SystemClock_Config(void)
 223:Src/main.c    **** {
 224:Src/main.c    ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 225:Src/main.c    ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 226:Src/main.c    ****   RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 227:Src/main.c    **** 
 228:Src/main.c    ****   /** Initializes the CPU, AHB and APB busses clocks 
 229:Src/main.c    ****   */
 230:Src/main.c    ****   RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 231:Src/main.c    ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 232:Src/main.c    ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 233:Src/main.c    ****   RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 234:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 235:Src/main.c    ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 236:Src/main.c    ****   {
 237:Src/main.c    ****     Error_Handler();
 238:Src/main.c    ****   }
 239:Src/main.c    ****   /** Initializes the CPU, AHB and APB busses clocks 
 240:Src/main.c    ****   */
 241:Src/main.c    ****   RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 242:Src/main.c    ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 243:Src/main.c    ****   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 244:Src/main.c    ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 245:Src/main.c    ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 246:Src/main.c    ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 247:Src/main.c    **** 
 248:Src/main.c    ****   if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 249:Src/main.c    ****   {
 250:Src/main.c    ****     Error_Handler();
 251:Src/main.c    ****   }
 252:Src/main.c    ****   PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_ADC;
 253:Src/main.c    ****   PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 254:Src/main.c    ****   PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 255:Src/main.c    ****   if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 256:Src/main.c    ****   {
 257:Src/main.c    ****     Error_Handler();
 258:Src/main.c    ****   }
 259:Src/main.c    **** }
 260:Src/main.c    **** 
 261:Src/main.c    **** /**
ARM GAS  /tmp/cc5Olqt4.s 			page 6


 262:Src/main.c    ****   * @brief ADC1 Initialization Function
 263:Src/main.c    ****   * @param None
 264:Src/main.c    ****   * @retval None
 265:Src/main.c    ****   */
 266:Src/main.c    **** static void MX_ADC1_Init(void)
 267:Src/main.c    **** {
 268:Src/main.c    **** 
 269:Src/main.c    ****   /* USER CODE BEGIN ADC1_Init 0 */
 270:Src/main.c    **** 
 271:Src/main.c    ****   /* USER CODE END ADC1_Init 0 */
 272:Src/main.c    **** 
 273:Src/main.c    ****   ADC_ChannelConfTypeDef sConfig = {0};
 274:Src/main.c    **** 
 275:Src/main.c    ****   /* USER CODE BEGIN ADC1_Init 1 */
 276:Src/main.c    **** 
 277:Src/main.c    ****   /* USER CODE END ADC1_Init 1 */
 278:Src/main.c    ****   /** Common config 
 279:Src/main.c    ****   */
 280:Src/main.c    ****   hadc1.Instance = ADC1;
 281:Src/main.c    ****   hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 282:Src/main.c    ****   hadc1.Init.ContinuousConvMode = DISABLE;
 283:Src/main.c    ****   hadc1.Init.DiscontinuousConvMode = DISABLE;
 284:Src/main.c    ****   hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 285:Src/main.c    ****   hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 286:Src/main.c    ****   hadc1.Init.NbrOfConversion = 1;
 287:Src/main.c    ****   if (HAL_ADC_Init(&hadc1) != HAL_OK)
 288:Src/main.c    ****   {
 289:Src/main.c    ****     Error_Handler();
 290:Src/main.c    ****   }
 291:Src/main.c    ****   /** Configure Regular Channel 
 292:Src/main.c    ****   */
 293:Src/main.c    ****   sConfig.Channel = ADC_CHANNEL_1;
 294:Src/main.c    ****   sConfig.Rank = ADC_REGULAR_RANK_1;
 295:Src/main.c    ****   sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 296:Src/main.c    ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 297:Src/main.c    ****   {
 298:Src/main.c    ****     Error_Handler();
 299:Src/main.c    ****   }
 300:Src/main.c    ****   /* USER CODE BEGIN ADC1_Init 2 */
 301:Src/main.c    **** 
 302:Src/main.c    ****   /* USER CODE END ADC1_Init 2 */
 303:Src/main.c    **** 
 304:Src/main.c    **** }
 305:Src/main.c    **** 
 306:Src/main.c    **** /**
 307:Src/main.c    ****   * @brief RTC Initialization Function
 308:Src/main.c    ****   * @param None
 309:Src/main.c    ****   * @retval None
 310:Src/main.c    ****   */
 311:Src/main.c    **** static void MX_RTC_Init(void)
 312:Src/main.c    **** {
 313:Src/main.c    **** 
 314:Src/main.c    ****   /* USER CODE BEGIN RTC_Init 0 */
 315:Src/main.c    **** 
 316:Src/main.c    ****   /* USER CODE END RTC_Init 0 */
 317:Src/main.c    **** 
 318:Src/main.c    ****   RTC_TimeTypeDef sTime = {0};
ARM GAS  /tmp/cc5Olqt4.s 			page 7


 319:Src/main.c    ****   RTC_DateTypeDef DateToUpdate = {0};
 320:Src/main.c    **** 
 321:Src/main.c    ****   /* USER CODE BEGIN RTC_Init 1 */
 322:Src/main.c    **** 
 323:Src/main.c    ****   /* USER CODE END RTC_Init 1 */
 324:Src/main.c    ****   /** Initialize RTC Only 
 325:Src/main.c    ****   */
 326:Src/main.c    ****   hrtc.Instance = RTC;
 327:Src/main.c    ****   hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 328:Src/main.c    ****   hrtc.Init.OutPut = RTC_OUTPUTSOURCE_NONE;
 329:Src/main.c    ****   if (HAL_RTC_Init(&hrtc) != HAL_OK)
 330:Src/main.c    ****   {
 331:Src/main.c    ****     Error_Handler();
 332:Src/main.c    ****   }
 333:Src/main.c    **** 
 334:Src/main.c    ****   /* USER CODE BEGIN Check_RTC_BKUP */
 335:Src/main.c    ****     
 336:Src/main.c    ****   /* USER CODE END Check_RTC_BKUP */
 337:Src/main.c    **** 
 338:Src/main.c    ****   /** Initialize RTC and set the Time and Date 
 339:Src/main.c    ****   */
 340:Src/main.c    ****   sTime.Hours = 0x17;
 341:Src/main.c    ****   sTime.Minutes = 0x0;
 342:Src/main.c    ****   sTime.Seconds = 0x30;
 343:Src/main.c    **** 
 344:Src/main.c    ****   if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 345:Src/main.c    ****   {
 346:Src/main.c    ****     Error_Handler();
 347:Src/main.c    ****   }
 348:Src/main.c    ****   DateToUpdate.WeekDay = RTC_WEEKDAY_SATURDAY;
 349:Src/main.c    ****   DateToUpdate.Month = RTC_MONTH_FEBRUARY;
 350:Src/main.c    ****   DateToUpdate.Date = 0x29;
 351:Src/main.c    ****   DateToUpdate.Year = 0x20;
 352:Src/main.c    **** 
 353:Src/main.c    ****   if (HAL_RTC_SetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BCD) != HAL_OK)
 354:Src/main.c    ****   {
 355:Src/main.c    ****     Error_Handler();
 356:Src/main.c    ****   }
 357:Src/main.c    ****   /* USER CODE BEGIN RTC_Init 2 */
 358:Src/main.c    **** 
 359:Src/main.c    ****   /* USER CODE END RTC_Init 2 */
 360:Src/main.c    **** 
 361:Src/main.c    **** }
 362:Src/main.c    **** 
 363:Src/main.c    **** /**
 364:Src/main.c    ****   * @brief SPI1 Initialization Function
 365:Src/main.c    ****   * @param None
 366:Src/main.c    ****   * @retval None
 367:Src/main.c    ****   */
 368:Src/main.c    **** static void MX_SPI1_Init(void)
 369:Src/main.c    **** {
 370:Src/main.c    **** 
 371:Src/main.c    ****   /* USER CODE BEGIN SPI1_Init 0 */
 372:Src/main.c    **** 
 373:Src/main.c    ****   /* USER CODE END SPI1_Init 0 */
 374:Src/main.c    **** 
 375:Src/main.c    ****   /* USER CODE BEGIN SPI1_Init 1 */
ARM GAS  /tmp/cc5Olqt4.s 			page 8


 376:Src/main.c    **** 
 377:Src/main.c    ****   /* USER CODE END SPI1_Init 1 */
 378:Src/main.c    ****   /* SPI1 parameter configuration*/
 379:Src/main.c    ****   hspi1.Instance = SPI1;
 380:Src/main.c    ****   hspi1.Init.Mode = SPI_MODE_MASTER;
 381:Src/main.c    ****   hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 382:Src/main.c    ****   hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 383:Src/main.c    ****   hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 384:Src/main.c    ****   hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 385:Src/main.c    ****   hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 386:Src/main.c    ****   hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 387:Src/main.c    ****   hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 388:Src/main.c    ****   hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 389:Src/main.c    ****   hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 390:Src/main.c    ****   hspi1.Init.CRCPolynomial = 10;
 391:Src/main.c    ****   if (HAL_SPI_Init(&hspi1) != HAL_OK)
 392:Src/main.c    ****   {
 393:Src/main.c    ****     Error_Handler();
 394:Src/main.c    ****   }
 395:Src/main.c    ****   /* USER CODE BEGIN SPI1_Init 2 */
 396:Src/main.c    **** 
 397:Src/main.c    ****   /* USER CODE END SPI1_Init 2 */
 398:Src/main.c    **** 
 399:Src/main.c    **** }
 400:Src/main.c    **** 
 401:Src/main.c    **** /**
 402:Src/main.c    ****   * @brief USART1 Initialization Function
 403:Src/main.c    ****   * @param None
 404:Src/main.c    ****   * @retval None
 405:Src/main.c    ****   */
 406:Src/main.c    **** static void MX_USART1_UART_Init(void)
 407:Src/main.c    **** {
 408:Src/main.c    **** 
 409:Src/main.c    ****   /* USER CODE BEGIN USART1_Init 0 */
 410:Src/main.c    **** 
 411:Src/main.c    ****   /* USER CODE END USART1_Init 0 */
 412:Src/main.c    **** 
 413:Src/main.c    ****   /* USER CODE BEGIN USART1_Init 1 */
 414:Src/main.c    **** 
 415:Src/main.c    ****   /* USER CODE END USART1_Init 1 */
 416:Src/main.c    ****   huart1.Instance = USART1;
 417:Src/main.c    ****   huart1.Init.BaudRate = 115200;
 418:Src/main.c    ****   huart1.Init.WordLength = UART_WORDLENGTH_8B;
 419:Src/main.c    ****   huart1.Init.StopBits = UART_STOPBITS_1;
 420:Src/main.c    ****   huart1.Init.Parity = UART_PARITY_NONE;
 421:Src/main.c    ****   huart1.Init.Mode = UART_MODE_TX_RX;
 422:Src/main.c    ****   huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 423:Src/main.c    ****   huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 424:Src/main.c    ****   if (HAL_UART_Init(&huart1) != HAL_OK)
 425:Src/main.c    ****   {
 426:Src/main.c    ****     Error_Handler();
 427:Src/main.c    ****   }
 428:Src/main.c    ****   /* USER CODE BEGIN USART1_Init 2 */
 429:Src/main.c    ****   
 430:Src/main.c    ****   /* USER CODE END USART1_Init 2 */
 431:Src/main.c    **** 
 432:Src/main.c    **** }
ARM GAS  /tmp/cc5Olqt4.s 			page 9


 433:Src/main.c    **** 
 434:Src/main.c    **** /**
 435:Src/main.c    ****   * @brief GPIO Initialization Function
 436:Src/main.c    ****   * @param None
 437:Src/main.c    ****   * @retval None
 438:Src/main.c    ****   */
 439:Src/main.c    **** static void MX_GPIO_Init(void)
 440:Src/main.c    **** {
 441:Src/main.c    ****   GPIO_InitTypeDef GPIO_InitStruct = {0};
 442:Src/main.c    **** 
 443:Src/main.c    ****   /* GPIO Ports Clock Enable */
 444:Src/main.c    ****   __HAL_RCC_GPIOC_CLK_ENABLE();
 445:Src/main.c    ****   __HAL_RCC_GPIOD_CLK_ENABLE();
 446:Src/main.c    ****   __HAL_RCC_GPIOA_CLK_ENABLE();
 447:Src/main.c    **** 
 448:Src/main.c    ****   /*Configure GPIO pin Output Level */
 449:Src/main.c    ****   HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 450:Src/main.c    **** 
 451:Src/main.c    ****   /*Configure GPIO pin : LED_Pin */
 452:Src/main.c    ****   GPIO_InitStruct.Pin = LED_Pin;
 453:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 454:Src/main.c    ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 455:Src/main.c    ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 456:Src/main.c    ****   HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 457:Src/main.c    **** 
 458:Src/main.c    **** }
 459:Src/main.c    **** 
 460:Src/main.c    **** /* USER CODE BEGIN 4 */
 461:Src/main.c    **** 
 462:Src/main.c    **** /* USER CODE END 4 */
 463:Src/main.c    **** 
 464:Src/main.c    **** /* USER CODE BEGIN Header_Tsk_ADC_LightSensor */
 465:Src/main.c    **** /**
 466:Src/main.c    ****   * @brief  Function implementing the ADC_LightSensor thread.
 467:Src/main.c    ****   * @param  argument: Not used 
 468:Src/main.c    ****   * @retval None
 469:Src/main.c    ****   */
 470:Src/main.c    **** /* USER CODE END Header_Tsk_ADC_LightSensor */
 471:Src/main.c    **** void Tsk_ADC_LightSensor(void *argument)
 472:Src/main.c    **** {
 473:Src/main.c    ****   /* USER CODE BEGIN 5 */
 474:Src/main.c    **** 
 475:Src/main.c    ****   /* Infinite loop */
 476:Src/main.c    ****   for(;;)
 477:Src/main.c    ****   {
 478:Src/main.c    ****     Thread_ADC_LightSensor();
 479:Src/main.c    ****   }
 480:Src/main.c    ****   /* USER CODE END 5 */ 
 481:Src/main.c    **** }
 482:Src/main.c    **** 
 483:Src/main.c    **** /* USER CODE BEGIN Header_Tsk_UART_TX */
 484:Src/main.c    **** /**
 485:Src/main.c    **** * @brief Function implementing the UART_TX thread.
 486:Src/main.c    **** * @param argument: Not used
 487:Src/main.c    **** * @retval None
 488:Src/main.c    **** */
 489:Src/main.c    **** /* USER CODE END Header_Tsk_UART_TX */
ARM GAS  /tmp/cc5Olqt4.s 			page 10


 490:Src/main.c    **** void Tsk_UART_TX(void *argument)
 491:Src/main.c    **** {
 492:Src/main.c    ****   /* USER CODE BEGIN Tsk_UART_TX */
 493:Src/main.c    ****   
 494:Src/main.c    ****   /* Infinite loop */
 495:Src/main.c    ****   for(;;)
 496:Src/main.c    ****   {
 497:Src/main.c    ****       Thread_UART_TX();
 498:Src/main.c    ****   }
 499:Src/main.c    ****   /* USER CODE END Tsk_UART_TX */
 500:Src/main.c    **** }
 501:Src/main.c    **** 
 502:Src/main.c    **** /* USER CODE BEGIN Header_Tsk_LED */
 503:Src/main.c    **** /**
 504:Src/main.c    **** * @brief Function implementing the LED thread.
 505:Src/main.c    **** * @param argument: Not used
 506:Src/main.c    **** * @retval None
 507:Src/main.c    **** */
 508:Src/main.c    **** /* USER CODE END Header_Tsk_LED */
 509:Src/main.c    **** void Tsk_LED(void *argument)
 510:Src/main.c    **** {
  26              		.loc 1 510 0
  27              		.cfi_startproc
  28              		@ Volatile: function does not return.
  29              		@ args = 0, pretend = 0, frame = 0
  30              		@ frame_needed = 0, uses_anonymous_args = 0
  31              		@ link register save eliminated.
  32              	.LVL0:
  33              	.L2:
  34 0000 FEE7     		b	.L2
  35              		.cfi_endproc
  36              	.LFE79:
  38              		.section	.text.MX_GPIO_Init,"ax",%progbits
  39              		.align	1
  40              		.syntax unified
  41              		.thumb
  42              		.thumb_func
  43              		.fpu softvfp
  45              	MX_GPIO_Init:
  46              	.LFB76:
 440:Src/main.c    ****   GPIO_InitTypeDef GPIO_InitStruct = {0};
  47              		.loc 1 440 0
  48              		.cfi_startproc
  49              		@ args = 0, pretend = 0, frame = 32
  50              		@ frame_needed = 0, uses_anonymous_args = 0
 440:Src/main.c    ****   GPIO_InitTypeDef GPIO_InitStruct = {0};
  51              		.loc 1 440 0
  52 0000 30B5     		push	{r4, r5, lr}
  53              	.LCFI0:
  54              		.cfi_def_cfa_offset 12
  55              		.cfi_offset 4, -12
  56              		.cfi_offset 5, -8
  57              		.cfi_offset 14, -4
  58 0002 89B0     		sub	sp, sp, #36
  59              	.LCFI1:
  60              		.cfi_def_cfa_offset 48
 441:Src/main.c    **** 
ARM GAS  /tmp/cc5Olqt4.s 			page 11


  61              		.loc 1 441 0
  62 0004 0024     		movs	r4, #0
  63 0006 0494     		str	r4, [sp, #16]
  64 0008 0594     		str	r4, [sp, #20]
  65 000a 0694     		str	r4, [sp, #24]
  66 000c 0794     		str	r4, [sp, #28]
  67              	.LBB2:
 444:Src/main.c    ****   __HAL_RCC_GPIOD_CLK_ENABLE();
  68              		.loc 1 444 0
  69 000e 184B     		ldr	r3, .L5
  70 0010 9A69     		ldr	r2, [r3, #24]
  71 0012 42F01002 		orr	r2, r2, #16
  72 0016 9A61     		str	r2, [r3, #24]
  73 0018 9A69     		ldr	r2, [r3, #24]
  74 001a 02F01002 		and	r2, r2, #16
  75 001e 0192     		str	r2, [sp, #4]
  76 0020 019A     		ldr	r2, [sp, #4]
  77              	.LBE2:
  78              	.LBB3:
 445:Src/main.c    ****   __HAL_RCC_GPIOA_CLK_ENABLE();
  79              		.loc 1 445 0
  80 0022 9A69     		ldr	r2, [r3, #24]
  81 0024 42F02002 		orr	r2, r2, #32
  82 0028 9A61     		str	r2, [r3, #24]
  83 002a 9A69     		ldr	r2, [r3, #24]
  84 002c 02F02002 		and	r2, r2, #32
  85 0030 0292     		str	r2, [sp, #8]
  86 0032 029A     		ldr	r2, [sp, #8]
  87              	.LBE3:
  88              	.LBB4:
 446:Src/main.c    **** 
  89              		.loc 1 446 0
  90 0034 9A69     		ldr	r2, [r3, #24]
  91 0036 42F00402 		orr	r2, r2, #4
  92 003a 9A61     		str	r2, [r3, #24]
  93 003c 9B69     		ldr	r3, [r3, #24]
  94 003e 03F00403 		and	r3, r3, #4
  95 0042 0393     		str	r3, [sp, #12]
  96 0044 039B     		ldr	r3, [sp, #12]
  97              	.LBE4:
 449:Src/main.c    **** 
  98              		.loc 1 449 0
  99 0046 0B4D     		ldr	r5, .L5+4
 100 0048 2246     		mov	r2, r4
 101 004a 4FF40051 		mov	r1, #8192
 102 004e 2846     		mov	r0, r5
 103 0050 FFF7FEFF 		bl	HAL_GPIO_WritePin
 104              	.LVL1:
 452:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 105              		.loc 1 452 0
 106 0054 4FF40053 		mov	r3, #8192
 107 0058 0493     		str	r3, [sp, #16]
 453:Src/main.c    ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 108              		.loc 1 453 0
 109 005a 0123     		movs	r3, #1
 110 005c 0593     		str	r3, [sp, #20]
 454:Src/main.c    ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
ARM GAS  /tmp/cc5Olqt4.s 			page 12


 111              		.loc 1 454 0
 112 005e 0694     		str	r4, [sp, #24]
 455:Src/main.c    ****   HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 113              		.loc 1 455 0
 114 0060 0223     		movs	r3, #2
 115 0062 0793     		str	r3, [sp, #28]
 456:Src/main.c    **** 
 116              		.loc 1 456 0
 117 0064 04A9     		add	r1, sp, #16
 118 0066 2846     		mov	r0, r5
 119 0068 FFF7FEFF 		bl	HAL_GPIO_Init
 120              	.LVL2:
 458:Src/main.c    **** 
 121              		.loc 1 458 0
 122 006c 09B0     		add	sp, sp, #36
 123              	.LCFI2:
 124              		.cfi_def_cfa_offset 12
 125              		@ sp needed
 126 006e 30BD     		pop	{r4, r5, pc}
 127              	.L6:
 128              		.align	2
 129              	.L5:
 130 0070 00100240 		.word	1073876992
 131 0074 00100140 		.word	1073811456
 132              		.cfi_endproc
 133              	.LFE76:
 135              		.section	.text.Tsk_ADC_LightSensor,"ax",%progbits
 136              		.align	1
 137              		.global	Tsk_ADC_LightSensor
 138              		.syntax unified
 139              		.thumb
 140              		.thumb_func
 141              		.fpu softvfp
 143              	Tsk_ADC_LightSensor:
 144              	.LFB77:
 472:Src/main.c    ****   /* USER CODE BEGIN 5 */
 145              		.loc 1 472 0
 146              		.cfi_startproc
 147              		@ Volatile: function does not return.
 148              		@ args = 0, pretend = 0, frame = 0
 149              		@ frame_needed = 0, uses_anonymous_args = 0
 150              	.LVL3:
 151 0000 08B5     		push	{r3, lr}
 152              	.LCFI3:
 153              		.cfi_def_cfa_offset 8
 154              		.cfi_offset 3, -8
 155              		.cfi_offset 14, -4
 156              	.LVL4:
 157              	.L8:
 478:Src/main.c    ****   }
 158              		.loc 1 478 0 discriminator 1
 159 0002 FFF7FEFF 		bl	Thread_ADC_LightSensor
 160              	.LVL5:
 161 0006 FCE7     		b	.L8
 162              		.cfi_endproc
 163              	.LFE77:
 165              		.section	.text.Tsk_UART_TX,"ax",%progbits
ARM GAS  /tmp/cc5Olqt4.s 			page 13


 166              		.align	1
 167              		.global	Tsk_UART_TX
 168              		.syntax unified
 169              		.thumb
 170              		.thumb_func
 171              		.fpu softvfp
 173              	Tsk_UART_TX:
 174              	.LFB78:
 491:Src/main.c    ****   /* USER CODE BEGIN Tsk_UART_TX */
 175              		.loc 1 491 0
 176              		.cfi_startproc
 177              		@ Volatile: function does not return.
 178              		@ args = 0, pretend = 0, frame = 0
 179              		@ frame_needed = 0, uses_anonymous_args = 0
 180              	.LVL6:
 181 0000 08B5     		push	{r3, lr}
 182              	.LCFI4:
 183              		.cfi_def_cfa_offset 8
 184              		.cfi_offset 3, -8
 185              		.cfi_offset 14, -4
 186              	.LVL7:
 187              	.L11:
 497:Src/main.c    ****   }
 188              		.loc 1 497 0 discriminator 1
 189 0002 FFF7FEFF 		bl	Thread_UART_TX
 190              	.LVL8:
 191 0006 FCE7     		b	.L11
 192              		.cfi_endproc
 193              	.LFE78:
 195              		.section	.text.Tsk_UART_RX,"ax",%progbits
 196              		.align	1
 197              		.global	Tsk_UART_RX
 198              		.syntax unified
 199              		.thumb
 200              		.thumb_func
 201              		.fpu softvfp
 203              	Tsk_UART_RX:
 204              	.LFB80:
 511:Src/main.c    ****   /* USER CODE BEGIN Tsk_LED */
 512:Src/main.c    ****   //volatile uint32_t * GPIOC_BSRR = (uint32_t *) 0x40011010;
 513:Src/main.c    ****   //volatile uint32_t * GPIOC_BRR = (uint32_t *) 0x40011014;  
 514:Src/main.c    ****   /* Infinite loop */
 515:Src/main.c    ****   for(;;)
 516:Src/main.c    ****   {
 517:Src/main.c    ****     /*
 518:Src/main.c    ****     *GPIOC_BRR |= (0x1 << 13);
 519:Src/main.c    ****     osDelay(500);
 520:Src/main.c    ****     *GPIOC_BSRR |= (0x1 << 13);
 521:Src/main.c    ****     osDelay(500);
 522:Src/main.c    ****     */
 523:Src/main.c    ****   }
 524:Src/main.c    ****   /* USER CODE END Tsk_LED */
 525:Src/main.c    **** }
 526:Src/main.c    **** 
 527:Src/main.c    **** /* USER CODE BEGIN Header_Tsk_UART_RX */
 528:Src/main.c    **** /**
 529:Src/main.c    **** * @brief Function implementing the UART_RX thread.
ARM GAS  /tmp/cc5Olqt4.s 			page 14


 530:Src/main.c    **** * @param argument: Not used
 531:Src/main.c    **** * @retval None
 532:Src/main.c    **** */
 533:Src/main.c    **** /* USER CODE END Header_Tsk_UART_RX */
 534:Src/main.c    **** void Tsk_UART_RX(void *argument)
 535:Src/main.c    **** {
 205              		.loc 1 535 0
 206              		.cfi_startproc
 207              		@ Volatile: function does not return.
 208              		@ args = 0, pretend = 0, frame = 0
 209              		@ frame_needed = 0, uses_anonymous_args = 0
 210              	.LVL9:
 211 0000 08B5     		push	{r3, lr}
 212              	.LCFI5:
 213              		.cfi_def_cfa_offset 8
 214              		.cfi_offset 3, -8
 215              		.cfi_offset 14, -4
 216              	.LVL10:
 217              	.L14:
 536:Src/main.c    ****   /* USER CODE BEGIN Tsk_UART_RX */
 537:Src/main.c    **** 
 538:Src/main.c    ****   /* Infinite loop */
 539:Src/main.c    ****   for(;;)
 540:Src/main.c    ****   {
 541:Src/main.c    ****       Thread_UART_RX();
 218              		.loc 1 541 0 discriminator 1
 219 0002 FFF7FEFF 		bl	Thread_UART_RX
 220              	.LVL11:
 221 0006 FCE7     		b	.L14
 222              		.cfi_endproc
 223              	.LFE80:
 225              		.section	.text.HAL_TIM_PeriodElapsedCallback,"ax",%progbits
 226              		.align	1
 227              		.global	HAL_TIM_PeriodElapsedCallback
 228              		.syntax unified
 229              		.thumb
 230              		.thumb_func
 231              		.fpu softvfp
 233              	HAL_TIM_PeriodElapsedCallback:
 234              	.LFB81:
 542:Src/main.c    ****   }
 543:Src/main.c    ****   /* USER CODE END Tsk_UART_RX */
 544:Src/main.c    **** }
 545:Src/main.c    **** 
 546:Src/main.c    **** /**
 547:Src/main.c    ****   * @brief  Period elapsed callback in non blocking mode
 548:Src/main.c    ****   * @note   This function is called  when TIM1 interrupt took place, inside
 549:Src/main.c    ****   * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 550:Src/main.c    ****   * a global variable "uwTick" used as application time base.
 551:Src/main.c    ****   * @param  htim : TIM handle
 552:Src/main.c    ****   * @retval None
 553:Src/main.c    ****   */
 554:Src/main.c    **** void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
 555:Src/main.c    **** {
 235              		.loc 1 555 0
 236              		.cfi_startproc
 237              		@ args = 0, pretend = 0, frame = 0
ARM GAS  /tmp/cc5Olqt4.s 			page 15


 238              		@ frame_needed = 0, uses_anonymous_args = 0
 239              	.LVL12:
 240 0000 08B5     		push	{r3, lr}
 241              	.LCFI6:
 242              		.cfi_def_cfa_offset 8
 243              		.cfi_offset 3, -8
 244              		.cfi_offset 14, -4
 556:Src/main.c    ****   /* USER CODE BEGIN Callback 0 */
 557:Src/main.c    **** 
 558:Src/main.c    ****   /* USER CODE END Callback 0 */
 559:Src/main.c    ****   if (htim->Instance == TIM1) {
 245              		.loc 1 559 0
 246 0002 0268     		ldr	r2, [r0]
 247 0004 034B     		ldr	r3, .L20
 248 0006 9A42     		cmp	r2, r3
 249 0008 00D0     		beq	.L19
 250              	.LVL13:
 251              	.L16:
 252 000a 08BD     		pop	{r3, pc}
 253              	.LVL14:
 254              	.L19:
 560:Src/main.c    ****     HAL_IncTick();
 255              		.loc 1 560 0
 256 000c FFF7FEFF 		bl	HAL_IncTick
 257              	.LVL15:
 561:Src/main.c    ****   }
 562:Src/main.c    ****   /* USER CODE BEGIN Callback 1 */
 563:Src/main.c    **** 
 564:Src/main.c    ****   /* USER CODE END Callback 1 */
 565:Src/main.c    **** }
 258              		.loc 1 565 0
 259 0010 FBE7     		b	.L16
 260              	.L21:
 261 0012 00BF     		.align	2
 262              	.L20:
 263 0014 002C0140 		.word	1073818624
 264              		.cfi_endproc
 265              	.LFE81:
 267              		.section	.text.Error_Handler,"ax",%progbits
 268              		.align	1
 269              		.global	Error_Handler
 270              		.syntax unified
 271              		.thumb
 272              		.thumb_func
 273              		.fpu softvfp
 275              	Error_Handler:
 276              	.LFB82:
 566:Src/main.c    **** 
 567:Src/main.c    **** /**
 568:Src/main.c    ****   * @brief  This function is executed in case of error occurrence.
 569:Src/main.c    ****   * @retval None
 570:Src/main.c    ****   */
 571:Src/main.c    **** void Error_Handler(void)
 572:Src/main.c    **** {
 277              		.loc 1 572 0
 278              		.cfi_startproc
 279              		@ Volatile: function does not return.
ARM GAS  /tmp/cc5Olqt4.s 			page 16


 280              		@ args = 0, pretend = 0, frame = 0
 281              		@ frame_needed = 0, uses_anonymous_args = 0
 282              		@ link register save eliminated.
 283              	.L23:
 284 0000 FEE7     		b	.L23
 285              		.cfi_endproc
 286              	.LFE82:
 288              		.section	.text.MX_USART1_UART_Init,"ax",%progbits
 289              		.align	1
 290              		.syntax unified
 291              		.thumb
 292              		.thumb_func
 293              		.fpu softvfp
 295              	MX_USART1_UART_Init:
 296              	.LFB75:
 407:Src/main.c    **** 
 297              		.loc 1 407 0
 298              		.cfi_startproc
 299              		@ args = 0, pretend = 0, frame = 0
 300              		@ frame_needed = 0, uses_anonymous_args = 0
 407:Src/main.c    **** 
 301              		.loc 1 407 0
 302 0000 08B5     		push	{r3, lr}
 303              	.LCFI7:
 304              		.cfi_def_cfa_offset 8
 305              		.cfi_offset 3, -8
 306              		.cfi_offset 14, -4
 416:Src/main.c    ****   huart1.Init.BaudRate = 115200;
 307              		.loc 1 416 0
 308 0002 0A48     		ldr	r0, .L28
 309 0004 0A4B     		ldr	r3, .L28+4
 310 0006 0360     		str	r3, [r0]
 417:Src/main.c    ****   huart1.Init.WordLength = UART_WORDLENGTH_8B;
 311              		.loc 1 417 0
 312 0008 4FF4E133 		mov	r3, #115200
 313 000c 4360     		str	r3, [r0, #4]
 418:Src/main.c    ****   huart1.Init.StopBits = UART_STOPBITS_1;
 314              		.loc 1 418 0
 315 000e 0023     		movs	r3, #0
 316 0010 8360     		str	r3, [r0, #8]
 419:Src/main.c    ****   huart1.Init.Parity = UART_PARITY_NONE;
 317              		.loc 1 419 0
 318 0012 C360     		str	r3, [r0, #12]
 420:Src/main.c    ****   huart1.Init.Mode = UART_MODE_TX_RX;
 319              		.loc 1 420 0
 320 0014 0361     		str	r3, [r0, #16]
 421:Src/main.c    ****   huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 321              		.loc 1 421 0
 322 0016 0C22     		movs	r2, #12
 323 0018 4261     		str	r2, [r0, #20]
 422:Src/main.c    ****   huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 324              		.loc 1 422 0
 325 001a 8361     		str	r3, [r0, #24]
 423:Src/main.c    ****   if (HAL_UART_Init(&huart1) != HAL_OK)
 326              		.loc 1 423 0
 327 001c C361     		str	r3, [r0, #28]
 424:Src/main.c    ****   {
ARM GAS  /tmp/cc5Olqt4.s 			page 17


 328              		.loc 1 424 0
 329 001e FFF7FEFF 		bl	HAL_UART_Init
 330              	.LVL16:
 331 0022 00B9     		cbnz	r0, .L27
 332 0024 08BD     		pop	{r3, pc}
 333              	.L27:
 426:Src/main.c    ****   }
 334              		.loc 1 426 0
 335 0026 FFF7FEFF 		bl	Error_Handler
 336              	.LVL17:
 337              	.L29:
 338 002a 00BF     		.align	2
 339              	.L28:
 340 002c 00000000 		.word	huart1
 341 0030 00380140 		.word	1073821696
 342              		.cfi_endproc
 343              	.LFE75:
 345              		.section	.text.MX_ADC1_Init,"ax",%progbits
 346              		.align	1
 347              		.syntax unified
 348              		.thumb
 349              		.thumb_func
 350              		.fpu softvfp
 352              	MX_ADC1_Init:
 353              	.LFB72:
 267:Src/main.c    **** 
 354              		.loc 1 267 0
 355              		.cfi_startproc
 356              		@ args = 0, pretend = 0, frame = 16
 357              		@ frame_needed = 0, uses_anonymous_args = 0
 358 0000 00B5     		push	{lr}
 359              	.LCFI8:
 360              		.cfi_def_cfa_offset 4
 361              		.cfi_offset 14, -4
 362 0002 85B0     		sub	sp, sp, #20
 363              	.LCFI9:
 364              		.cfi_def_cfa_offset 24
 273:Src/main.c    **** 
 365              		.loc 1 273 0
 366 0004 0023     		movs	r3, #0
 367 0006 0193     		str	r3, [sp, #4]
 368 0008 0293     		str	r3, [sp, #8]
 369 000a 0393     		str	r3, [sp, #12]
 280:Src/main.c    ****   hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 370              		.loc 1 280 0
 371 000c 0F48     		ldr	r0, .L36
 372 000e 104A     		ldr	r2, .L36+4
 373 0010 0260     		str	r2, [r0]
 281:Src/main.c    ****   hadc1.Init.ContinuousConvMode = DISABLE;
 374              		.loc 1 281 0
 375 0012 8360     		str	r3, [r0, #8]
 282:Src/main.c    ****   hadc1.Init.DiscontinuousConvMode = DISABLE;
 376              		.loc 1 282 0
 377 0014 0373     		strb	r3, [r0, #12]
 283:Src/main.c    ****   hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 378              		.loc 1 283 0
 379 0016 0375     		strb	r3, [r0, #20]
ARM GAS  /tmp/cc5Olqt4.s 			page 18


 284:Src/main.c    ****   hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 380              		.loc 1 284 0
 381 0018 4FF46022 		mov	r2, #917504
 382 001c C261     		str	r2, [r0, #28]
 285:Src/main.c    ****   hadc1.Init.NbrOfConversion = 1;
 383              		.loc 1 285 0
 384 001e 4360     		str	r3, [r0, #4]
 286:Src/main.c    ****   if (HAL_ADC_Init(&hadc1) != HAL_OK)
 385              		.loc 1 286 0
 386 0020 0123     		movs	r3, #1
 387 0022 0361     		str	r3, [r0, #16]
 287:Src/main.c    ****   {
 388              		.loc 1 287 0
 389 0024 FFF7FEFF 		bl	HAL_ADC_Init
 390              	.LVL18:
 391 0028 60B9     		cbnz	r0, .L34
 293:Src/main.c    ****   sConfig.Rank = ADC_REGULAR_RANK_1;
 392              		.loc 1 293 0
 393 002a 0123     		movs	r3, #1
 394 002c 0193     		str	r3, [sp, #4]
 294:Src/main.c    ****   sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 395              		.loc 1 294 0
 396 002e 0293     		str	r3, [sp, #8]
 295:Src/main.c    ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 397              		.loc 1 295 0
 398 0030 0023     		movs	r3, #0
 399 0032 0393     		str	r3, [sp, #12]
 296:Src/main.c    ****   {
 400              		.loc 1 296 0
 401 0034 01A9     		add	r1, sp, #4
 402 0036 0548     		ldr	r0, .L36
 403 0038 FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 404              	.LVL19:
 405 003c 20B9     		cbnz	r0, .L35
 304:Src/main.c    **** 
 406              		.loc 1 304 0
 407 003e 05B0     		add	sp, sp, #20
 408              	.LCFI10:
 409              		.cfi_remember_state
 410              		.cfi_def_cfa_offset 4
 411              		@ sp needed
 412 0040 5DF804FB 		ldr	pc, [sp], #4
 413              	.L34:
 414              	.LCFI11:
 415              		.cfi_restore_state
 289:Src/main.c    ****   }
 416              		.loc 1 289 0
 417 0044 FFF7FEFF 		bl	Error_Handler
 418              	.LVL20:
 419              	.L35:
 298:Src/main.c    ****   }
 420              		.loc 1 298 0
 421 0048 FFF7FEFF 		bl	Error_Handler
 422              	.LVL21:
 423              	.L37:
 424              		.align	2
 425              	.L36:
ARM GAS  /tmp/cc5Olqt4.s 			page 19


 426 004c 00000000 		.word	hadc1
 427 0050 00240140 		.word	1073816576
 428              		.cfi_endproc
 429              	.LFE72:
 431              		.section	.text.MX_RTC_Init,"ax",%progbits
 432              		.align	1
 433              		.syntax unified
 434              		.thumb
 435              		.thumb_func
 436              		.fpu softvfp
 438              	MX_RTC_Init:
 439              	.LFB73:
 312:Src/main.c    **** 
 440              		.loc 1 312 0
 441              		.cfi_startproc
 442              		@ args = 0, pretend = 0, frame = 8
 443              		@ frame_needed = 0, uses_anonymous_args = 0
 444 0000 00B5     		push	{lr}
 445              	.LCFI12:
 446              		.cfi_def_cfa_offset 4
 447              		.cfi_offset 14, -4
 448 0002 83B0     		sub	sp, sp, #12
 449              	.LCFI13:
 450              		.cfi_def_cfa_offset 16
 318:Src/main.c    ****   RTC_DateTypeDef DateToUpdate = {0};
 451              		.loc 1 318 0
 452 0004 0023     		movs	r3, #0
 453 0006 ADF80430 		strh	r3, [sp, #4]	@ movhi
 454 000a 8DF80630 		strb	r3, [sp, #6]
 319:Src/main.c    **** 
 455              		.loc 1 319 0
 456 000e 0093     		str	r3, [sp]
 326:Src/main.c    ****   hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 457              		.loc 1 326 0
 458 0010 1948     		ldr	r0, .L46
 459 0012 1A4A     		ldr	r2, .L46+4
 460 0014 0260     		str	r2, [r0]
 327:Src/main.c    ****   hrtc.Init.OutPut = RTC_OUTPUTSOURCE_NONE;
 461              		.loc 1 327 0
 462 0016 4FF0FF32 		mov	r2, #-1
 463 001a 4260     		str	r2, [r0, #4]
 328:Src/main.c    ****   if (HAL_RTC_Init(&hrtc) != HAL_OK)
 464              		.loc 1 328 0
 465 001c 8360     		str	r3, [r0, #8]
 329:Src/main.c    ****   {
 466              		.loc 1 329 0
 467 001e FFF7FEFF 		bl	HAL_RTC_Init
 468              	.LVL22:
 469 0022 18BB     		cbnz	r0, .L43
 340:Src/main.c    ****   sTime.Minutes = 0x0;
 470              		.loc 1 340 0
 471 0024 1723     		movs	r3, #23
 472 0026 8DF80430 		strb	r3, [sp, #4]
 341:Src/main.c    ****   sTime.Seconds = 0x30;
 473              		.loc 1 341 0
 474 002a 0023     		movs	r3, #0
 475 002c 8DF80530 		strb	r3, [sp, #5]
ARM GAS  /tmp/cc5Olqt4.s 			page 20


 342:Src/main.c    **** 
 476              		.loc 1 342 0
 477 0030 3023     		movs	r3, #48
 478 0032 8DF80630 		strb	r3, [sp, #6]
 344:Src/main.c    ****   {
 479              		.loc 1 344 0
 480 0036 0122     		movs	r2, #1
 481 0038 01A9     		add	r1, sp, #4
 482 003a 0F48     		ldr	r0, .L46
 483 003c FFF7FEFF 		bl	HAL_RTC_SetTime
 484              	.LVL23:
 485 0040 B0B9     		cbnz	r0, .L44
 348:Src/main.c    ****   DateToUpdate.Month = RTC_MONTH_FEBRUARY;
 486              		.loc 1 348 0
 487 0042 0623     		movs	r3, #6
 488 0044 8DF80030 		strb	r3, [sp]
 349:Src/main.c    ****   DateToUpdate.Date = 0x29;
 489              		.loc 1 349 0
 490 0048 0223     		movs	r3, #2
 491 004a 8DF80130 		strb	r3, [sp, #1]
 350:Src/main.c    ****   DateToUpdate.Year = 0x20;
 492              		.loc 1 350 0
 493 004e 2923     		movs	r3, #41
 494 0050 8DF80230 		strb	r3, [sp, #2]
 351:Src/main.c    **** 
 495              		.loc 1 351 0
 496 0054 2023     		movs	r3, #32
 497 0056 8DF80330 		strb	r3, [sp, #3]
 353:Src/main.c    ****   {
 498              		.loc 1 353 0
 499 005a 0122     		movs	r2, #1
 500 005c 6946     		mov	r1, sp
 501 005e 0648     		ldr	r0, .L46
 502 0060 FFF7FEFF 		bl	HAL_RTC_SetDate
 503              	.LVL24:
 504 0064 30B9     		cbnz	r0, .L45
 361:Src/main.c    **** 
 505              		.loc 1 361 0
 506 0066 03B0     		add	sp, sp, #12
 507              	.LCFI14:
 508              		.cfi_remember_state
 509              		.cfi_def_cfa_offset 4
 510              		@ sp needed
 511 0068 5DF804FB 		ldr	pc, [sp], #4
 512              	.L43:
 513              	.LCFI15:
 514              		.cfi_restore_state
 331:Src/main.c    ****   }
 515              		.loc 1 331 0
 516 006c FFF7FEFF 		bl	Error_Handler
 517              	.LVL25:
 518              	.L44:
 346:Src/main.c    ****   }
 519              		.loc 1 346 0
 520 0070 FFF7FEFF 		bl	Error_Handler
 521              	.LVL26:
 522              	.L45:
ARM GAS  /tmp/cc5Olqt4.s 			page 21


 355:Src/main.c    ****   }
 523              		.loc 1 355 0
 524 0074 FFF7FEFF 		bl	Error_Handler
 525              	.LVL27:
 526              	.L47:
 527              		.align	2
 528              	.L46:
 529 0078 00000000 		.word	hrtc
 530 007c 00280040 		.word	1073752064
 531              		.cfi_endproc
 532              	.LFE73:
 534              		.section	.text.MX_SPI1_Init,"ax",%progbits
 535              		.align	1
 536              		.syntax unified
 537              		.thumb
 538              		.thumb_func
 539              		.fpu softvfp
 541              	MX_SPI1_Init:
 542              	.LFB74:
 369:Src/main.c    **** 
 543              		.loc 1 369 0
 544              		.cfi_startproc
 545              		@ args = 0, pretend = 0, frame = 0
 546              		@ frame_needed = 0, uses_anonymous_args = 0
 547 0000 08B5     		push	{r3, lr}
 548              	.LCFI16:
 549              		.cfi_def_cfa_offset 8
 550              		.cfi_offset 3, -8
 551              		.cfi_offset 14, -4
 379:Src/main.c    ****   hspi1.Init.Mode = SPI_MODE_MASTER;
 552              		.loc 1 379 0
 553 0002 0D48     		ldr	r0, .L52
 554 0004 0D4B     		ldr	r3, .L52+4
 555 0006 0360     		str	r3, [r0]
 380:Src/main.c    ****   hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 556              		.loc 1 380 0
 557 0008 4FF48273 		mov	r3, #260
 558 000c 4360     		str	r3, [r0, #4]
 381:Src/main.c    ****   hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 559              		.loc 1 381 0
 560 000e 0023     		movs	r3, #0
 561 0010 8360     		str	r3, [r0, #8]
 382:Src/main.c    ****   hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 562              		.loc 1 382 0
 563 0012 C360     		str	r3, [r0, #12]
 383:Src/main.c    ****   hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 564              		.loc 1 383 0
 565 0014 0222     		movs	r2, #2
 566 0016 0261     		str	r2, [r0, #16]
 384:Src/main.c    ****   hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 567              		.loc 1 384 0
 568 0018 4361     		str	r3, [r0, #20]
 385:Src/main.c    ****   hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 569              		.loc 1 385 0
 570 001a 4FF48022 		mov	r2, #262144
 571 001e 8261     		str	r2, [r0, #24]
 386:Src/main.c    ****   hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
ARM GAS  /tmp/cc5Olqt4.s 			page 22


 572              		.loc 1 386 0
 573 0020 C361     		str	r3, [r0, #28]
 387:Src/main.c    ****   hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 574              		.loc 1 387 0
 575 0022 0362     		str	r3, [r0, #32]
 388:Src/main.c    ****   hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 576              		.loc 1 388 0
 577 0024 4362     		str	r3, [r0, #36]
 389:Src/main.c    ****   hspi1.Init.CRCPolynomial = 10;
 578              		.loc 1 389 0
 579 0026 8362     		str	r3, [r0, #40]
 390:Src/main.c    ****   if (HAL_SPI_Init(&hspi1) != HAL_OK)
 580              		.loc 1 390 0
 581 0028 0A23     		movs	r3, #10
 582 002a C362     		str	r3, [r0, #44]
 391:Src/main.c    ****   {
 583              		.loc 1 391 0
 584 002c FFF7FEFF 		bl	HAL_SPI_Init
 585              	.LVL28:
 586 0030 00B9     		cbnz	r0, .L51
 587 0032 08BD     		pop	{r3, pc}
 588              	.L51:
 393:Src/main.c    ****   }
 589              		.loc 1 393 0
 590 0034 FFF7FEFF 		bl	Error_Handler
 591              	.LVL29:
 592              	.L53:
 593              		.align	2
 594              	.L52:
 595 0038 00000000 		.word	hspi1
 596 003c 00300140 		.word	1073819648
 597              		.cfi_endproc
 598              	.LFE74:
 600              		.section	.text.SystemClock_Config,"ax",%progbits
 601              		.align	1
 602              		.global	SystemClock_Config
 603              		.syntax unified
 604              		.thumb
 605              		.thumb_func
 606              		.fpu softvfp
 608              	SystemClock_Config:
 609              	.LFB71:
 223:Src/main.c    ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 610              		.loc 1 223 0
 611              		.cfi_startproc
 612              		@ args = 0, pretend = 0, frame = 80
 613              		@ frame_needed = 0, uses_anonymous_args = 0
 614 0000 00B5     		push	{lr}
 615              	.LCFI17:
 616              		.cfi_def_cfa_offset 4
 617              		.cfi_offset 14, -4
 618 0002 95B0     		sub	sp, sp, #84
 619              	.LCFI18:
 620              		.cfi_def_cfa_offset 88
 224:Src/main.c    ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 621              		.loc 1 224 0
 622 0004 2822     		movs	r2, #40
ARM GAS  /tmp/cc5Olqt4.s 			page 23


 623 0006 0021     		movs	r1, #0
 624 0008 0DEB0200 		add	r0, sp, r2
 625 000c FFF7FEFF 		bl	memset
 626              	.LVL30:
 225:Src/main.c    ****   RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 627              		.loc 1 225 0
 628 0010 0023     		movs	r3, #0
 629 0012 0593     		str	r3, [sp, #20]
 630 0014 0693     		str	r3, [sp, #24]
 631 0016 0793     		str	r3, [sp, #28]
 632 0018 0893     		str	r3, [sp, #32]
 633 001a 0993     		str	r3, [sp, #36]
 226:Src/main.c    **** 
 634              		.loc 1 226 0
 635 001c 0193     		str	r3, [sp, #4]
 636 001e 0293     		str	r3, [sp, #8]
 637 0020 0393     		str	r3, [sp, #12]
 638 0022 0493     		str	r3, [sp, #16]
 230:Src/main.c    ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 639              		.loc 1 230 0
 640 0024 0A23     		movs	r3, #10
 641 0026 0A93     		str	r3, [sp, #40]
 231:Src/main.c    ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 642              		.loc 1 231 0
 643 0028 0123     		movs	r3, #1
 644 002a 0E93     		str	r3, [sp, #56]
 232:Src/main.c    ****   RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 645              		.loc 1 232 0
 646 002c 1022     		movs	r2, #16
 647 002e 0F92     		str	r2, [sp, #60]
 233:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 648              		.loc 1 233 0
 649 0030 1093     		str	r3, [sp, #64]
 235:Src/main.c    ****   {
 650              		.loc 1 235 0
 651 0032 0AA8     		add	r0, sp, #40
 652 0034 FFF7FEFF 		bl	HAL_RCC_OscConfig
 653              	.LVL31:
 654 0038 C0B9     		cbnz	r0, .L59
 241:Src/main.c    ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 655              		.loc 1 241 0
 656 003a 0F23     		movs	r3, #15
 657 003c 0593     		str	r3, [sp, #20]
 243:Src/main.c    ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 658              		.loc 1 243 0
 659 003e 0021     		movs	r1, #0
 660 0040 0691     		str	r1, [sp, #24]
 244:Src/main.c    ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 661              		.loc 1 244 0
 662 0042 0791     		str	r1, [sp, #28]
 245:Src/main.c    ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 663              		.loc 1 245 0
 664 0044 0891     		str	r1, [sp, #32]
 246:Src/main.c    **** 
 665              		.loc 1 246 0
 666 0046 0991     		str	r1, [sp, #36]
 248:Src/main.c    ****   {
ARM GAS  /tmp/cc5Olqt4.s 			page 24


 667              		.loc 1 248 0
 668 0048 05A8     		add	r0, sp, #20
 669 004a FFF7FEFF 		bl	HAL_RCC_ClockConfig
 670              	.LVL32:
 671 004e 78B9     		cbnz	r0, .L60
 252:Src/main.c    ****   PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 672              		.loc 1 252 0
 673 0050 0323     		movs	r3, #3
 674 0052 0193     		str	r3, [sp, #4]
 253:Src/main.c    ****   PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 675              		.loc 1 253 0
 676 0054 4FF40073 		mov	r3, #512
 677 0058 0293     		str	r3, [sp, #8]
 254:Src/main.c    ****   if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 678              		.loc 1 254 0
 679 005a 0023     		movs	r3, #0
 680 005c 0393     		str	r3, [sp, #12]
 255:Src/main.c    ****   {
 681              		.loc 1 255 0
 682 005e 01A8     		add	r0, sp, #4
 683 0060 FFF7FEFF 		bl	HAL_RCCEx_PeriphCLKConfig
 684              	.LVL33:
 685 0064 30B9     		cbnz	r0, .L61
 259:Src/main.c    **** 
 686              		.loc 1 259 0
 687 0066 15B0     		add	sp, sp, #84
 688              	.LCFI19:
 689              		.cfi_remember_state
 690              		.cfi_def_cfa_offset 4
 691              		@ sp needed
 692 0068 5DF804FB 		ldr	pc, [sp], #4
 693              	.L59:
 694              	.LCFI20:
 695              		.cfi_restore_state
 237:Src/main.c    ****   }
 696              		.loc 1 237 0
 697 006c FFF7FEFF 		bl	Error_Handler
 698              	.LVL34:
 699              	.L60:
 250:Src/main.c    ****   }
 700              		.loc 1 250 0
 701 0070 FFF7FEFF 		bl	Error_Handler
 702              	.LVL35:
 703              	.L61:
 257:Src/main.c    ****   }
 704              		.loc 1 257 0
 705 0074 FFF7FEFF 		bl	Error_Handler
 706              	.LVL36:
 707              		.cfi_endproc
 708              	.LFE71:
 710              		.section	.text.main,"ax",%progbits
 711              		.align	1
 712              		.global	main
 713              		.syntax unified
 714              		.thumb
 715              		.thumb_func
 716              		.fpu softvfp
ARM GAS  /tmp/cc5Olqt4.s 			page 25


 718              	main:
 719              	.LFB70:
 127:Src/main.c    ****   /* USER CODE BEGIN 1 */
 720              		.loc 1 127 0
 721              		.cfi_startproc
 722              		@ Volatile: function does not return.
 723              		@ args = 0, pretend = 0, frame = 0
 724              		@ frame_needed = 0, uses_anonymous_args = 0
 725 0000 08B5     		push	{r3, lr}
 726              	.LCFI21:
 727              		.cfi_def_cfa_offset 8
 728              		.cfi_offset 3, -8
 729              		.cfi_offset 14, -4
 136:Src/main.c    **** 
 730              		.loc 1 136 0
 731 0002 FFF7FEFF 		bl	HAL_Init
 732              	.LVL37:
 143:Src/main.c    **** 
 733              		.loc 1 143 0
 734 0006 FFF7FEFF 		bl	SystemClock_Config
 735              	.LVL38:
 150:Src/main.c    ****   MX_USART1_UART_Init();
 736              		.loc 1 150 0
 737 000a FFF7FEFF 		bl	MX_GPIO_Init
 738              	.LVL39:
 151:Src/main.c    ****   MX_ADC1_Init();
 739              		.loc 1 151 0
 740 000e FFF7FEFF 		bl	MX_USART1_UART_Init
 741              	.LVL40:
 152:Src/main.c    ****   MX_RTC_Init();
 742              		.loc 1 152 0
 743 0012 FFF7FEFF 		bl	MX_ADC1_Init
 744              	.LVL41:
 153:Src/main.c    ****   MX_SPI1_Init();
 745              		.loc 1 153 0
 746 0016 FFF7FEFF 		bl	MX_RTC_Init
 747              	.LVL42:
 154:Src/main.c    ****   MX_FATFS_Init();
 748              		.loc 1 154 0
 749 001a FFF7FEFF 		bl	MX_SPI1_Init
 750              	.LVL43:
 155:Src/main.c    ****   /* USER CODE BEGIN 2 */
 751              		.loc 1 155 0
 752 001e FFF7FEFF 		bl	MX_FATFS_Init
 753              	.LVL44:
 160:Src/main.c    **** 
 754              		.loc 1 160 0
 755 0022 FFF7FEFF 		bl	osKernelInitialize
 756              	.LVL45:
 176:Src/main.c    **** 
 757              		.loc 1 176 0
 758 0026 164A     		ldr	r2, .L65
 759 0028 0121     		movs	r1, #1
 760 002a 8020     		movs	r0, #128
 761 002c FFF7FEFF 		bl	osMessageQueueNew
 762              	.LVL46:
 763 0030 144B     		ldr	r3, .L65+4
ARM GAS  /tmp/cc5Olqt4.s 			page 26


 764 0032 1860     		str	r0, [r3]
 179:Src/main.c    **** 
 765              		.loc 1 179 0
 766 0034 144A     		ldr	r2, .L65+8
 767 0036 0121     		movs	r1, #1
 768 0038 8020     		movs	r0, #128
 769 003a FFF7FEFF 		bl	osMessageQueueNew
 770              	.LVL47:
 771 003e 134B     		ldr	r3, .L65+12
 772 0040 1860     		str	r0, [r3]
 187:Src/main.c    **** 
 773              		.loc 1 187 0
 774 0042 134A     		ldr	r2, .L65+16
 775 0044 0021     		movs	r1, #0
 776 0046 1348     		ldr	r0, .L65+20
 777 0048 FFF7FEFF 		bl	osThreadNew
 778              	.LVL48:
 779 004c 124B     		ldr	r3, .L65+24
 780 004e 1860     		str	r0, [r3]
 190:Src/main.c    **** 
 781              		.loc 1 190 0
 782 0050 124A     		ldr	r2, .L65+28
 783 0052 0021     		movs	r1, #0
 784 0054 1248     		ldr	r0, .L65+32
 785 0056 FFF7FEFF 		bl	osThreadNew
 786              	.LVL49:
 787 005a 124B     		ldr	r3, .L65+36
 788 005c 1860     		str	r0, [r3]
 193:Src/main.c    **** 
 789              		.loc 1 193 0
 790 005e 124A     		ldr	r2, .L65+40
 791 0060 0021     		movs	r1, #0
 792 0062 1248     		ldr	r0, .L65+44
 793 0064 FFF7FEFF 		bl	osThreadNew
 794              	.LVL50:
 795 0068 114B     		ldr	r3, .L65+48
 796 006a 1860     		str	r0, [r3]
 196:Src/main.c    **** 
 797              		.loc 1 196 0
 798 006c 114A     		ldr	r2, .L65+52
 799 006e 0021     		movs	r1, #0
 800 0070 1148     		ldr	r0, .L65+56
 801 0072 FFF7FEFF 		bl	osThreadNew
 802              	.LVL51:
 803 0076 114B     		ldr	r3, .L65+60
 804 0078 1860     		str	r0, [r3]
 203:Src/main.c    ****  
 805              		.loc 1 203 0
 806 007a FFF7FEFF 		bl	osKernelStart
 807              	.LVL52:
 808              	.L63:
 809 007e FEE7     		b	.L63
 810              	.L66:
 811              		.align	2
 812              	.L65:
 813 0080 00000000 		.word	.LANCHOR0
 814 0084 00000000 		.word	Queue_UART_RXHandle
ARM GAS  /tmp/cc5Olqt4.s 			page 27


 815 0088 00000000 		.word	.LANCHOR1
 816 008c 00000000 		.word	Queue_UART_TXHandle
 817 0090 00000000 		.word	.LANCHOR2
 818 0094 00000000 		.word	Tsk_ADC_LightSensor
 819 0098 00000000 		.word	ADC_LightSensorHandle
 820 009c 00000000 		.word	.LANCHOR3
 821 00a0 00000000 		.word	Tsk_UART_TX
 822 00a4 00000000 		.word	UART_TXHandle
 823 00a8 00000000 		.word	.LANCHOR4
 824 00ac 00000000 		.word	Tsk_LED
 825 00b0 00000000 		.word	LEDHandle
 826 00b4 00000000 		.word	.LANCHOR5
 827 00b8 00000000 		.word	Tsk_UART_RX
 828 00bc 00000000 		.word	UART_RXHandle
 829              		.cfi_endproc
 830              	.LFE70:
 832              		.global	Queue_UART_TX_attributes
 833              		.comm	Queue_UART_TXHandle,4,4
 834              		.global	Queue_UART_RX_attributes
 835              		.comm	Queue_UART_RXHandle,4,4
 836              		.global	UART_RX_attributes
 837              		.comm	UART_RXHandle,4,4
 838              		.global	LED_attributes
 839              		.comm	LEDHandle,4,4
 840              		.global	UART_TX_attributes
 841              		.comm	UART_TXHandle,4,4
 842              		.global	ADC_LightSensor_attributes
 843              		.comm	ADC_LightSensorHandle,4,4
 844              		.comm	huart1,64,4
 845              		.comm	hspi1,88,4
 846              		.comm	hrtc,20,4
 847              		.comm	hadc1,48,4
 848              		.section	.rodata.ADC_LightSensor_attributes,"a",%progbits
 849              		.align	2
 850              		.set	.LANCHOR2,. + 0
 853              	ADC_LightSensor_attributes:
 854 0000 34000000 		.word	.LC5
 855 0004 00000000 		.space	16
 855      00000000 
 855      00000000 
 855      00000000 
 856 0014 00020000 		.word	512
 857 0018 18000000 		.word	24
 858 001c 00000000 		.space	8
 858      00000000 
 859              		.section	.rodata.LED_attributes,"a",%progbits
 860              		.align	2
 861              		.set	.LANCHOR4,. + 0
 864              	LED_attributes:
 865 0000 28000000 		.word	.LC3
 866 0004 00000000 		.space	16
 866      00000000 
 866      00000000 
 866      00000000 
 867 0014 80000000 		.word	128
 868 0018 08000000 		.word	8
 869 001c 00000000 		.space	8
ARM GAS  /tmp/cc5Olqt4.s 			page 28


 869      00000000 
 870              		.section	.rodata.Queue_UART_RX_attributes,"a",%progbits
 871              		.align	2
 872              		.set	.LANCHOR0,. + 0
 875              	Queue_UART_RX_attributes:
 876 0000 10000000 		.word	.LC1
 877 0004 00000000 		.space	20
 877      00000000 
 877      00000000 
 877      00000000 
 877      00000000 
 878              		.section	.rodata.Queue_UART_TX_attributes,"a",%progbits
 879              		.align	2
 880              		.set	.LANCHOR1,. + 0
 883              	Queue_UART_TX_attributes:
 884 0000 00000000 		.word	.LC0
 885 0004 00000000 		.space	20
 885      00000000 
 885      00000000 
 885      00000000 
 885      00000000 
 886              		.section	.rodata.UART_RX_attributes,"a",%progbits
 887              		.align	2
 888              		.set	.LANCHOR5,. + 0
 891              	UART_RX_attributes:
 892 0000 20000000 		.word	.LC2
 893 0004 00000000 		.space	16
 893      00000000 
 893      00000000 
 893      00000000 
 894 0014 80000000 		.word	128
 895 0018 08000000 		.word	8
 896 001c 00000000 		.space	8
 896      00000000 
 897              		.section	.rodata.UART_TX_attributes,"a",%progbits
 898              		.align	2
 899              		.set	.LANCHOR3,. + 0
 902              	UART_TX_attributes:
 903 0000 2C000000 		.word	.LC4
 904 0004 00000000 		.space	16
 904      00000000 
 904      00000000 
 904      00000000 
 905 0014 80000000 		.word	128
 906 0018 08000000 		.word	8
 907 001c 00000000 		.space	8
 907      00000000 
 908              		.section	.rodata.str1.4,"aMS",%progbits,1
 909              		.align	2
 910              	.LC0:
 911 0000 51756575 		.ascii	"Queue_UART_TX\000"
 911      655F5541 
 911      52545F54 
 911      5800
 912 000e 0000     		.space	2
 913              	.LC1:
 914 0010 51756575 		.ascii	"Queue_UART_RX\000"
ARM GAS  /tmp/cc5Olqt4.s 			page 29


 914      655F5541 
 914      52545F52 
 914      5800
 915 001e 0000     		.space	2
 916              	.LC2:
 917 0020 55415254 		.ascii	"UART_RX\000"
 917      5F525800 
 918              	.LC3:
 919 0028 4C454400 		.ascii	"LED\000"
 920              	.LC4:
 921 002c 55415254 		.ascii	"UART_TX\000"
 921      5F545800 
 922              	.LC5:
 923 0034 4144435F 		.ascii	"ADC_LightSensor\000"
 923      4C696768 
 923      7453656E 
 923      736F7200 
 924              		.text
 925              	.Letext0:
 926              		.file 2 "/usr/include/newlib/machine/_default_types.h"
 927              		.file 3 "/usr/include/newlib/sys/_stdint.h"
 928              		.file 4 "Drivers/CMSIS/Include/core_cm3.h"
 929              		.file 5 "Drivers/CMSIS/Device/ST/STM32F1xx/Include/system_stm32f1xx.h"
 930              		.file 6 "Drivers/CMSIS/Device/ST/STM32F1xx/Include/stm32f103xb.h"
 931              		.file 7 "Drivers/CMSIS/Device/ST/STM32F1xx/Include/stm32f1xx.h"
 932              		.file 8 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_def.h"
 933              		.file 9 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_rcc.h"
 934              		.file 10 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_rcc_ex.h"
 935              		.file 11 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_gpio.h"
 936              		.file 12 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_dma.h"
 937              		.file 13 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_adc.h"
 938              		.file 14 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_rtc.h"
 939              		.file 15 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_spi.h"
 940              		.file 16 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_tim.h"
 941              		.file 17 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_uart.h"
 942              		.file 18 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal.h"
 943              		.file 19 "Middlewares/Third_Party/FreeRTOS/Source/CMSIS_RTOS_V2/cmsis_os2.h"
 944              		.file 20 "Middlewares/Third_Party/FatFs/src/integer.h"
 945              		.file 21 "Middlewares/Third_Party/FatFs/src/ff.h"
 946              		.file 22 "Middlewares/Third_Party/FatFs/src/diskio.h"
 947              		.file 23 "Middlewares/Third_Party/FatFs/src/ff_gen_drv.h"
 948              		.file 24 "Inc/user_diskio.h"
 949              		.file 25 "Inc/fatfs.h"
 950              		.file 26 "/usr/include/newlib/sys/lock.h"
 951              		.file 27 "/usr/include/newlib/sys/_types.h"
 952              		.file 28 "/usr/lib/gcc/arm-none-eabi/6.3.1/include/stddef.h"
 953              		.file 29 "/usr/include/newlib/sys/reent.h"
 954              		.file 30 "Inc/UART.h"
 955              		.file 31 "Inc/ADC.h"
ARM GAS  /tmp/cc5Olqt4.s 			page 30


DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
     /tmp/cc5Olqt4.s:16     .text.Tsk_LED:0000000000000000 $t
     /tmp/cc5Olqt4.s:23     .text.Tsk_LED:0000000000000000 Tsk_LED
     /tmp/cc5Olqt4.s:39     .text.MX_GPIO_Init:0000000000000000 $t
     /tmp/cc5Olqt4.s:45     .text.MX_GPIO_Init:0000000000000000 MX_GPIO_Init
     /tmp/cc5Olqt4.s:130    .text.MX_GPIO_Init:0000000000000070 $d
     /tmp/cc5Olqt4.s:136    .text.Tsk_ADC_LightSensor:0000000000000000 $t
     /tmp/cc5Olqt4.s:143    .text.Tsk_ADC_LightSensor:0000000000000000 Tsk_ADC_LightSensor
     /tmp/cc5Olqt4.s:166    .text.Tsk_UART_TX:0000000000000000 $t
     /tmp/cc5Olqt4.s:173    .text.Tsk_UART_TX:0000000000000000 Tsk_UART_TX
     /tmp/cc5Olqt4.s:196    .text.Tsk_UART_RX:0000000000000000 $t
     /tmp/cc5Olqt4.s:203    .text.Tsk_UART_RX:0000000000000000 Tsk_UART_RX
     /tmp/cc5Olqt4.s:226    .text.HAL_TIM_PeriodElapsedCallback:0000000000000000 $t
     /tmp/cc5Olqt4.s:233    .text.HAL_TIM_PeriodElapsedCallback:0000000000000000 HAL_TIM_PeriodElapsedCallback
     /tmp/cc5Olqt4.s:263    .text.HAL_TIM_PeriodElapsedCallback:0000000000000014 $d
     /tmp/cc5Olqt4.s:268    .text.Error_Handler:0000000000000000 $t
     /tmp/cc5Olqt4.s:275    .text.Error_Handler:0000000000000000 Error_Handler
     /tmp/cc5Olqt4.s:289    .text.MX_USART1_UART_Init:0000000000000000 $t
     /tmp/cc5Olqt4.s:295    .text.MX_USART1_UART_Init:0000000000000000 MX_USART1_UART_Init
     /tmp/cc5Olqt4.s:340    .text.MX_USART1_UART_Init:000000000000002c $d
                            *COM*:0000000000000040 huart1
     /tmp/cc5Olqt4.s:346    .text.MX_ADC1_Init:0000000000000000 $t
     /tmp/cc5Olqt4.s:352    .text.MX_ADC1_Init:0000000000000000 MX_ADC1_Init
     /tmp/cc5Olqt4.s:426    .text.MX_ADC1_Init:000000000000004c $d
                            *COM*:0000000000000030 hadc1
     /tmp/cc5Olqt4.s:432    .text.MX_RTC_Init:0000000000000000 $t
     /tmp/cc5Olqt4.s:438    .text.MX_RTC_Init:0000000000000000 MX_RTC_Init
     /tmp/cc5Olqt4.s:529    .text.MX_RTC_Init:0000000000000078 $d
                            *COM*:0000000000000014 hrtc
     /tmp/cc5Olqt4.s:535    .text.MX_SPI1_Init:0000000000000000 $t
     /tmp/cc5Olqt4.s:541    .text.MX_SPI1_Init:0000000000000000 MX_SPI1_Init
     /tmp/cc5Olqt4.s:595    .text.MX_SPI1_Init:0000000000000038 $d
                            *COM*:0000000000000058 hspi1
     /tmp/cc5Olqt4.s:601    .text.SystemClock_Config:0000000000000000 $t
     /tmp/cc5Olqt4.s:608    .text.SystemClock_Config:0000000000000000 SystemClock_Config
     /tmp/cc5Olqt4.s:711    .text.main:0000000000000000 $t
     /tmp/cc5Olqt4.s:718    .text.main:0000000000000000 main
     /tmp/cc5Olqt4.s:813    .text.main:0000000000000080 $d
                            *COM*:0000000000000004 Queue_UART_RXHandle
                            *COM*:0000000000000004 Queue_UART_TXHandle
                            *COM*:0000000000000004 ADC_LightSensorHandle
                            *COM*:0000000000000004 UART_TXHandle
                            *COM*:0000000000000004 LEDHandle
                            *COM*:0000000000000004 UART_RXHandle
     /tmp/cc5Olqt4.s:883    .rodata.Queue_UART_TX_attributes:0000000000000000 Queue_UART_TX_attributes
     /tmp/cc5Olqt4.s:875    .rodata.Queue_UART_RX_attributes:0000000000000000 Queue_UART_RX_attributes
     /tmp/cc5Olqt4.s:891    .rodata.UART_RX_attributes:0000000000000000 UART_RX_attributes
     /tmp/cc5Olqt4.s:864    .rodata.LED_attributes:0000000000000000 LED_attributes
     /tmp/cc5Olqt4.s:902    .rodata.UART_TX_attributes:0000000000000000 UART_TX_attributes
     /tmp/cc5Olqt4.s:853    .rodata.ADC_LightSensor_attributes:0000000000000000 ADC_LightSensor_attributes
     /tmp/cc5Olqt4.s:849    .rodata.ADC_LightSensor_attributes:0000000000000000 $d
     /tmp/cc5Olqt4.s:860    .rodata.LED_attributes:0000000000000000 $d
     /tmp/cc5Olqt4.s:871    .rodata.Queue_UART_RX_attributes:0000000000000000 $d
     /tmp/cc5Olqt4.s:879    .rodata.Queue_UART_TX_attributes:0000000000000000 $d
     /tmp/cc5Olqt4.s:887    .rodata.UART_RX_attributes:0000000000000000 $d
     /tmp/cc5Olqt4.s:898    .rodata.UART_TX_attributes:0000000000000000 $d
ARM GAS  /tmp/cc5Olqt4.s 			page 31


     /tmp/cc5Olqt4.s:909    .rodata.str1.4:0000000000000000 $d
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
HAL_GPIO_WritePin
HAL_GPIO_Init
Thread_ADC_LightSensor
Thread_UART_TX
Thread_UART_RX
HAL_IncTick
HAL_UART_Init
HAL_ADC_Init
HAL_ADC_ConfigChannel
HAL_RTC_Init
HAL_RTC_SetTime
HAL_RTC_SetDate
HAL_SPI_Init
memset
HAL_RCC_OscConfig
HAL_RCC_ClockConfig
HAL_RCCEx_PeriphCLKConfig
HAL_Init
MX_FATFS_Init
osKernelInitialize
osMessageQueueNew
osThreadNew
osKernelStart
