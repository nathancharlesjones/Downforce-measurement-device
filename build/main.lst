ARM GAS  /tmp/cc4ILIM4.s 			page 1


   1              		.cpu cortex-m3
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 1
   9              		.eabi_attribute 34, 1
  10              		.eabi_attribute 18, 4
  11              		.file	"main.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.text.MX_GPIO_Init,"ax",%progbits
  16              		.align	1
  17              		.syntax unified
  18              		.thumb
  19              		.thumb_func
  20              		.fpu softvfp
  22              	MX_GPIO_Init:
  23              	.LFB76:
  24              		.file 1 "Src/main.c"
   1:Src/main.c    **** /* USER CODE BEGIN Header */
   2:Src/main.c    **** /**
   3:Src/main.c    ****   ******************************************************************************
   4:Src/main.c    ****   * @file           : main.c
   5:Src/main.c    ****   * @brief          : Main program body
   6:Src/main.c    ****   ******************************************************************************
   7:Src/main.c    ****   * @attention
   8:Src/main.c    ****   *
   9:Src/main.c    ****   * <h2><center>&copy; Copyright (c) 2020 STMicroelectronics.
  10:Src/main.c    ****   * All rights reserved.</center></h2>
  11:Src/main.c    ****   *
  12:Src/main.c    ****   * This software component is licensed by ST under Ultimate Liberty license
  13:Src/main.c    ****   * SLA0044, the "License"; You may not use this file except in compliance with
  14:Src/main.c    ****   * the License. You may obtain a copy of the License at:
  15:Src/main.c    ****   *                             www.st.com/SLA0044
  16:Src/main.c    ****   *
  17:Src/main.c    ****   ******************************************************************************
  18:Src/main.c    ****   */
  19:Src/main.c    **** /* USER CODE END Header */
  20:Src/main.c    **** 
  21:Src/main.c    **** /* Includes ------------------------------------------------------------------*/
  22:Src/main.c    **** #include "main.h"
  23:Src/main.c    **** #include "cmsis_os.h"
  24:Src/main.c    **** #include "fatfs.h"
  25:Src/main.c    **** 
  26:Src/main.c    **** /* Private includes ----------------------------------------------------------*/
  27:Src/main.c    **** /* USER CODE BEGIN Includes */
  28:Src/main.c    **** #include <stdio.h>
  29:Src/main.c    **** #include <string.h>
  30:Src/main.c    **** #include "sd_io.h"
  31:Src/main.c    **** #include "ADC.h"
  32:Src/main.c    **** #include "UART.h"
  33:Src/main.c    **** /* USER CODE END Includes */
  34:Src/main.c    **** 
ARM GAS  /tmp/cc4ILIM4.s 			page 2


  35:Src/main.c    **** /* Private typedef -----------------------------------------------------------*/
  36:Src/main.c    **** /* USER CODE BEGIN PTD */
  37:Src/main.c    **** 
  38:Src/main.c    **** /* USER CODE END PTD */
  39:Src/main.c    **** 
  40:Src/main.c    **** /* Private define ------------------------------------------------------------*/
  41:Src/main.c    **** /* USER CODE BEGIN PD */
  42:Src/main.c    **** 
  43:Src/main.c    **** /* USER CODE END PD */
  44:Src/main.c    **** 
  45:Src/main.c    **** /* Private macro -------------------------------------------------------------*/
  46:Src/main.c    **** /* USER CODE BEGIN PM */
  47:Src/main.c    **** 
  48:Src/main.c    **** /* USER CODE END PM */
  49:Src/main.c    **** 
  50:Src/main.c    **** /* Private variables ---------------------------------------------------------*/
  51:Src/main.c    **** ADC_HandleTypeDef hadc1;
  52:Src/main.c    **** 
  53:Src/main.c    **** RTC_HandleTypeDef hrtc;
  54:Src/main.c    **** 
  55:Src/main.c    **** SPI_HandleTypeDef hspi1;
  56:Src/main.c    **** 
  57:Src/main.c    **** UART_HandleTypeDef huart1;
  58:Src/main.c    **** 
  59:Src/main.c    **** /* Definitions for ADC_LightSensor */
  60:Src/main.c    **** osThreadId_t ADC_LightSensorHandle;
  61:Src/main.c    **** const osThreadAttr_t ADC_LightSensor_attributes = {
  62:Src/main.c    ****   .name = "ADC_LightSensor",
  63:Src/main.c    ****   .priority = (osPriority_t) osPriorityNormal,
  64:Src/main.c    ****   .stack_size = 512
  65:Src/main.c    **** };
  66:Src/main.c    **** /* Definitions for UART_TX */
  67:Src/main.c    **** osThreadId_t UART_TXHandle;
  68:Src/main.c    **** const osThreadAttr_t UART_TX_attributes = {
  69:Src/main.c    ****   .name = "UART_TX",
  70:Src/main.c    ****   .priority = (osPriority_t) osPriorityLow,
  71:Src/main.c    ****   .stack_size = 128
  72:Src/main.c    **** };
  73:Src/main.c    **** /* Definitions for LED */
  74:Src/main.c    **** osThreadId_t LEDHandle;
  75:Src/main.c    **** const osThreadAttr_t LED_attributes = {
  76:Src/main.c    ****   .name = "LED",
  77:Src/main.c    ****   .priority = (osPriority_t) osPriorityLow,
  78:Src/main.c    ****   .stack_size = 128
  79:Src/main.c    **** };
  80:Src/main.c    **** /* Definitions for UART_RX */
  81:Src/main.c    **** osThreadId_t UART_RXHandle;
  82:Src/main.c    **** const osThreadAttr_t UART_RX_attributes = {
  83:Src/main.c    ****   .name = "UART_RX",
  84:Src/main.c    ****   .priority = (osPriority_t) osPriorityLow,
  85:Src/main.c    ****   .stack_size = 128
  86:Src/main.c    **** };
  87:Src/main.c    **** /* Definitions for Queue_UART_RX */
  88:Src/main.c    **** osMessageQueueId_t Queue_UART_RXHandle;
  89:Src/main.c    **** const osMessageQueueAttr_t Queue_UART_RX_attributes = {
  90:Src/main.c    ****   .name = "Queue_UART_RX"
  91:Src/main.c    **** };
ARM GAS  /tmp/cc4ILIM4.s 			page 3


  92:Src/main.c    **** /* Definitions for Queue_UART_TX */
  93:Src/main.c    **** osMessageQueueId_t Queue_UART_TXHandle;
  94:Src/main.c    **** const osMessageQueueAttr_t Queue_UART_TX_attributes = {
  95:Src/main.c    ****   .name = "Queue_UART_TX"
  96:Src/main.c    **** };
  97:Src/main.c    **** /* USER CODE BEGIN PV */
  98:Src/main.c    **** 
  99:Src/main.c    **** /* USER CODE END PV */
 100:Src/main.c    **** 
 101:Src/main.c    **** /* Private function prototypes -----------------------------------------------*/
 102:Src/main.c    **** void SystemClock_Config(void);
 103:Src/main.c    **** static void MX_GPIO_Init(void);
 104:Src/main.c    **** static void MX_USART1_UART_Init(void);
 105:Src/main.c    **** static void MX_ADC1_Init(void);
 106:Src/main.c    **** static void MX_RTC_Init(void);
 107:Src/main.c    **** static void MX_SPI1_Init(void);
 108:Src/main.c    **** void Tsk_ADC_LightSensor(void *argument);
 109:Src/main.c    **** void Tsk_UART_TX(void *argument);
 110:Src/main.c    **** void Tsk_LED(void *argument);
 111:Src/main.c    **** void Tsk_UART_RX(void *argument);
 112:Src/main.c    **** 
 113:Src/main.c    **** /* USER CODE BEGIN PFP */
 114:Src/main.c    **** 
 115:Src/main.c    **** /* USER CODE END PFP */
 116:Src/main.c    **** 
 117:Src/main.c    **** /* Private user code ---------------------------------------------------------*/
 118:Src/main.c    **** /* USER CODE BEGIN 0 */
 119:Src/main.c    **** 
 120:Src/main.c    **** /* USER CODE END 0 */
 121:Src/main.c    **** 
 122:Src/main.c    **** /**
 123:Src/main.c    ****   * @brief  The application entry point.
 124:Src/main.c    ****   * @retval int
 125:Src/main.c    ****   */
 126:Src/main.c    **** int main(void)
 127:Src/main.c    **** {
 128:Src/main.c    ****   /* USER CODE BEGIN 1 */
 129:Src/main.c    ****   SD_DEV dev[1];
 130:Src/main.c    ****   char write_buffer[512] = "Test message.\n";
 131:Src/main.c    ****   char read_buffer[512] = {0};
 132:Src/main.c    ****   /* USER CODE END 1 */
 133:Src/main.c    ****   
 134:Src/main.c    **** 
 135:Src/main.c    ****   /* MCU Configuration--------------------------------------------------------*/
 136:Src/main.c    **** 
 137:Src/main.c    ****   /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
 138:Src/main.c    ****   HAL_Init();
 139:Src/main.c    **** 
 140:Src/main.c    ****   /* USER CODE BEGIN Init */
 141:Src/main.c    ****   
 142:Src/main.c    ****   /* USER CODE END Init */
 143:Src/main.c    **** 
 144:Src/main.c    ****   /* Configure the system clock */
 145:Src/main.c    ****   SystemClock_Config();
 146:Src/main.c    **** 
 147:Src/main.c    ****   /* USER CODE BEGIN SysInit */
 148:Src/main.c    ****   
ARM GAS  /tmp/cc4ILIM4.s 			page 4


 149:Src/main.c    ****   /* USER CODE END SysInit */
 150:Src/main.c    **** 
 151:Src/main.c    ****   /* Initialize all configured peripherals */
 152:Src/main.c    ****   MX_GPIO_Init();
 153:Src/main.c    ****   MX_USART1_UART_Init();
 154:Src/main.c    ****   MX_ADC1_Init();
 155:Src/main.c    ****   MX_RTC_Init();
 156:Src/main.c    ****   MX_SPI1_Init();
 157:Src/main.c    ****   MX_FATFS_Init();
 158:Src/main.c    ****   /* USER CODE BEGIN 2 */
 159:Src/main.c    ****   if ( SD_Init(dev) != SD_OK )
 160:Src/main.c    ****   {
 161:Src/main.c    ****       Error_Handler();
 162:Src/main.c    ****   }
 163:Src/main.c    ****   if ( SD_Write(dev, (void *)write_buffer, 0) != SD_OK )
 164:Src/main.c    ****   {
 165:Src/main.c    ****       Error_Handler();
 166:Src/main.c    ****   }
 167:Src/main.c    ****   if ( SD_Read(dev, (void *)read_buffer, 0, 0, 512) != SD_OK )
 168:Src/main.c    ****   {
 169:Src/main.c    ****       Error_Handler();
 170:Src/main.c    ****   }
 171:Src/main.c    ****   uint8_t read_buffer_size = (uint8_t)strlen(read_buffer);
 172:Src/main.c    ****   HAL_UART_Transmit(&huart1, (uint8_t *)read_buffer, read_buffer_size, HAL_MAX_DELAY);
 173:Src/main.c    ****   while (1);
 174:Src/main.c    ****   /* USER CODE END 2 */
 175:Src/main.c    ****   /* Init scheduler */
 176:Src/main.c    ****   osKernelInitialize();
 177:Src/main.c    **** 
 178:Src/main.c    ****   /* USER CODE BEGIN RTOS_MUTEX */
 179:Src/main.c    ****   /* add mutexes, ... */
 180:Src/main.c    ****   /* USER CODE END RTOS_MUTEX */
 181:Src/main.c    **** 
 182:Src/main.c    ****   /* USER CODE BEGIN RTOS_SEMAPHORES */
 183:Src/main.c    ****   /* add semaphores, ... */
 184:Src/main.c    ****   /* USER CODE END RTOS_SEMAPHORES */
 185:Src/main.c    **** 
 186:Src/main.c    ****   /* USER CODE BEGIN RTOS_TIMERS */
 187:Src/main.c    ****   /* start timers, add new ones, ... */
 188:Src/main.c    ****   /* USER CODE END RTOS_TIMERS */
 189:Src/main.c    **** 
 190:Src/main.c    ****   /* Create the queue(s) */
 191:Src/main.c    ****   /* creation of Queue_UART_RX */
 192:Src/main.c    ****   Queue_UART_RXHandle = osMessageQueueNew (128, sizeof(char), &Queue_UART_RX_attributes);
 193:Src/main.c    **** 
 194:Src/main.c    ****   /* creation of Queue_UART_TX */
 195:Src/main.c    ****   Queue_UART_TXHandle = osMessageQueueNew (128, sizeof(char), &Queue_UART_TX_attributes);
 196:Src/main.c    **** 
 197:Src/main.c    ****   /* USER CODE BEGIN RTOS_QUEUES */
 198:Src/main.c    ****   /* add queues, ... */
 199:Src/main.c    ****   /* USER CODE END RTOS_QUEUES */
 200:Src/main.c    **** 
 201:Src/main.c    ****   /* Create the thread(s) */
 202:Src/main.c    ****   /* creation of ADC_LightSensor */
 203:Src/main.c    ****   ADC_LightSensorHandle = osThreadNew(Tsk_ADC_LightSensor, NULL, &ADC_LightSensor_attributes);
 204:Src/main.c    **** 
 205:Src/main.c    ****   /* creation of UART_TX */
ARM GAS  /tmp/cc4ILIM4.s 			page 5


 206:Src/main.c    ****   UART_TXHandle = osThreadNew(Tsk_UART_TX, NULL, &UART_TX_attributes);
 207:Src/main.c    **** 
 208:Src/main.c    ****   /* creation of LED */
 209:Src/main.c    ****   LEDHandle = osThreadNew(Tsk_LED, NULL, &LED_attributes);
 210:Src/main.c    **** 
 211:Src/main.c    ****   /* creation of UART_RX */
 212:Src/main.c    ****   UART_RXHandle = osThreadNew(Tsk_UART_RX, NULL, &UART_RX_attributes);
 213:Src/main.c    **** 
 214:Src/main.c    ****   /* USER CODE BEGIN RTOS_THREADS */
 215:Src/main.c    ****   /* add threads, ... */
 216:Src/main.c    ****   /* USER CODE END RTOS_THREADS */
 217:Src/main.c    **** 
 218:Src/main.c    ****   /* Start scheduler */
 219:Src/main.c    ****   osKernelStart();
 220:Src/main.c    ****  
 221:Src/main.c    ****   /* We should never get here as control is now taken by the scheduler */
 222:Src/main.c    **** 
 223:Src/main.c    ****   /* Infinite loop */
 224:Src/main.c    ****   /* USER CODE BEGIN WHILE */
 225:Src/main.c    ****   while (1)
 226:Src/main.c    ****   {
 227:Src/main.c    ****     /* USER CODE END WHILE */
 228:Src/main.c    **** 
 229:Src/main.c    ****     /* USER CODE BEGIN 3 */
 230:Src/main.c    ****   }
 231:Src/main.c    ****   /* USER CODE END 3 */
 232:Src/main.c    **** }
 233:Src/main.c    **** 
 234:Src/main.c    **** /**
 235:Src/main.c    ****   * @brief System Clock Configuration
 236:Src/main.c    ****   * @retval None
 237:Src/main.c    ****   */
 238:Src/main.c    **** void SystemClock_Config(void)
 239:Src/main.c    **** {
 240:Src/main.c    ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 241:Src/main.c    ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 242:Src/main.c    ****   RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 243:Src/main.c    **** 
 244:Src/main.c    ****   /** Initializes the CPU, AHB and APB busses clocks 
 245:Src/main.c    ****   */
 246:Src/main.c    ****   RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 247:Src/main.c    ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 248:Src/main.c    ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 249:Src/main.c    ****   RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 250:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 251:Src/main.c    ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 252:Src/main.c    ****   {
 253:Src/main.c    ****     Error_Handler();
 254:Src/main.c    ****   }
 255:Src/main.c    ****   /** Initializes the CPU, AHB and APB busses clocks 
 256:Src/main.c    ****   */
 257:Src/main.c    ****   RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 258:Src/main.c    ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 259:Src/main.c    ****   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 260:Src/main.c    ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 261:Src/main.c    ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 262:Src/main.c    ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
ARM GAS  /tmp/cc4ILIM4.s 			page 6


 263:Src/main.c    **** 
 264:Src/main.c    ****   if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 265:Src/main.c    ****   {
 266:Src/main.c    ****     Error_Handler();
 267:Src/main.c    ****   }
 268:Src/main.c    ****   PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_ADC;
 269:Src/main.c    ****   PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 270:Src/main.c    ****   PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 271:Src/main.c    ****   if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 272:Src/main.c    ****   {
 273:Src/main.c    ****     Error_Handler();
 274:Src/main.c    ****   }
 275:Src/main.c    **** }
 276:Src/main.c    **** 
 277:Src/main.c    **** /**
 278:Src/main.c    ****   * @brief ADC1 Initialization Function
 279:Src/main.c    ****   * @param None
 280:Src/main.c    ****   * @retval None
 281:Src/main.c    ****   */
 282:Src/main.c    **** static void MX_ADC1_Init(void)
 283:Src/main.c    **** {
 284:Src/main.c    **** 
 285:Src/main.c    ****   /* USER CODE BEGIN ADC1_Init 0 */
 286:Src/main.c    **** 
 287:Src/main.c    ****   /* USER CODE END ADC1_Init 0 */
 288:Src/main.c    **** 
 289:Src/main.c    ****   ADC_ChannelConfTypeDef sConfig = {0};
 290:Src/main.c    **** 
 291:Src/main.c    ****   /* USER CODE BEGIN ADC1_Init 1 */
 292:Src/main.c    **** 
 293:Src/main.c    ****   /* USER CODE END ADC1_Init 1 */
 294:Src/main.c    ****   /** Common config 
 295:Src/main.c    ****   */
 296:Src/main.c    ****   hadc1.Instance = ADC1;
 297:Src/main.c    ****   hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 298:Src/main.c    ****   hadc1.Init.ContinuousConvMode = DISABLE;
 299:Src/main.c    ****   hadc1.Init.DiscontinuousConvMode = DISABLE;
 300:Src/main.c    ****   hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 301:Src/main.c    ****   hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 302:Src/main.c    ****   hadc1.Init.NbrOfConversion = 1;
 303:Src/main.c    ****   if (HAL_ADC_Init(&hadc1) != HAL_OK)
 304:Src/main.c    ****   {
 305:Src/main.c    ****     Error_Handler();
 306:Src/main.c    ****   }
 307:Src/main.c    ****   /** Configure Regular Channel 
 308:Src/main.c    ****   */
 309:Src/main.c    ****   sConfig.Channel = ADC_CHANNEL_1;
 310:Src/main.c    ****   sConfig.Rank = ADC_REGULAR_RANK_1;
 311:Src/main.c    ****   sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 312:Src/main.c    ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 313:Src/main.c    ****   {
 314:Src/main.c    ****     Error_Handler();
 315:Src/main.c    ****   }
 316:Src/main.c    ****   /* USER CODE BEGIN ADC1_Init 2 */
 317:Src/main.c    **** 
 318:Src/main.c    ****   /* USER CODE END ADC1_Init 2 */
 319:Src/main.c    **** 
ARM GAS  /tmp/cc4ILIM4.s 			page 7


 320:Src/main.c    **** }
 321:Src/main.c    **** 
 322:Src/main.c    **** /**
 323:Src/main.c    ****   * @brief RTC Initialization Function
 324:Src/main.c    ****   * @param None
 325:Src/main.c    ****   * @retval None
 326:Src/main.c    ****   */
 327:Src/main.c    **** static void MX_RTC_Init(void)
 328:Src/main.c    **** {
 329:Src/main.c    **** 
 330:Src/main.c    ****   /* USER CODE BEGIN RTC_Init 0 */
 331:Src/main.c    **** 
 332:Src/main.c    ****   /* USER CODE END RTC_Init 0 */
 333:Src/main.c    **** 
 334:Src/main.c    ****   RTC_TimeTypeDef sTime = {0};
 335:Src/main.c    ****   RTC_DateTypeDef DateToUpdate = {0};
 336:Src/main.c    **** 
 337:Src/main.c    ****   /* USER CODE BEGIN RTC_Init 1 */
 338:Src/main.c    **** 
 339:Src/main.c    ****   /* USER CODE END RTC_Init 1 */
 340:Src/main.c    ****   /** Initialize RTC Only 
 341:Src/main.c    ****   */
 342:Src/main.c    ****   hrtc.Instance = RTC;
 343:Src/main.c    ****   hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 344:Src/main.c    ****   hrtc.Init.OutPut = RTC_OUTPUTSOURCE_NONE;
 345:Src/main.c    ****   if (HAL_RTC_Init(&hrtc) != HAL_OK)
 346:Src/main.c    ****   {
 347:Src/main.c    ****     Error_Handler();
 348:Src/main.c    ****   }
 349:Src/main.c    **** 
 350:Src/main.c    ****   /* USER CODE BEGIN Check_RTC_BKUP */
 351:Src/main.c    ****     
 352:Src/main.c    ****   /* USER CODE END Check_RTC_BKUP */
 353:Src/main.c    **** 
 354:Src/main.c    ****   /** Initialize RTC and set the Time and Date 
 355:Src/main.c    ****   */
 356:Src/main.c    ****   sTime.Hours = 0x17;
 357:Src/main.c    ****   sTime.Minutes = 0x0;
 358:Src/main.c    ****   sTime.Seconds = 0x30;
 359:Src/main.c    **** 
 360:Src/main.c    ****   if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 361:Src/main.c    ****   {
 362:Src/main.c    ****     Error_Handler();
 363:Src/main.c    ****   }
 364:Src/main.c    ****   DateToUpdate.WeekDay = RTC_WEEKDAY_SATURDAY;
 365:Src/main.c    ****   DateToUpdate.Month = RTC_MONTH_FEBRUARY;
 366:Src/main.c    ****   DateToUpdate.Date = 0x29;
 367:Src/main.c    ****   DateToUpdate.Year = 0x20;
 368:Src/main.c    **** 
 369:Src/main.c    ****   if (HAL_RTC_SetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BCD) != HAL_OK)
 370:Src/main.c    ****   {
 371:Src/main.c    ****     Error_Handler();
 372:Src/main.c    ****   }
 373:Src/main.c    ****   /* USER CODE BEGIN RTC_Init 2 */
 374:Src/main.c    **** 
 375:Src/main.c    ****   /* USER CODE END RTC_Init 2 */
 376:Src/main.c    **** 
ARM GAS  /tmp/cc4ILIM4.s 			page 8


 377:Src/main.c    **** }
 378:Src/main.c    **** 
 379:Src/main.c    **** /**
 380:Src/main.c    ****   * @brief SPI1 Initialization Function
 381:Src/main.c    ****   * @param None
 382:Src/main.c    ****   * @retval None
 383:Src/main.c    ****   */
 384:Src/main.c    **** static void MX_SPI1_Init(void)
 385:Src/main.c    **** {
 386:Src/main.c    **** 
 387:Src/main.c    ****   /* USER CODE BEGIN SPI1_Init 0 */
 388:Src/main.c    **** 
 389:Src/main.c    ****   /* USER CODE END SPI1_Init 0 */
 390:Src/main.c    **** 
 391:Src/main.c    ****   /* USER CODE BEGIN SPI1_Init 1 */
 392:Src/main.c    **** 
 393:Src/main.c    ****   /* USER CODE END SPI1_Init 1 */
 394:Src/main.c    ****   /* SPI1 parameter configuration*/
 395:Src/main.c    ****   hspi1.Instance = SPI1;
 396:Src/main.c    ****   hspi1.Init.Mode = SPI_MODE_MASTER;
 397:Src/main.c    ****   hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 398:Src/main.c    ****   hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 399:Src/main.c    ****   hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 400:Src/main.c    ****   hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 401:Src/main.c    ****   hspi1.Init.NSS = SPI_NSS_SOFT;
 402:Src/main.c    ****   hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 403:Src/main.c    ****   hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 404:Src/main.c    ****   hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 405:Src/main.c    ****   hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 406:Src/main.c    ****   hspi1.Init.CRCPolynomial = 10;
 407:Src/main.c    ****   if (HAL_SPI_Init(&hspi1) != HAL_OK)
 408:Src/main.c    ****   {
 409:Src/main.c    ****     Error_Handler();
 410:Src/main.c    ****   }
 411:Src/main.c    ****   /* USER CODE BEGIN SPI1_Init 2 */
 412:Src/main.c    **** 
 413:Src/main.c    ****   /* USER CODE END SPI1_Init 2 */
 414:Src/main.c    **** 
 415:Src/main.c    **** }
 416:Src/main.c    **** 
 417:Src/main.c    **** /**
 418:Src/main.c    ****   * @brief USART1 Initialization Function
 419:Src/main.c    ****   * @param None
 420:Src/main.c    ****   * @retval None
 421:Src/main.c    ****   */
 422:Src/main.c    **** static void MX_USART1_UART_Init(void)
 423:Src/main.c    **** {
 424:Src/main.c    **** 
 425:Src/main.c    ****   /* USER CODE BEGIN USART1_Init 0 */
 426:Src/main.c    **** 
 427:Src/main.c    ****   /* USER CODE END USART1_Init 0 */
 428:Src/main.c    **** 
 429:Src/main.c    ****   /* USER CODE BEGIN USART1_Init 1 */
 430:Src/main.c    **** 
 431:Src/main.c    ****   /* USER CODE END USART1_Init 1 */
 432:Src/main.c    ****   huart1.Instance = USART1;
 433:Src/main.c    ****   huart1.Init.BaudRate = 115200;
ARM GAS  /tmp/cc4ILIM4.s 			page 9


 434:Src/main.c    ****   huart1.Init.WordLength = UART_WORDLENGTH_8B;
 435:Src/main.c    ****   huart1.Init.StopBits = UART_STOPBITS_1;
 436:Src/main.c    ****   huart1.Init.Parity = UART_PARITY_NONE;
 437:Src/main.c    ****   huart1.Init.Mode = UART_MODE_TX_RX;
 438:Src/main.c    ****   huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 439:Src/main.c    ****   huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 440:Src/main.c    ****   if (HAL_UART_Init(&huart1) != HAL_OK)
 441:Src/main.c    ****   {
 442:Src/main.c    ****     Error_Handler();
 443:Src/main.c    ****   }
 444:Src/main.c    ****   /* USER CODE BEGIN USART1_Init 2 */
 445:Src/main.c    ****   
 446:Src/main.c    ****   /* USER CODE END USART1_Init 2 */
 447:Src/main.c    **** 
 448:Src/main.c    **** }
 449:Src/main.c    **** 
 450:Src/main.c    **** /**
 451:Src/main.c    ****   * @brief GPIO Initialization Function
 452:Src/main.c    ****   * @param None
 453:Src/main.c    ****   * @retval None
 454:Src/main.c    ****   */
 455:Src/main.c    **** static void MX_GPIO_Init(void)
 456:Src/main.c    **** {
  25              		.loc 1 456 0
  26              		.cfi_startproc
  27              		@ args = 0, pretend = 0, frame = 32
  28              		@ frame_needed = 0, uses_anonymous_args = 0
  29 0000 F0B5     		push	{r4, r5, r6, r7, lr}
  30              	.LCFI0:
  31              		.cfi_def_cfa_offset 20
  32              		.cfi_offset 4, -20
  33              		.cfi_offset 5, -16
  34              		.cfi_offset 6, -12
  35              		.cfi_offset 7, -8
  36              		.cfi_offset 14, -4
  37 0002 89B0     		sub	sp, sp, #36
  38              	.LCFI1:
  39              		.cfi_def_cfa_offset 56
 457:Src/main.c    ****   GPIO_InitTypeDef GPIO_InitStruct = {0};
  40              		.loc 1 457 0
  41 0004 0024     		movs	r4, #0
  42 0006 0494     		str	r4, [sp, #16]
  43 0008 0594     		str	r4, [sp, #20]
  44 000a 0694     		str	r4, [sp, #24]
  45 000c 0794     		str	r4, [sp, #28]
  46              	.LBB2:
 458:Src/main.c    **** 
 459:Src/main.c    ****   /* GPIO Ports Clock Enable */
 460:Src/main.c    ****   __HAL_RCC_GPIOC_CLK_ENABLE();
  47              		.loc 1 460 0
  48 000e 204B     		ldr	r3, .L3
  49 0010 9A69     		ldr	r2, [r3, #24]
  50 0012 42F01002 		orr	r2, r2, #16
  51 0016 9A61     		str	r2, [r3, #24]
  52 0018 9A69     		ldr	r2, [r3, #24]
  53 001a 02F01002 		and	r2, r2, #16
  54 001e 0192     		str	r2, [sp, #4]
ARM GAS  /tmp/cc4ILIM4.s 			page 10


  55 0020 019A     		ldr	r2, [sp, #4]
  56              	.LBE2:
  57              	.LBB3:
 461:Src/main.c    ****   __HAL_RCC_GPIOD_CLK_ENABLE();
  58              		.loc 1 461 0
  59 0022 9A69     		ldr	r2, [r3, #24]
  60 0024 42F02002 		orr	r2, r2, #32
  61 0028 9A61     		str	r2, [r3, #24]
  62 002a 9A69     		ldr	r2, [r3, #24]
  63 002c 02F02002 		and	r2, r2, #32
  64 0030 0292     		str	r2, [sp, #8]
  65 0032 029A     		ldr	r2, [sp, #8]
  66              	.LBE3:
  67              	.LBB4:
 462:Src/main.c    ****   __HAL_RCC_GPIOA_CLK_ENABLE();
  68              		.loc 1 462 0
  69 0034 9A69     		ldr	r2, [r3, #24]
  70 0036 42F00402 		orr	r2, r2, #4
  71 003a 9A61     		str	r2, [r3, #24]
  72 003c 9B69     		ldr	r3, [r3, #24]
  73 003e 03F00403 		and	r3, r3, #4
  74 0042 0393     		str	r3, [sp, #12]
  75 0044 039B     		ldr	r3, [sp, #12]
  76              	.LBE4:
 463:Src/main.c    **** 
 464:Src/main.c    ****   /*Configure GPIO pin Output Level */
 465:Src/main.c    ****   HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
  77              		.loc 1 465 0
  78 0046 134F     		ldr	r7, .L3+4
  79 0048 2246     		mov	r2, r4
  80 004a 4FF40051 		mov	r1, #8192
  81 004e 3846     		mov	r0, r7
  82 0050 FFF7FEFF 		bl	HAL_GPIO_WritePin
  83              	.LVL0:
 466:Src/main.c    **** 
 467:Src/main.c    ****   /*Configure GPIO pin Output Level */
 468:Src/main.c    ****   HAL_GPIO_WritePin(SD_NSS_GPIO_Port, SD_NSS_Pin, GPIO_PIN_RESET);
  84              		.loc 1 468 0
  85 0054 104D     		ldr	r5, .L3+8
  86 0056 2246     		mov	r2, r4
  87 0058 1021     		movs	r1, #16
  88 005a 2846     		mov	r0, r5
  89 005c FFF7FEFF 		bl	HAL_GPIO_WritePin
  90              	.LVL1:
 469:Src/main.c    **** 
 470:Src/main.c    ****   /*Configure GPIO pin : LED_Pin */
 471:Src/main.c    ****   GPIO_InitStruct.Pin = LED_Pin;
  91              		.loc 1 471 0
  92 0060 4FF40053 		mov	r3, #8192
  93 0064 0493     		str	r3, [sp, #16]
 472:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  94              		.loc 1 472 0
  95 0066 0126     		movs	r6, #1
  96 0068 0596     		str	r6, [sp, #20]
 473:Src/main.c    ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
  97              		.loc 1 473 0
  98 006a 0694     		str	r4, [sp, #24]
ARM GAS  /tmp/cc4ILIM4.s 			page 11


 474:Src/main.c    ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  99              		.loc 1 474 0
 100 006c 0223     		movs	r3, #2
 101 006e 0793     		str	r3, [sp, #28]
 475:Src/main.c    ****   HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 102              		.loc 1 475 0
 103 0070 04A9     		add	r1, sp, #16
 104 0072 3846     		mov	r0, r7
 105 0074 FFF7FEFF 		bl	HAL_GPIO_Init
 106              	.LVL2:
 476:Src/main.c    **** 
 477:Src/main.c    ****   /*Configure GPIO pin : SD_NSS_Pin */
 478:Src/main.c    ****   GPIO_InitStruct.Pin = SD_NSS_Pin;
 107              		.loc 1 478 0
 108 0078 1023     		movs	r3, #16
 109 007a 0493     		str	r3, [sp, #16]
 479:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 110              		.loc 1 479 0
 111 007c 0596     		str	r6, [sp, #20]
 480:Src/main.c    ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 112              		.loc 1 480 0
 113 007e 0694     		str	r4, [sp, #24]
 481:Src/main.c    ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 114              		.loc 1 481 0
 115 0080 0323     		movs	r3, #3
 116 0082 0793     		str	r3, [sp, #28]
 482:Src/main.c    ****   HAL_GPIO_Init(SD_NSS_GPIO_Port, &GPIO_InitStruct);
 117              		.loc 1 482 0
 118 0084 04A9     		add	r1, sp, #16
 119 0086 2846     		mov	r0, r5
 120 0088 FFF7FEFF 		bl	HAL_GPIO_Init
 121              	.LVL3:
 483:Src/main.c    **** 
 484:Src/main.c    **** }
 122              		.loc 1 484 0
 123 008c 09B0     		add	sp, sp, #36
 124              	.LCFI2:
 125              		.cfi_def_cfa_offset 20
 126              		@ sp needed
 127 008e F0BD     		pop	{r4, r5, r6, r7, pc}
 128              	.L4:
 129              		.align	2
 130              	.L3:
 131 0090 00100240 		.word	1073876992
 132 0094 00100140 		.word	1073811456
 133 0098 00080140 		.word	1073809408
 134              		.cfi_endproc
 135              	.LFE76:
 137              		.section	.text.Tsk_ADC_LightSensor,"ax",%progbits
 138              		.align	1
 139              		.global	Tsk_ADC_LightSensor
 140              		.syntax unified
 141              		.thumb
 142              		.thumb_func
 143              		.fpu softvfp
 145              	Tsk_ADC_LightSensor:
 146              	.LFB77:
ARM GAS  /tmp/cc4ILIM4.s 			page 12


 485:Src/main.c    **** 
 486:Src/main.c    **** /* USER CODE BEGIN 4 */
 487:Src/main.c    **** 
 488:Src/main.c    **** /* USER CODE END 4 */
 489:Src/main.c    **** 
 490:Src/main.c    **** /* USER CODE BEGIN Header_Tsk_ADC_LightSensor */
 491:Src/main.c    **** /**
 492:Src/main.c    ****   * @brief  Function implementing the ADC_LightSensor thread.
 493:Src/main.c    ****   * @param  argument: Not used 
 494:Src/main.c    ****   * @retval None
 495:Src/main.c    ****   */
 496:Src/main.c    **** /* USER CODE END Header_Tsk_ADC_LightSensor */
 497:Src/main.c    **** void Tsk_ADC_LightSensor(void *argument)
 498:Src/main.c    **** {
 147              		.loc 1 498 0
 148              		.cfi_startproc
 149              		@ Volatile: function does not return.
 150              		@ args = 0, pretend = 0, frame = 0
 151              		@ frame_needed = 0, uses_anonymous_args = 0
 152              	.LVL4:
 153 0000 08B5     		push	{r3, lr}
 154              	.LCFI3:
 155              		.cfi_def_cfa_offset 8
 156              		.cfi_offset 3, -8
 157              		.cfi_offset 14, -4
 158              	.LVL5:
 159              	.L6:
 499:Src/main.c    ****   /* USER CODE BEGIN 5 */
 500:Src/main.c    **** 
 501:Src/main.c    ****   /* Infinite loop */
 502:Src/main.c    ****   for(;;)
 503:Src/main.c    ****   {
 504:Src/main.c    ****     Thread_ADC_LightSensor();
 160              		.loc 1 504 0 discriminator 1
 161 0002 FFF7FEFF 		bl	Thread_ADC_LightSensor
 162              	.LVL6:
 163 0006 FCE7     		b	.L6
 164              		.cfi_endproc
 165              	.LFE77:
 167              		.section	.text.Tsk_UART_TX,"ax",%progbits
 168              		.align	1
 169              		.global	Tsk_UART_TX
 170              		.syntax unified
 171              		.thumb
 172              		.thumb_func
 173              		.fpu softvfp
 175              	Tsk_UART_TX:
 176              	.LFB78:
 505:Src/main.c    ****   }
 506:Src/main.c    ****   /* USER CODE END 5 */ 
 507:Src/main.c    **** }
 508:Src/main.c    **** 
 509:Src/main.c    **** /* USER CODE BEGIN Header_Tsk_UART_TX */
 510:Src/main.c    **** /**
 511:Src/main.c    **** * @brief Function implementing the UART_TX thread.
 512:Src/main.c    **** * @param argument: Not used
 513:Src/main.c    **** * @retval None
ARM GAS  /tmp/cc4ILIM4.s 			page 13


 514:Src/main.c    **** */
 515:Src/main.c    **** /* USER CODE END Header_Tsk_UART_TX */
 516:Src/main.c    **** void Tsk_UART_TX(void *argument)
 517:Src/main.c    **** {
 177              		.loc 1 517 0
 178              		.cfi_startproc
 179              		@ Volatile: function does not return.
 180              		@ args = 0, pretend = 0, frame = 0
 181              		@ frame_needed = 0, uses_anonymous_args = 0
 182              	.LVL7:
 183 0000 08B5     		push	{r3, lr}
 184              	.LCFI4:
 185              		.cfi_def_cfa_offset 8
 186              		.cfi_offset 3, -8
 187              		.cfi_offset 14, -4
 188              	.LVL8:
 189              	.L9:
 518:Src/main.c    ****   /* USER CODE BEGIN Tsk_UART_TX */
 519:Src/main.c    ****   
 520:Src/main.c    ****   /* Infinite loop */
 521:Src/main.c    ****   for(;;)
 522:Src/main.c    ****   {
 523:Src/main.c    ****       Thread_UART_TX();
 190              		.loc 1 523 0 discriminator 1
 191 0002 FFF7FEFF 		bl	Thread_UART_TX
 192              	.LVL9:
 193 0006 FCE7     		b	.L9
 194              		.cfi_endproc
 195              	.LFE78:
 197              		.section	.text.Tsk_LED,"ax",%progbits
 198              		.align	1
 199              		.global	Tsk_LED
 200              		.syntax unified
 201              		.thumb
 202              		.thumb_func
 203              		.fpu softvfp
 205              	Tsk_LED:
 206              	.LFB79:
 524:Src/main.c    ****   }
 525:Src/main.c    ****   /* USER CODE END Tsk_UART_TX */
 526:Src/main.c    **** }
 527:Src/main.c    **** 
 528:Src/main.c    **** /* USER CODE BEGIN Header_Tsk_LED */
 529:Src/main.c    **** /**
 530:Src/main.c    **** * @brief Function implementing the LED thread.
 531:Src/main.c    **** * @param argument: Not used
 532:Src/main.c    **** * @retval None
 533:Src/main.c    **** */
 534:Src/main.c    **** /* USER CODE END Header_Tsk_LED */
 535:Src/main.c    **** void Tsk_LED(void *argument)
 536:Src/main.c    **** {
 207              		.loc 1 536 0
 208              		.cfi_startproc
 209              		@ Volatile: function does not return.
 210              		@ args = 0, pretend = 0, frame = 0
 211              		@ frame_needed = 0, uses_anonymous_args = 0
 212              		@ link register save eliminated.
ARM GAS  /tmp/cc4ILIM4.s 			page 14


 213              	.LVL10:
 214              	.L12:
 215 0000 FEE7     		b	.L12
 216              		.cfi_endproc
 217              	.LFE79:
 219              		.section	.text.Tsk_UART_RX,"ax",%progbits
 220              		.align	1
 221              		.global	Tsk_UART_RX
 222              		.syntax unified
 223              		.thumb
 224              		.thumb_func
 225              		.fpu softvfp
 227              	Tsk_UART_RX:
 228              	.LFB80:
 537:Src/main.c    ****   /* USER CODE BEGIN Tsk_LED */
 538:Src/main.c    ****   //volatile uint32_t * GPIOC_BSRR = (uint32_t *) 0x40011010;
 539:Src/main.c    ****   //volatile uint32_t * GPIOC_BRR = (uint32_t *) 0x40011014;  
 540:Src/main.c    ****   /* Infinite loop */
 541:Src/main.c    ****   for(;;)
 542:Src/main.c    ****   {
 543:Src/main.c    ****     /*
 544:Src/main.c    ****     *GPIOC_BRR |= (0x1 << 13);
 545:Src/main.c    ****     osDelay(500);
 546:Src/main.c    ****     *GPIOC_BSRR |= (0x1 << 13);
 547:Src/main.c    ****     osDelay(500);
 548:Src/main.c    ****     */
 549:Src/main.c    ****   }
 550:Src/main.c    ****   /* USER CODE END Tsk_LED */
 551:Src/main.c    **** }
 552:Src/main.c    **** 
 553:Src/main.c    **** /* USER CODE BEGIN Header_Tsk_UART_RX */
 554:Src/main.c    **** /**
 555:Src/main.c    **** * @brief Function implementing the UART_RX thread.
 556:Src/main.c    **** * @param argument: Not used
 557:Src/main.c    **** * @retval None
 558:Src/main.c    **** */
 559:Src/main.c    **** /* USER CODE END Header_Tsk_UART_RX */
 560:Src/main.c    **** void Tsk_UART_RX(void *argument)
 561:Src/main.c    **** {
 229              		.loc 1 561 0
 230              		.cfi_startproc
 231              		@ Volatile: function does not return.
 232              		@ args = 0, pretend = 0, frame = 0
 233              		@ frame_needed = 0, uses_anonymous_args = 0
 234              	.LVL11:
 235              		.loc 1 561 0
 236 0000 08B5     		push	{r3, lr}
 237              	.LCFI5:
 238              		.cfi_def_cfa_offset 8
 239              		.cfi_offset 3, -8
 240              		.cfi_offset 14, -4
 241              	.LVL12:
 242              	.L14:
 562:Src/main.c    ****   /* USER CODE BEGIN Tsk_UART_RX */
 563:Src/main.c    **** 
 564:Src/main.c    ****   /* Infinite loop */
 565:Src/main.c    ****   for(;;)
ARM GAS  /tmp/cc4ILIM4.s 			page 15


 566:Src/main.c    ****   {
 567:Src/main.c    ****       Thread_UART_RX();
 243              		.loc 1 567 0 discriminator 1
 244 0002 FFF7FEFF 		bl	Thread_UART_RX
 245              	.LVL13:
 246 0006 FCE7     		b	.L14
 247              		.cfi_endproc
 248              	.LFE80:
 250              		.section	.text.HAL_TIM_PeriodElapsedCallback,"ax",%progbits
 251              		.align	1
 252              		.global	HAL_TIM_PeriodElapsedCallback
 253              		.syntax unified
 254              		.thumb
 255              		.thumb_func
 256              		.fpu softvfp
 258              	HAL_TIM_PeriodElapsedCallback:
 259              	.LFB81:
 568:Src/main.c    ****   }
 569:Src/main.c    ****   /* USER CODE END Tsk_UART_RX */
 570:Src/main.c    **** }
 571:Src/main.c    **** 
 572:Src/main.c    **** /**
 573:Src/main.c    ****   * @brief  Period elapsed callback in non blocking mode
 574:Src/main.c    ****   * @note   This function is called  when TIM1 interrupt took place, inside
 575:Src/main.c    ****   * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 576:Src/main.c    ****   * a global variable "uwTick" used as application time base.
 577:Src/main.c    ****   * @param  htim : TIM handle
 578:Src/main.c    ****   * @retval None
 579:Src/main.c    ****   */
 580:Src/main.c    **** void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
 581:Src/main.c    **** {
 260              		.loc 1 581 0
 261              		.cfi_startproc
 262              		@ args = 0, pretend = 0, frame = 0
 263              		@ frame_needed = 0, uses_anonymous_args = 0
 264              	.LVL14:
 265 0000 08B5     		push	{r3, lr}
 266              	.LCFI6:
 267              		.cfi_def_cfa_offset 8
 268              		.cfi_offset 3, -8
 269              		.cfi_offset 14, -4
 582:Src/main.c    ****   /* USER CODE BEGIN Callback 0 */
 583:Src/main.c    **** 
 584:Src/main.c    ****   /* USER CODE END Callback 0 */
 585:Src/main.c    ****   if (htim->Instance == TIM1) {
 270              		.loc 1 585 0
 271 0002 0268     		ldr	r2, [r0]
 272 0004 034B     		ldr	r3, .L20
 273 0006 9A42     		cmp	r2, r3
 274 0008 00D0     		beq	.L19
 275              	.LVL15:
 276              	.L16:
 277 000a 08BD     		pop	{r3, pc}
 278              	.LVL16:
 279              	.L19:
 586:Src/main.c    ****     HAL_IncTick();
 280              		.loc 1 586 0
ARM GAS  /tmp/cc4ILIM4.s 			page 16


 281 000c FFF7FEFF 		bl	HAL_IncTick
 282              	.LVL17:
 587:Src/main.c    ****   }
 588:Src/main.c    ****   /* USER CODE BEGIN Callback 1 */
 589:Src/main.c    **** 
 590:Src/main.c    ****   /* USER CODE END Callback 1 */
 591:Src/main.c    **** }
 283              		.loc 1 591 0
 284 0010 FBE7     		b	.L16
 285              	.L21:
 286 0012 00BF     		.align	2
 287              	.L20:
 288 0014 002C0140 		.word	1073818624
 289              		.cfi_endproc
 290              	.LFE81:
 292              		.section	.text.Error_Handler,"ax",%progbits
 293              		.align	1
 294              		.global	Error_Handler
 295              		.syntax unified
 296              		.thumb
 297              		.thumb_func
 298              		.fpu softvfp
 300              	Error_Handler:
 301              	.LFB82:
 592:Src/main.c    **** 
 593:Src/main.c    **** /**
 594:Src/main.c    ****   * @brief  This function is executed in case of error occurrence.
 595:Src/main.c    ****   * @retval None
 596:Src/main.c    ****   */
 597:Src/main.c    **** void Error_Handler(void)
 598:Src/main.c    **** {
 302              		.loc 1 598 0
 303              		.cfi_startproc
 304              		@ Volatile: function does not return.
 305              		@ args = 0, pretend = 0, frame = 0
 306              		@ frame_needed = 0, uses_anonymous_args = 0
 307              		@ link register save eliminated.
 308              	.L23:
 309 0000 FEE7     		b	.L23
 310              		.cfi_endproc
 311              	.LFE82:
 313              		.section	.text.MX_USART1_UART_Init,"ax",%progbits
 314              		.align	1
 315              		.syntax unified
 316              		.thumb
 317              		.thumb_func
 318              		.fpu softvfp
 320              	MX_USART1_UART_Init:
 321              	.LFB75:
 423:Src/main.c    **** 
 322              		.loc 1 423 0
 323              		.cfi_startproc
 324              		@ args = 0, pretend = 0, frame = 0
 325              		@ frame_needed = 0, uses_anonymous_args = 0
 423:Src/main.c    **** 
 326              		.loc 1 423 0
 327 0000 08B5     		push	{r3, lr}
ARM GAS  /tmp/cc4ILIM4.s 			page 17


 328              	.LCFI7:
 329              		.cfi_def_cfa_offset 8
 330              		.cfi_offset 3, -8
 331              		.cfi_offset 14, -4
 432:Src/main.c    ****   huart1.Init.BaudRate = 115200;
 332              		.loc 1 432 0
 333 0002 0A48     		ldr	r0, .L28
 334 0004 0A4B     		ldr	r3, .L28+4
 335 0006 0360     		str	r3, [r0]
 433:Src/main.c    ****   huart1.Init.WordLength = UART_WORDLENGTH_8B;
 336              		.loc 1 433 0
 337 0008 4FF4E133 		mov	r3, #115200
 338 000c 4360     		str	r3, [r0, #4]
 434:Src/main.c    ****   huart1.Init.StopBits = UART_STOPBITS_1;
 339              		.loc 1 434 0
 340 000e 0023     		movs	r3, #0
 341 0010 8360     		str	r3, [r0, #8]
 435:Src/main.c    ****   huart1.Init.Parity = UART_PARITY_NONE;
 342              		.loc 1 435 0
 343 0012 C360     		str	r3, [r0, #12]
 436:Src/main.c    ****   huart1.Init.Mode = UART_MODE_TX_RX;
 344              		.loc 1 436 0
 345 0014 0361     		str	r3, [r0, #16]
 437:Src/main.c    ****   huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 346              		.loc 1 437 0
 347 0016 0C22     		movs	r2, #12
 348 0018 4261     		str	r2, [r0, #20]
 438:Src/main.c    ****   huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 349              		.loc 1 438 0
 350 001a 8361     		str	r3, [r0, #24]
 439:Src/main.c    ****   if (HAL_UART_Init(&huart1) != HAL_OK)
 351              		.loc 1 439 0
 352 001c C361     		str	r3, [r0, #28]
 440:Src/main.c    ****   {
 353              		.loc 1 440 0
 354 001e FFF7FEFF 		bl	HAL_UART_Init
 355              	.LVL18:
 356 0022 00B9     		cbnz	r0, .L27
 357 0024 08BD     		pop	{r3, pc}
 358              	.L27:
 442:Src/main.c    ****   }
 359              		.loc 1 442 0
 360 0026 FFF7FEFF 		bl	Error_Handler
 361              	.LVL19:
 362              	.L29:
 363 002a 00BF     		.align	2
 364              	.L28:
 365 002c 00000000 		.word	huart1
 366 0030 00380140 		.word	1073821696
 367              		.cfi_endproc
 368              	.LFE75:
 370              		.section	.text.MX_ADC1_Init,"ax",%progbits
 371              		.align	1
 372              		.syntax unified
 373              		.thumb
 374              		.thumb_func
 375              		.fpu softvfp
ARM GAS  /tmp/cc4ILIM4.s 			page 18


 377              	MX_ADC1_Init:
 378              	.LFB72:
 283:Src/main.c    **** 
 379              		.loc 1 283 0
 380              		.cfi_startproc
 381              		@ args = 0, pretend = 0, frame = 16
 382              		@ frame_needed = 0, uses_anonymous_args = 0
 383 0000 00B5     		push	{lr}
 384              	.LCFI8:
 385              		.cfi_def_cfa_offset 4
 386              		.cfi_offset 14, -4
 387 0002 85B0     		sub	sp, sp, #20
 388              	.LCFI9:
 389              		.cfi_def_cfa_offset 24
 289:Src/main.c    **** 
 390              		.loc 1 289 0
 391 0004 0023     		movs	r3, #0
 392 0006 0193     		str	r3, [sp, #4]
 393 0008 0293     		str	r3, [sp, #8]
 394 000a 0393     		str	r3, [sp, #12]
 296:Src/main.c    ****   hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 395              		.loc 1 296 0
 396 000c 0F48     		ldr	r0, .L36
 397 000e 104A     		ldr	r2, .L36+4
 398 0010 0260     		str	r2, [r0]
 297:Src/main.c    ****   hadc1.Init.ContinuousConvMode = DISABLE;
 399              		.loc 1 297 0
 400 0012 8360     		str	r3, [r0, #8]
 298:Src/main.c    ****   hadc1.Init.DiscontinuousConvMode = DISABLE;
 401              		.loc 1 298 0
 402 0014 0373     		strb	r3, [r0, #12]
 299:Src/main.c    ****   hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 403              		.loc 1 299 0
 404 0016 0375     		strb	r3, [r0, #20]
 300:Src/main.c    ****   hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 405              		.loc 1 300 0
 406 0018 4FF46022 		mov	r2, #917504
 407 001c C261     		str	r2, [r0, #28]
 301:Src/main.c    ****   hadc1.Init.NbrOfConversion = 1;
 408              		.loc 1 301 0
 409 001e 4360     		str	r3, [r0, #4]
 302:Src/main.c    ****   if (HAL_ADC_Init(&hadc1) != HAL_OK)
 410              		.loc 1 302 0
 411 0020 0123     		movs	r3, #1
 412 0022 0361     		str	r3, [r0, #16]
 303:Src/main.c    ****   {
 413              		.loc 1 303 0
 414 0024 FFF7FEFF 		bl	HAL_ADC_Init
 415              	.LVL20:
 416 0028 60B9     		cbnz	r0, .L34
 309:Src/main.c    ****   sConfig.Rank = ADC_REGULAR_RANK_1;
 417              		.loc 1 309 0
 418 002a 0123     		movs	r3, #1
 419 002c 0193     		str	r3, [sp, #4]
 310:Src/main.c    ****   sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 420              		.loc 1 310 0
 421 002e 0293     		str	r3, [sp, #8]
ARM GAS  /tmp/cc4ILIM4.s 			page 19


 311:Src/main.c    ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 422              		.loc 1 311 0
 423 0030 0023     		movs	r3, #0
 424 0032 0393     		str	r3, [sp, #12]
 312:Src/main.c    ****   {
 425              		.loc 1 312 0
 426 0034 01A9     		add	r1, sp, #4
 427 0036 0548     		ldr	r0, .L36
 428 0038 FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 429              	.LVL21:
 430 003c 20B9     		cbnz	r0, .L35
 320:Src/main.c    **** 
 431              		.loc 1 320 0
 432 003e 05B0     		add	sp, sp, #20
 433              	.LCFI10:
 434              		.cfi_remember_state
 435              		.cfi_def_cfa_offset 4
 436              		@ sp needed
 437 0040 5DF804FB 		ldr	pc, [sp], #4
 438              	.L34:
 439              	.LCFI11:
 440              		.cfi_restore_state
 305:Src/main.c    ****   }
 441              		.loc 1 305 0
 442 0044 FFF7FEFF 		bl	Error_Handler
 443              	.LVL22:
 444              	.L35:
 314:Src/main.c    ****   }
 445              		.loc 1 314 0
 446 0048 FFF7FEFF 		bl	Error_Handler
 447              	.LVL23:
 448              	.L37:
 449              		.align	2
 450              	.L36:
 451 004c 00000000 		.word	hadc1
 452 0050 00240140 		.word	1073816576
 453              		.cfi_endproc
 454              	.LFE72:
 456              		.section	.text.MX_RTC_Init,"ax",%progbits
 457              		.align	1
 458              		.syntax unified
 459              		.thumb
 460              		.thumb_func
 461              		.fpu softvfp
 463              	MX_RTC_Init:
 464              	.LFB73:
 328:Src/main.c    **** 
 465              		.loc 1 328 0
 466              		.cfi_startproc
 467              		@ args = 0, pretend = 0, frame = 8
 468              		@ frame_needed = 0, uses_anonymous_args = 0
 469 0000 00B5     		push	{lr}
 470              	.LCFI12:
 471              		.cfi_def_cfa_offset 4
 472              		.cfi_offset 14, -4
 473 0002 83B0     		sub	sp, sp, #12
 474              	.LCFI13:
ARM GAS  /tmp/cc4ILIM4.s 			page 20


 475              		.cfi_def_cfa_offset 16
 334:Src/main.c    ****   RTC_DateTypeDef DateToUpdate = {0};
 476              		.loc 1 334 0
 477 0004 0023     		movs	r3, #0
 478 0006 ADF80430 		strh	r3, [sp, #4]	@ movhi
 479 000a 8DF80630 		strb	r3, [sp, #6]
 335:Src/main.c    **** 
 480              		.loc 1 335 0
 481 000e 0093     		str	r3, [sp]
 342:Src/main.c    ****   hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 482              		.loc 1 342 0
 483 0010 1948     		ldr	r0, .L46
 484 0012 1A4A     		ldr	r2, .L46+4
 485 0014 0260     		str	r2, [r0]
 343:Src/main.c    ****   hrtc.Init.OutPut = RTC_OUTPUTSOURCE_NONE;
 486              		.loc 1 343 0
 487 0016 4FF0FF32 		mov	r2, #-1
 488 001a 4260     		str	r2, [r0, #4]
 344:Src/main.c    ****   if (HAL_RTC_Init(&hrtc) != HAL_OK)
 489              		.loc 1 344 0
 490 001c 8360     		str	r3, [r0, #8]
 345:Src/main.c    ****   {
 491              		.loc 1 345 0
 492 001e FFF7FEFF 		bl	HAL_RTC_Init
 493              	.LVL24:
 494 0022 18BB     		cbnz	r0, .L43
 356:Src/main.c    ****   sTime.Minutes = 0x0;
 495              		.loc 1 356 0
 496 0024 1723     		movs	r3, #23
 497 0026 8DF80430 		strb	r3, [sp, #4]
 357:Src/main.c    ****   sTime.Seconds = 0x30;
 498              		.loc 1 357 0
 499 002a 0023     		movs	r3, #0
 500 002c 8DF80530 		strb	r3, [sp, #5]
 358:Src/main.c    **** 
 501              		.loc 1 358 0
 502 0030 3023     		movs	r3, #48
 503 0032 8DF80630 		strb	r3, [sp, #6]
 360:Src/main.c    ****   {
 504              		.loc 1 360 0
 505 0036 0122     		movs	r2, #1
 506 0038 01A9     		add	r1, sp, #4
 507 003a 0F48     		ldr	r0, .L46
 508 003c FFF7FEFF 		bl	HAL_RTC_SetTime
 509              	.LVL25:
 510 0040 B0B9     		cbnz	r0, .L44
 364:Src/main.c    ****   DateToUpdate.Month = RTC_MONTH_FEBRUARY;
 511              		.loc 1 364 0
 512 0042 0623     		movs	r3, #6
 513 0044 8DF80030 		strb	r3, [sp]
 365:Src/main.c    ****   DateToUpdate.Date = 0x29;
 514              		.loc 1 365 0
 515 0048 0223     		movs	r3, #2
 516 004a 8DF80130 		strb	r3, [sp, #1]
 366:Src/main.c    ****   DateToUpdate.Year = 0x20;
 517              		.loc 1 366 0
 518 004e 2923     		movs	r3, #41
ARM GAS  /tmp/cc4ILIM4.s 			page 21


 519 0050 8DF80230 		strb	r3, [sp, #2]
 367:Src/main.c    **** 
 520              		.loc 1 367 0
 521 0054 2023     		movs	r3, #32
 522 0056 8DF80330 		strb	r3, [sp, #3]
 369:Src/main.c    ****   {
 523              		.loc 1 369 0
 524 005a 0122     		movs	r2, #1
 525 005c 6946     		mov	r1, sp
 526 005e 0648     		ldr	r0, .L46
 527 0060 FFF7FEFF 		bl	HAL_RTC_SetDate
 528              	.LVL26:
 529 0064 30B9     		cbnz	r0, .L45
 377:Src/main.c    **** 
 530              		.loc 1 377 0
 531 0066 03B0     		add	sp, sp, #12
 532              	.LCFI14:
 533              		.cfi_remember_state
 534              		.cfi_def_cfa_offset 4
 535              		@ sp needed
 536 0068 5DF804FB 		ldr	pc, [sp], #4
 537              	.L43:
 538              	.LCFI15:
 539              		.cfi_restore_state
 347:Src/main.c    ****   }
 540              		.loc 1 347 0
 541 006c FFF7FEFF 		bl	Error_Handler
 542              	.LVL27:
 543              	.L44:
 362:Src/main.c    ****   }
 544              		.loc 1 362 0
 545 0070 FFF7FEFF 		bl	Error_Handler
 546              	.LVL28:
 547              	.L45:
 371:Src/main.c    ****   }
 548              		.loc 1 371 0
 549 0074 FFF7FEFF 		bl	Error_Handler
 550              	.LVL29:
 551              	.L47:
 552              		.align	2
 553              	.L46:
 554 0078 00000000 		.word	hrtc
 555 007c 00280040 		.word	1073752064
 556              		.cfi_endproc
 557              	.LFE73:
 559              		.section	.text.MX_SPI1_Init,"ax",%progbits
 560              		.align	1
 561              		.syntax unified
 562              		.thumb
 563              		.thumb_func
 564              		.fpu softvfp
 566              	MX_SPI1_Init:
 567              	.LFB74:
 385:Src/main.c    **** 
 568              		.loc 1 385 0
 569              		.cfi_startproc
 570              		@ args = 0, pretend = 0, frame = 0
ARM GAS  /tmp/cc4ILIM4.s 			page 22


 571              		@ frame_needed = 0, uses_anonymous_args = 0
 572 0000 08B5     		push	{r3, lr}
 573              	.LCFI16:
 574              		.cfi_def_cfa_offset 8
 575              		.cfi_offset 3, -8
 576              		.cfi_offset 14, -4
 395:Src/main.c    ****   hspi1.Init.Mode = SPI_MODE_MASTER;
 577              		.loc 1 395 0
 578 0002 0D48     		ldr	r0, .L52
 579 0004 0D4B     		ldr	r3, .L52+4
 580 0006 0360     		str	r3, [r0]
 396:Src/main.c    ****   hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 581              		.loc 1 396 0
 582 0008 4FF48273 		mov	r3, #260
 583 000c 4360     		str	r3, [r0, #4]
 397:Src/main.c    ****   hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 584              		.loc 1 397 0
 585 000e 0023     		movs	r3, #0
 586 0010 8360     		str	r3, [r0, #8]
 398:Src/main.c    ****   hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 587              		.loc 1 398 0
 588 0012 C360     		str	r3, [r0, #12]
 399:Src/main.c    ****   hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 589              		.loc 1 399 0
 590 0014 0222     		movs	r2, #2
 591 0016 0261     		str	r2, [r0, #16]
 400:Src/main.c    ****   hspi1.Init.NSS = SPI_NSS_SOFT;
 592              		.loc 1 400 0
 593 0018 4361     		str	r3, [r0, #20]
 401:Src/main.c    ****   hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 594              		.loc 1 401 0
 595 001a 4FF40072 		mov	r2, #512
 596 001e 8261     		str	r2, [r0, #24]
 402:Src/main.c    ****   hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 597              		.loc 1 402 0
 598 0020 C361     		str	r3, [r0, #28]
 403:Src/main.c    ****   hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 599              		.loc 1 403 0
 600 0022 0362     		str	r3, [r0, #32]
 404:Src/main.c    ****   hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 601              		.loc 1 404 0
 602 0024 4362     		str	r3, [r0, #36]
 405:Src/main.c    ****   hspi1.Init.CRCPolynomial = 10;
 603              		.loc 1 405 0
 604 0026 8362     		str	r3, [r0, #40]
 406:Src/main.c    ****   if (HAL_SPI_Init(&hspi1) != HAL_OK)
 605              		.loc 1 406 0
 606 0028 0A23     		movs	r3, #10
 607 002a C362     		str	r3, [r0, #44]
 407:Src/main.c    ****   {
 608              		.loc 1 407 0
 609 002c FFF7FEFF 		bl	HAL_SPI_Init
 610              	.LVL30:
 611 0030 00B9     		cbnz	r0, .L51
 612 0032 08BD     		pop	{r3, pc}
 613              	.L51:
 409:Src/main.c    ****   }
ARM GAS  /tmp/cc4ILIM4.s 			page 23


 614              		.loc 1 409 0
 615 0034 FFF7FEFF 		bl	Error_Handler
 616              	.LVL31:
 617              	.L53:
 618              		.align	2
 619              	.L52:
 620 0038 00000000 		.word	hspi1
 621 003c 00300140 		.word	1073819648
 622              		.cfi_endproc
 623              	.LFE74:
 625              		.section	.text.SystemClock_Config,"ax",%progbits
 626              		.align	1
 627              		.global	SystemClock_Config
 628              		.syntax unified
 629              		.thumb
 630              		.thumb_func
 631              		.fpu softvfp
 633              	SystemClock_Config:
 634              	.LFB71:
 239:Src/main.c    ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 635              		.loc 1 239 0
 636              		.cfi_startproc
 637              		@ args = 0, pretend = 0, frame = 80
 638              		@ frame_needed = 0, uses_anonymous_args = 0
 639 0000 00B5     		push	{lr}
 640              	.LCFI17:
 641              		.cfi_def_cfa_offset 4
 642              		.cfi_offset 14, -4
 643 0002 95B0     		sub	sp, sp, #84
 644              	.LCFI18:
 645              		.cfi_def_cfa_offset 88
 240:Src/main.c    ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 646              		.loc 1 240 0
 647 0004 2822     		movs	r2, #40
 648 0006 0021     		movs	r1, #0
 649 0008 0DEB0200 		add	r0, sp, r2
 650 000c FFF7FEFF 		bl	memset
 651              	.LVL32:
 241:Src/main.c    ****   RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 652              		.loc 1 241 0
 653 0010 0023     		movs	r3, #0
 654 0012 0593     		str	r3, [sp, #20]
 655 0014 0693     		str	r3, [sp, #24]
 656 0016 0793     		str	r3, [sp, #28]
 657 0018 0893     		str	r3, [sp, #32]
 658 001a 0993     		str	r3, [sp, #36]
 242:Src/main.c    **** 
 659              		.loc 1 242 0
 660 001c 0193     		str	r3, [sp, #4]
 661 001e 0293     		str	r3, [sp, #8]
 662 0020 0393     		str	r3, [sp, #12]
 663 0022 0493     		str	r3, [sp, #16]
 246:Src/main.c    ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 664              		.loc 1 246 0
 665 0024 0A23     		movs	r3, #10
 666 0026 0A93     		str	r3, [sp, #40]
 247:Src/main.c    ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
ARM GAS  /tmp/cc4ILIM4.s 			page 24


 667              		.loc 1 247 0
 668 0028 0123     		movs	r3, #1
 669 002a 0E93     		str	r3, [sp, #56]
 248:Src/main.c    ****   RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 670              		.loc 1 248 0
 671 002c 1022     		movs	r2, #16
 672 002e 0F92     		str	r2, [sp, #60]
 249:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 673              		.loc 1 249 0
 674 0030 1093     		str	r3, [sp, #64]
 251:Src/main.c    ****   {
 675              		.loc 1 251 0
 676 0032 0AA8     		add	r0, sp, #40
 677 0034 FFF7FEFF 		bl	HAL_RCC_OscConfig
 678              	.LVL33:
 679 0038 C0B9     		cbnz	r0, .L59
 257:Src/main.c    ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 680              		.loc 1 257 0
 681 003a 0F23     		movs	r3, #15
 682 003c 0593     		str	r3, [sp, #20]
 259:Src/main.c    ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 683              		.loc 1 259 0
 684 003e 0021     		movs	r1, #0
 685 0040 0691     		str	r1, [sp, #24]
 260:Src/main.c    ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 686              		.loc 1 260 0
 687 0042 0791     		str	r1, [sp, #28]
 261:Src/main.c    ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 688              		.loc 1 261 0
 689 0044 0891     		str	r1, [sp, #32]
 262:Src/main.c    **** 
 690              		.loc 1 262 0
 691 0046 0991     		str	r1, [sp, #36]
 264:Src/main.c    ****   {
 692              		.loc 1 264 0
 693 0048 05A8     		add	r0, sp, #20
 694 004a FFF7FEFF 		bl	HAL_RCC_ClockConfig
 695              	.LVL34:
 696 004e 78B9     		cbnz	r0, .L60
 268:Src/main.c    ****   PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 697              		.loc 1 268 0
 698 0050 0323     		movs	r3, #3
 699 0052 0193     		str	r3, [sp, #4]
 269:Src/main.c    ****   PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 700              		.loc 1 269 0
 701 0054 4FF40073 		mov	r3, #512
 702 0058 0293     		str	r3, [sp, #8]
 270:Src/main.c    ****   if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 703              		.loc 1 270 0
 704 005a 0023     		movs	r3, #0
 705 005c 0393     		str	r3, [sp, #12]
 271:Src/main.c    ****   {
 706              		.loc 1 271 0
 707 005e 01A8     		add	r0, sp, #4
 708 0060 FFF7FEFF 		bl	HAL_RCCEx_PeriphCLKConfig
 709              	.LVL35:
 710 0064 30B9     		cbnz	r0, .L61
ARM GAS  /tmp/cc4ILIM4.s 			page 25


 275:Src/main.c    **** 
 711              		.loc 1 275 0
 712 0066 15B0     		add	sp, sp, #84
 713              	.LCFI19:
 714              		.cfi_remember_state
 715              		.cfi_def_cfa_offset 4
 716              		@ sp needed
 717 0068 5DF804FB 		ldr	pc, [sp], #4
 718              	.L59:
 719              	.LCFI20:
 720              		.cfi_restore_state
 253:Src/main.c    ****   }
 721              		.loc 1 253 0
 722 006c FFF7FEFF 		bl	Error_Handler
 723              	.LVL36:
 724              	.L60:
 266:Src/main.c    ****   }
 725              		.loc 1 266 0
 726 0070 FFF7FEFF 		bl	Error_Handler
 727              	.LVL37:
 728              	.L61:
 273:Src/main.c    ****   }
 729              		.loc 1 273 0
 730 0074 FFF7FEFF 		bl	Error_Handler
 731              	.LVL38:
 732              		.cfi_endproc
 733              	.LFE71:
 735              		.section	.text.main,"ax",%progbits
 736              		.align	1
 737              		.global	main
 738              		.syntax unified
 739              		.thumb
 740              		.thumb_func
 741              		.fpu softvfp
 743              	main:
 744              	.LFB70:
 127:Src/main.c    ****   /* USER CODE BEGIN 1 */
 745              		.loc 1 127 0
 746              		.cfi_startproc
 747              		@ args = 0, pretend = 0, frame = 1032
 748              		@ frame_needed = 0, uses_anonymous_args = 0
 749 0000 10B5     		push	{r4, lr}
 750              	.LCFI21:
 751              		.cfi_def_cfa_offset 8
 752              		.cfi_offset 4, -8
 753              		.cfi_offset 14, -4
 754 0002 ADF5826D 		sub	sp, sp, #1040
 755              	.LCFI22:
 756              		.cfi_def_cfa_offset 1048
 130:Src/main.c    ****   char read_buffer[512] = {0};
 757              		.loc 1 130 0
 758 0006 264B     		ldr	r3, .L68
 759 0008 82AC     		add	r4, sp, #520
 760 000a 0FCB     		ldm	r3, {r0, r1, r2, r3}
 761 000c 07C4     		stmia	r4!, {r0, r1, r2}
 762 000e 24F8023B 		strh	r3, [r4], #2	@ movhi
 763 0012 1B0C     		lsrs	r3, r3, #16
ARM GAS  /tmp/cc4ILIM4.s 			page 26


 764 0014 2370     		strb	r3, [r4]
 765 0016 40F2F112 		movw	r2, #497
 766 001a 0021     		movs	r1, #0
 767 001c 0DF21720 		addw	r0, sp, #535
 768 0020 FFF7FEFF 		bl	memset
 769              	.LVL39:
 131:Src/main.c    ****   /* USER CODE END 1 */
 770              		.loc 1 131 0
 771 0024 4FF40072 		mov	r2, #512
 772 0028 0021     		movs	r1, #0
 773 002a 02A8     		add	r0, sp, #8
 774 002c FFF7FEFF 		bl	memset
 775              	.LVL40:
 138:Src/main.c    **** 
 776              		.loc 1 138 0
 777 0030 FFF7FEFF 		bl	HAL_Init
 778              	.LVL41:
 145:Src/main.c    **** 
 779              		.loc 1 145 0
 780 0034 FFF7FEFF 		bl	SystemClock_Config
 781              	.LVL42:
 152:Src/main.c    ****   MX_USART1_UART_Init();
 782              		.loc 1 152 0
 783 0038 FFF7FEFF 		bl	MX_GPIO_Init
 784              	.LVL43:
 153:Src/main.c    ****   MX_ADC1_Init();
 785              		.loc 1 153 0
 786 003c FFF7FEFF 		bl	MX_USART1_UART_Init
 787              	.LVL44:
 154:Src/main.c    ****   MX_RTC_Init();
 788              		.loc 1 154 0
 789 0040 FFF7FEFF 		bl	MX_ADC1_Init
 790              	.LVL45:
 155:Src/main.c    ****   MX_SPI1_Init();
 791              		.loc 1 155 0
 792 0044 FFF7FEFF 		bl	MX_RTC_Init
 793              	.LVL46:
 156:Src/main.c    ****   MX_FATFS_Init();
 794              		.loc 1 156 0
 795 0048 FFF7FEFF 		bl	MX_SPI1_Init
 796              	.LVL47:
 157:Src/main.c    ****   /* USER CODE BEGIN 2 */
 797              		.loc 1 157 0
 798 004c FFF7FEFF 		bl	MX_FATFS_Init
 799              	.LVL48:
 159:Src/main.c    ****   {
 800              		.loc 1 159 0
 801 0050 0DF58160 		add	r0, sp, #1032
 802 0054 FFF7FEFF 		bl	SD_Init
 803              	.LVL49:
 804 0058 08B1     		cbz	r0, .L63
 161:Src/main.c    ****   }
 805              		.loc 1 161 0
 806 005a FFF7FEFF 		bl	Error_Handler
 807              	.LVL50:
 808              	.L63:
 163:Src/main.c    ****   {
ARM GAS  /tmp/cc4ILIM4.s 			page 27


 809              		.loc 1 163 0
 810 005e 0022     		movs	r2, #0
 811 0060 82A9     		add	r1, sp, #520
 812 0062 0DF58160 		add	r0, sp, #1032
 813 0066 FFF7FEFF 		bl	SD_Write
 814              	.LVL51:
 815 006a 08B1     		cbz	r0, .L64
 165:Src/main.c    ****   }
 816              		.loc 1 165 0
 817 006c FFF7FEFF 		bl	Error_Handler
 818              	.LVL52:
 819              	.L64:
 167:Src/main.c    ****   {
 820              		.loc 1 167 0
 821 0070 4FF40073 		mov	r3, #512
 822 0074 0093     		str	r3, [sp]
 823 0076 0023     		movs	r3, #0
 824 0078 1A46     		mov	r2, r3
 825 007a 02A9     		add	r1, sp, #8
 826 007c 0DF58160 		add	r0, sp, #1032
 827 0080 FFF7FEFF 		bl	SD_Read
 828              	.LVL53:
 829 0084 08B1     		cbz	r0, .L65
 169:Src/main.c    ****   }
 830              		.loc 1 169 0
 831 0086 FFF7FEFF 		bl	Error_Handler
 832              	.LVL54:
 833              	.L65:
 171:Src/main.c    ****   HAL_UART_Transmit(&huart1, (uint8_t *)read_buffer, read_buffer_size, HAL_MAX_DELAY);
 834              		.loc 1 171 0
 835 008a 02A8     		add	r0, sp, #8
 836 008c FFF7FEFF 		bl	strlen
 837              	.LVL55:
 172:Src/main.c    ****   while (1);
 838              		.loc 1 172 0
 839 0090 4FF0FF33 		mov	r3, #-1
 840 0094 C2B2     		uxtb	r2, r0
 841 0096 02A9     		add	r1, sp, #8
 842 0098 0248     		ldr	r0, .L68+4
 843              	.LVL56:
 844 009a FFF7FEFF 		bl	HAL_UART_Transmit
 845              	.LVL57:
 846              	.L66:
 847 009e FEE7     		b	.L66
 848              	.L69:
 849              		.align	2
 850              	.L68:
 851 00a0 00000000 		.word	.LANCHOR0
 852 00a4 00000000 		.word	huart1
 853              		.cfi_endproc
 854              	.LFE70:
 856              		.global	Queue_UART_TX_attributes
 857              		.comm	Queue_UART_TXHandle,4,4
 858              		.global	Queue_UART_RX_attributes
 859              		.comm	Queue_UART_RXHandle,4,4
 860              		.global	UART_RX_attributes
 861              		.comm	UART_RXHandle,4,4
ARM GAS  /tmp/cc4ILIM4.s 			page 28


 862              		.global	LED_attributes
 863              		.comm	LEDHandle,4,4
 864              		.global	UART_TX_attributes
 865              		.comm	UART_TXHandle,4,4
 866              		.global	ADC_LightSensor_attributes
 867              		.comm	ADC_LightSensorHandle,4,4
 868              		.comm	huart1,64,4
 869              		.comm	hspi1,88,4
 870              		.comm	hrtc,20,4
 871              		.comm	hadc1,48,4
 872              		.section	.rodata
 873              		.align	2
 874              		.set	.LANCHOR0,. + 0
 875              	.LC0:
 876 0000 54657374 		.ascii	"Test message.\012\000"
 876      206D6573 
 876      73616765 
 876      2E0A00
 877 000f 00000000 		.space	497
 877      00000000 
 877      00000000 
 877      00000000 
 877      00000000 
 878              		.section	.rodata.ADC_LightSensor_attributes,"a",%progbits
 879              		.align	2
 882              	ADC_LightSensor_attributes:
 883 0000 34000000 		.word	.LC6
 884 0004 00000000 		.space	16
 884      00000000 
 884      00000000 
 884      00000000 
 885 0014 00020000 		.word	512
 886 0018 18000000 		.word	24
 887 001c 00000000 		.space	8
 887      00000000 
 888              		.section	.rodata.LED_attributes,"a",%progbits
 889              		.align	2
 892              	LED_attributes:
 893 0000 28000000 		.word	.LC4
 894 0004 00000000 		.space	16
 894      00000000 
 894      00000000 
 894      00000000 
 895 0014 80000000 		.word	128
 896 0018 08000000 		.word	8
 897 001c 00000000 		.space	8
 897      00000000 
 898              		.section	.rodata.Queue_UART_RX_attributes,"a",%progbits
 899              		.align	2
 902              	Queue_UART_RX_attributes:
 903 0000 10000000 		.word	.LC2
 904 0004 00000000 		.space	20
 904      00000000 
 904      00000000 
 904      00000000 
 904      00000000 
 905              		.section	.rodata.Queue_UART_TX_attributes,"a",%progbits
ARM GAS  /tmp/cc4ILIM4.s 			page 29


 906              		.align	2
 909              	Queue_UART_TX_attributes:
 910 0000 00000000 		.word	.LC1
 911 0004 00000000 		.space	20
 911      00000000 
 911      00000000 
 911      00000000 
 911      00000000 
 912              		.section	.rodata.UART_RX_attributes,"a",%progbits
 913              		.align	2
 916              	UART_RX_attributes:
 917 0000 20000000 		.word	.LC3
 918 0004 00000000 		.space	16
 918      00000000 
 918      00000000 
 918      00000000 
 919 0014 80000000 		.word	128
 920 0018 08000000 		.word	8
 921 001c 00000000 		.space	8
 921      00000000 
 922              		.section	.rodata.UART_TX_attributes,"a",%progbits
 923              		.align	2
 926              	UART_TX_attributes:
 927 0000 2C000000 		.word	.LC5
 928 0004 00000000 		.space	16
 928      00000000 
 928      00000000 
 928      00000000 
 929 0014 80000000 		.word	128
 930 0018 08000000 		.word	8
 931 001c 00000000 		.space	8
 931      00000000 
 932              		.section	.rodata.str1.4,"aMS",%progbits,1
 933              		.align	2
 934              	.LC1:
 935 0000 51756575 		.ascii	"Queue_UART_TX\000"
 935      655F5541 
 935      52545F54 
 935      5800
 936 000e 0000     		.space	2
 937              	.LC2:
 938 0010 51756575 		.ascii	"Queue_UART_RX\000"
 938      655F5541 
 938      52545F52 
 938      5800
 939 001e 0000     		.space	2
 940              	.LC3:
 941 0020 55415254 		.ascii	"UART_RX\000"
 941      5F525800 
 942              	.LC4:
 943 0028 4C454400 		.ascii	"LED\000"
 944              	.LC5:
 945 002c 55415254 		.ascii	"UART_TX\000"
 945      5F545800 
 946              	.LC6:
 947 0034 4144435F 		.ascii	"ADC_LightSensor\000"
 947      4C696768 
ARM GAS  /tmp/cc4ILIM4.s 			page 30


 947      7453656E 
 947      736F7200 
 948              		.text
 949              	.Letext0:
 950              		.file 2 "/usr/include/newlib/machine/_default_types.h"
 951              		.file 3 "/usr/include/newlib/sys/_stdint.h"
 952              		.file 4 "Drivers/CMSIS/Include/core_cm3.h"
 953              		.file 5 "Drivers/CMSIS/Device/ST/STM32F1xx/Include/system_stm32f1xx.h"
 954              		.file 6 "Drivers/CMSIS/Device/ST/STM32F1xx/Include/stm32f103xb.h"
 955              		.file 7 "Drivers/CMSIS/Device/ST/STM32F1xx/Include/stm32f1xx.h"
 956              		.file 8 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_def.h"
 957              		.file 9 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_rcc.h"
 958              		.file 10 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_rcc_ex.h"
 959              		.file 11 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_gpio.h"
 960              		.file 12 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_dma.h"
 961              		.file 13 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_adc.h"
 962              		.file 14 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_rtc.h"
 963              		.file 15 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_spi.h"
 964              		.file 16 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_tim.h"
 965              		.file 17 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_uart.h"
 966              		.file 18 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal.h"
 967              		.file 19 "Middlewares/Third_Party/FreeRTOS/Source/CMSIS_RTOS_V2/cmsis_os2.h"
 968              		.file 20 "Middlewares/Third_Party/FatFs/src/integer.h"
 969              		.file 21 "Middlewares/Third_Party/FatFs/src/ff.h"
 970              		.file 22 "Middlewares/Third_Party/FatFs/src/diskio.h"
 971              		.file 23 "Middlewares/Third_Party/FatFs/src/ff_gen_drv.h"
 972              		.file 24 "Inc/user_diskio.h"
 973              		.file 25 "Inc/fatfs.h"
 974              		.file 26 "/usr/include/newlib/sys/lock.h"
 975              		.file 27 "/usr/include/newlib/sys/_types.h"
 976              		.file 28 "/usr/lib/gcc/arm-none-eabi/6.3.1/include/stddef.h"
 977              		.file 29 "/usr/include/newlib/sys/reent.h"
 978              		.file 30 "Middlewares/Third_Party/ulibSD/integer_ulibsd.h"
 979              		.file 31 "Middlewares/Third_Party/ulibSD/sd_io.h"
 980              		.file 32 "Inc/UART.h"
 981              		.file 33 "Inc/ADC.h"
 982              		.file 34 "/usr/include/newlib/string.h"
ARM GAS  /tmp/cc4ILIM4.s 			page 31


DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
     /tmp/cc4ILIM4.s:16     .text.MX_GPIO_Init:0000000000000000 $t
     /tmp/cc4ILIM4.s:22     .text.MX_GPIO_Init:0000000000000000 MX_GPIO_Init
     /tmp/cc4ILIM4.s:131    .text.MX_GPIO_Init:0000000000000090 $d
     /tmp/cc4ILIM4.s:138    .text.Tsk_ADC_LightSensor:0000000000000000 $t
     /tmp/cc4ILIM4.s:145    .text.Tsk_ADC_LightSensor:0000000000000000 Tsk_ADC_LightSensor
     /tmp/cc4ILIM4.s:168    .text.Tsk_UART_TX:0000000000000000 $t
     /tmp/cc4ILIM4.s:175    .text.Tsk_UART_TX:0000000000000000 Tsk_UART_TX
     /tmp/cc4ILIM4.s:198    .text.Tsk_LED:0000000000000000 $t
     /tmp/cc4ILIM4.s:205    .text.Tsk_LED:0000000000000000 Tsk_LED
     /tmp/cc4ILIM4.s:220    .text.Tsk_UART_RX:0000000000000000 $t
     /tmp/cc4ILIM4.s:227    .text.Tsk_UART_RX:0000000000000000 Tsk_UART_RX
     /tmp/cc4ILIM4.s:251    .text.HAL_TIM_PeriodElapsedCallback:0000000000000000 $t
     /tmp/cc4ILIM4.s:258    .text.HAL_TIM_PeriodElapsedCallback:0000000000000000 HAL_TIM_PeriodElapsedCallback
     /tmp/cc4ILIM4.s:288    .text.HAL_TIM_PeriodElapsedCallback:0000000000000014 $d
     /tmp/cc4ILIM4.s:293    .text.Error_Handler:0000000000000000 $t
     /tmp/cc4ILIM4.s:300    .text.Error_Handler:0000000000000000 Error_Handler
     /tmp/cc4ILIM4.s:314    .text.MX_USART1_UART_Init:0000000000000000 $t
     /tmp/cc4ILIM4.s:320    .text.MX_USART1_UART_Init:0000000000000000 MX_USART1_UART_Init
     /tmp/cc4ILIM4.s:365    .text.MX_USART1_UART_Init:000000000000002c $d
                            *COM*:0000000000000040 huart1
     /tmp/cc4ILIM4.s:371    .text.MX_ADC1_Init:0000000000000000 $t
     /tmp/cc4ILIM4.s:377    .text.MX_ADC1_Init:0000000000000000 MX_ADC1_Init
     /tmp/cc4ILIM4.s:451    .text.MX_ADC1_Init:000000000000004c $d
                            *COM*:0000000000000030 hadc1
     /tmp/cc4ILIM4.s:457    .text.MX_RTC_Init:0000000000000000 $t
     /tmp/cc4ILIM4.s:463    .text.MX_RTC_Init:0000000000000000 MX_RTC_Init
     /tmp/cc4ILIM4.s:554    .text.MX_RTC_Init:0000000000000078 $d
                            *COM*:0000000000000014 hrtc
     /tmp/cc4ILIM4.s:560    .text.MX_SPI1_Init:0000000000000000 $t
     /tmp/cc4ILIM4.s:566    .text.MX_SPI1_Init:0000000000000000 MX_SPI1_Init
     /tmp/cc4ILIM4.s:620    .text.MX_SPI1_Init:0000000000000038 $d
                            *COM*:0000000000000058 hspi1
     /tmp/cc4ILIM4.s:626    .text.SystemClock_Config:0000000000000000 $t
     /tmp/cc4ILIM4.s:633    .text.SystemClock_Config:0000000000000000 SystemClock_Config
     /tmp/cc4ILIM4.s:736    .text.main:0000000000000000 $t
     /tmp/cc4ILIM4.s:743    .text.main:0000000000000000 main
     /tmp/cc4ILIM4.s:851    .text.main:00000000000000a0 $d
     /tmp/cc4ILIM4.s:909    .rodata.Queue_UART_TX_attributes:0000000000000000 Queue_UART_TX_attributes
                            *COM*:0000000000000004 Queue_UART_TXHandle
     /tmp/cc4ILIM4.s:902    .rodata.Queue_UART_RX_attributes:0000000000000000 Queue_UART_RX_attributes
                            *COM*:0000000000000004 Queue_UART_RXHandle
     /tmp/cc4ILIM4.s:916    .rodata.UART_RX_attributes:0000000000000000 UART_RX_attributes
                            *COM*:0000000000000004 UART_RXHandle
     /tmp/cc4ILIM4.s:892    .rodata.LED_attributes:0000000000000000 LED_attributes
                            *COM*:0000000000000004 LEDHandle
     /tmp/cc4ILIM4.s:926    .rodata.UART_TX_attributes:0000000000000000 UART_TX_attributes
                            *COM*:0000000000000004 UART_TXHandle
     /tmp/cc4ILIM4.s:882    .rodata.ADC_LightSensor_attributes:0000000000000000 ADC_LightSensor_attributes
                            *COM*:0000000000000004 ADC_LightSensorHandle
     /tmp/cc4ILIM4.s:873    .rodata:0000000000000000 $d
     /tmp/cc4ILIM4.s:879    .rodata.ADC_LightSensor_attributes:0000000000000000 $d
     /tmp/cc4ILIM4.s:889    .rodata.LED_attributes:0000000000000000 $d
     /tmp/cc4ILIM4.s:899    .rodata.Queue_UART_RX_attributes:0000000000000000 $d
     /tmp/cc4ILIM4.s:906    .rodata.Queue_UART_TX_attributes:0000000000000000 $d
     /tmp/cc4ILIM4.s:913    .rodata.UART_RX_attributes:0000000000000000 $d
ARM GAS  /tmp/cc4ILIM4.s 			page 32


     /tmp/cc4ILIM4.s:923    .rodata.UART_TX_attributes:0000000000000000 $d
     /tmp/cc4ILIM4.s:933    .rodata.str1.4:0000000000000000 $d
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
HAL_GPIO_WritePin
HAL_GPIO_Init
Thread_ADC_LightSensor
Thread_UART_TX
Thread_UART_RX
HAL_IncTick
HAL_UART_Init
HAL_ADC_Init
HAL_ADC_ConfigChannel
HAL_RTC_Init
HAL_RTC_SetTime
HAL_RTC_SetDate
HAL_SPI_Init
memset
HAL_RCC_OscConfig
HAL_RCC_ClockConfig
HAL_RCCEx_PeriphCLKConfig
HAL_Init
MX_FATFS_Init
SD_Init
SD_Write
SD_Read
strlen
HAL_UART_Transmit
