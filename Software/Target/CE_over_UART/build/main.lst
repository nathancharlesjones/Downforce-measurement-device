ARM GAS  /tmp/ccxDmQN3.s 			page 1


   1              		.cpu cortex-m3
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 1
   9              		.eabi_attribute 34, 1
  10              		.eabi_attribute 18, 4
  11              		.file	"main.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.text.MX_GPIO_Init,"ax",%progbits
  16              		.align	1
  17              		.syntax unified
  18              		.thumb
  19              		.thumb_func
  20              		.fpu softvfp
  22              	MX_GPIO_Init:
  23              	.LFB72:
  24              		.file 1 "Src/main.c"
   1:Src/main.c    **** /* USER CODE BEGIN Header */
   2:Src/main.c    **** /**
   3:Src/main.c    ****   ******************************************************************************
   4:Src/main.c    ****   * @file           : main.c
   5:Src/main.c    ****   * @brief          : Main program body
   6:Src/main.c    ****   ******************************************************************************
   7:Src/main.c    ****   * @attention
   8:Src/main.c    ****   *
   9:Src/main.c    ****   * <h2><center>&copy; Copyright (c) 2020 STMicroelectronics.
  10:Src/main.c    ****   * All rights reserved.</center></h2>
  11:Src/main.c    ****   *
  12:Src/main.c    ****   * This software component is licensed by ST under BSD 3-Clause license,
  13:Src/main.c    ****   * the "License"; You may not use this file except in compliance with the
  14:Src/main.c    ****   * License. You may obtain a copy of the License at:
  15:Src/main.c    ****   *                        opensource.org/licenses/BSD-3-Clause
  16:Src/main.c    ****   *
  17:Src/main.c    ****   ******************************************************************************
  18:Src/main.c    ****   */
  19:Src/main.c    **** /* USER CODE END Header */
  20:Src/main.c    **** 
  21:Src/main.c    **** /* Includes ------------------------------------------------------------------*/
  22:Src/main.c    **** #include "main.h"
  23:Src/main.c    **** 
  24:Src/main.c    **** /* Private includes ----------------------------------------------------------*/
  25:Src/main.c    **** /* USER CODE BEGIN Includes */
  26:Src/main.c    **** #include <string.h>
  27:Src/main.c    **** #include <stdio.h>
  28:Src/main.c    **** #include <math.h>
  29:Src/main.c    **** /* USER CODE END Includes */
  30:Src/main.c    **** 
  31:Src/main.c    **** /* Private typedef -----------------------------------------------------------*/
  32:Src/main.c    **** /* USER CODE BEGIN PTD */
  33:Src/main.c    **** 
  34:Src/main.c    **** /* USER CODE END PTD */
ARM GAS  /tmp/ccxDmQN3.s 			page 2


  35:Src/main.c    **** 
  36:Src/main.c    **** /* Private define ------------------------------------------------------------*/
  37:Src/main.c    **** /* USER CODE BEGIN PD */
  38:Src/main.c    **** #define MAX_LOG_MSG_SIZE 128
  39:Src/main.c    **** /* USER CODE END PD */
  40:Src/main.c    **** 
  41:Src/main.c    **** /* Private macro -------------------------------------------------------------*/
  42:Src/main.c    **** /* USER CODE BEGIN PM */
  43:Src/main.c    **** 
  44:Src/main.c    **** /* USER CODE END PM */
  45:Src/main.c    **** 
  46:Src/main.c    **** /* Private variables ---------------------------------------------------------*/
  47:Src/main.c    **** ADC_HandleTypeDef hadc1;
  48:Src/main.c    **** 
  49:Src/main.c    **** SPI_HandleTypeDef hspi1;
  50:Src/main.c    **** 
  51:Src/main.c    **** UART_HandleTypeDef huart1;
  52:Src/main.c    **** UART_HandleTypeDef huart2;
  53:Src/main.c    **** 
  54:Src/main.c    **** /* USER CODE BEGIN PV */
  55:Src/main.c    **** static uint8_t SPI_msg[MAX_LOG_MSG_SIZE] = {0};
  56:Src/main.c    **** /* USER CODE END PV */
  57:Src/main.c    **** 
  58:Src/main.c    **** /* Private function prototypes -----------------------------------------------*/
  59:Src/main.c    **** void SystemClock_Config(void);
  60:Src/main.c    **** static void MX_GPIO_Init(void);
  61:Src/main.c    **** static void MX_ADC1_Init(void);
  62:Src/main.c    **** static void MX_SPI1_Init(void);
  63:Src/main.c    **** static void MX_USART1_UART_Init(void);
  64:Src/main.c    **** static void MX_USART2_UART_Init(void);
  65:Src/main.c    **** /* USER CODE BEGIN PFP */
  66:Src/main.c    **** void setGain(gain_t new_gain);
  67:Src/main.c    **** void setVref(uint16_t _new_Vref);
  68:Src/main.c    **** /* USER CODE END PFP */
  69:Src/main.c    **** 
  70:Src/main.c    **** /* Private user code ---------------------------------------------------------*/
  71:Src/main.c    **** /* USER CODE BEGIN 0 */
  72:Src/main.c    **** 
  73:Src/main.c    **** /* USER CODE END 0 */
  74:Src/main.c    **** 
  75:Src/main.c    **** /**
  76:Src/main.c    ****   * @brief  The application entry point.
  77:Src/main.c    ****   * @retval int
  78:Src/main.c    ****   */
  79:Src/main.c    **** int main(void)
  80:Src/main.c    **** {
  81:Src/main.c    ****   /* USER CODE BEGIN 1 */
  82:Src/main.c    ****   static char ADC_msg[MAX_LOG_MSG_SIZE] = {0};
  83:Src/main.c    ****   static const char channel_name[] = "LightSensor";
  84:Src/main.c    ****   static volatile uint16_t lightVal = 0;
  85:Src/main.c    ****   static volatile uint8_t zoomAndEnhance = 0;
  86:Src/main.c    ****   static const uint8_t gain[8] = {1,2,4,5,8,10,16,32};
  87:Src/main.c    ****   static volatile gain_t gain_idx = GAIN_OF_1;
  88:Src/main.c    ****   static volatile float Vin_min = 0;
  89:Src/main.c    ****   static volatile float Vin_max = 3.300;
  90:Src/main.c    ****   static volatile uint16_t Vref = 0;
  91:Src/main.c    ****   /* USER CODE END 1 */
ARM GAS  /tmp/ccxDmQN3.s 			page 3


  92:Src/main.c    ****   
  93:Src/main.c    **** 
  94:Src/main.c    ****   /* MCU Configuration--------------------------------------------------------*/
  95:Src/main.c    **** 
  96:Src/main.c    ****   /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  97:Src/main.c    ****   HAL_Init();
  98:Src/main.c    **** 
  99:Src/main.c    ****   /* USER CODE BEGIN Init */
 100:Src/main.c    **** 
 101:Src/main.c    ****   /* USER CODE END Init */
 102:Src/main.c    **** 
 103:Src/main.c    ****   /* Configure the system clock */
 104:Src/main.c    ****   SystemClock_Config();
 105:Src/main.c    **** 
 106:Src/main.c    ****   /* USER CODE BEGIN SysInit */
 107:Src/main.c    **** 
 108:Src/main.c    ****   /* USER CODE END SysInit */
 109:Src/main.c    **** 
 110:Src/main.c    ****   /* Initialize all configured peripherals */
 111:Src/main.c    ****   MX_GPIO_Init();
 112:Src/main.c    ****   MX_ADC1_Init();
 113:Src/main.c    ****   MX_SPI1_Init();
 114:Src/main.c    ****   MX_USART1_UART_Init();
 115:Src/main.c    ****   MX_USART2_UART_Init();
 116:Src/main.c    ****   /* USER CODE BEGIN 2 */
 117:Src/main.c    ****   if (HAL_ADCEx_Calibration_Start(&hadc1) != HAL_OK)
 118:Src/main.c    ****   {
 119:Src/main.c    ****       Error_Handler();
 120:Src/main.c    ****   }
 121:Src/main.c    ****   /* USER CODE END 2 */
 122:Src/main.c    ****  
 123:Src/main.c    ****  
 124:Src/main.c    **** 
 125:Src/main.c    ****   /* Infinite loop */
 126:Src/main.c    ****   /* USER CODE BEGIN WHILE */
 127:Src/main.c    ****   while (1)
 128:Src/main.c    ****   {
 129:Src/main.c    ****     /* USER CODE END WHILE */
 130:Src/main.c    **** 
 131:Src/main.c    ****     /* USER CODE BEGIN 3 */
 132:Src/main.c    ****     if (zoomAndEnhance)
 133:Src/main.c    ****     {
 134:Src/main.c    ****     	//calculate gain from Vin_max, Vin_min
 135:Src/main.c    ****     	float gain_float = 3.3 / ( Vin_max - Vin_min );
 136:Src/main.c    ****     	for ( gain_idx = GAIN_OF_32; gain_idx > 0; gain_idx--)
 137:Src/main.c    ****     	{
 138:Src/main.c    ****     		if ( gain[gain_idx] < gain_float ) break;
 139:Src/main.c    ****     	}
 140:Src/main.c    ****     	//update gain
 141:Src/main.c    ****     	setGain(gain_idx);
 142:Src/main.c    **** 
 143:Src/main.c    ****     	//calculate Vref from gain, Vin_min
 144:Src/main.c    ****     	float Vref_float = ( gain[gain_idx] * Vin_min ) / ( gain[gain_idx] - 1 );
 145:Src/main.c    ****     	uint16_t Vref = round( Vref_float * 4095 / 3.3f );
 146:Src/main.c    ****     	//update Vref
 147:Src/main.c    ****     	setVref(Vref);    	
 148:Src/main.c    **** 
ARM GAS  /tmp/ccxDmQN3.s 			page 4


 149:Src/main.c    ****     	//setGain((gain_t)gain_idx);
 150:Src/main.c    ****     }
 151:Src/main.c    **** 
 152:Src/main.c    ****     HAL_ADC_Start(&hadc1);
 153:Src/main.c    ****     while( HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY) != HAL_OK );
 154:Src/main.c    ****     lightVal = HAL_ADC_GetValue(&hadc1);
 155:Src/main.c    ****     
 156:Src/main.c    ****     sprintf(&ADC_msg[0], "{ \"channel\" : \"%s\", \"time\" : %d, \"value\" : %d }\n\r", channel_nam
 157:Src/main.c    ****     HAL_UART_Transmit(&huart1, (uint8_t*)&ADC_msg[0], strlen(ADC_msg), HAL_MAX_DELAY);
 158:Src/main.c    **** 
 159:Src/main.c    ****     memset(&ADC_msg[0], 0, MAX_LOG_MSG_SIZE);
 160:Src/main.c    **** 
 161:Src/main.c    ****     HAL_Delay(5);
 162:Src/main.c    ****   }
 163:Src/main.c    ****   /* USER CODE END 3 */
 164:Src/main.c    **** }
 165:Src/main.c    **** 
 166:Src/main.c    **** /**
 167:Src/main.c    ****   * @brief System Clock Configuration
 168:Src/main.c    ****   * @retval None
 169:Src/main.c    ****   */
 170:Src/main.c    **** void SystemClock_Config(void)
 171:Src/main.c    **** {
 172:Src/main.c    ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 173:Src/main.c    ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 174:Src/main.c    ****   RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 175:Src/main.c    **** 
 176:Src/main.c    ****   /** Initializes the CPU, AHB and APB busses clocks 
 177:Src/main.c    ****   */
 178:Src/main.c    ****   RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 179:Src/main.c    ****   RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 180:Src/main.c    ****   RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 181:Src/main.c    ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 182:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 183:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 184:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 185:Src/main.c    ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 186:Src/main.c    ****   {
 187:Src/main.c    ****     Error_Handler();
 188:Src/main.c    ****   }
 189:Src/main.c    ****   /** Initializes the CPU, AHB and APB busses clocks 
 190:Src/main.c    ****   */
 191:Src/main.c    ****   RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 192:Src/main.c    ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 193:Src/main.c    ****   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 194:Src/main.c    ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 195:Src/main.c    ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 196:Src/main.c    ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 197:Src/main.c    **** 
 198:Src/main.c    ****   if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 199:Src/main.c    ****   {
 200:Src/main.c    ****     Error_Handler();
 201:Src/main.c    ****   }
 202:Src/main.c    ****   PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 203:Src/main.c    ****   PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 204:Src/main.c    ****   if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 205:Src/main.c    ****   {
ARM GAS  /tmp/ccxDmQN3.s 			page 5


 206:Src/main.c    ****     Error_Handler();
 207:Src/main.c    ****   }
 208:Src/main.c    **** }
 209:Src/main.c    **** 
 210:Src/main.c    **** /**
 211:Src/main.c    ****   * @brief ADC1 Initialization Function
 212:Src/main.c    ****   * @param None
 213:Src/main.c    ****   * @retval None
 214:Src/main.c    ****   */
 215:Src/main.c    **** static void MX_ADC1_Init(void)
 216:Src/main.c    **** {
 217:Src/main.c    **** 
 218:Src/main.c    ****   /* USER CODE BEGIN ADC1_Init 0 */
 219:Src/main.c    **** 
 220:Src/main.c    ****   /* USER CODE END ADC1_Init 0 */
 221:Src/main.c    **** 
 222:Src/main.c    ****   ADC_ChannelConfTypeDef sConfig = {0};
 223:Src/main.c    **** 
 224:Src/main.c    ****   /* USER CODE BEGIN ADC1_Init 1 */
 225:Src/main.c    **** 
 226:Src/main.c    ****   /* USER CODE END ADC1_Init 1 */
 227:Src/main.c    ****   /** Common config 
 228:Src/main.c    ****   */
 229:Src/main.c    ****   hadc1.Instance = ADC1;
 230:Src/main.c    ****   hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 231:Src/main.c    ****   hadc1.Init.ContinuousConvMode = DISABLE;
 232:Src/main.c    ****   hadc1.Init.DiscontinuousConvMode = DISABLE;
 233:Src/main.c    ****   hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 234:Src/main.c    ****   hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 235:Src/main.c    ****   hadc1.Init.NbrOfConversion = 1;
 236:Src/main.c    ****   if (HAL_ADC_Init(&hadc1) != HAL_OK)
 237:Src/main.c    ****   {
 238:Src/main.c    ****     Error_Handler();
 239:Src/main.c    ****   }
 240:Src/main.c    ****   /** Configure Regular Channel 
 241:Src/main.c    ****   */
 242:Src/main.c    ****   sConfig.Channel = ADC_CHANNEL_0;
 243:Src/main.c    ****   sConfig.Rank = ADC_REGULAR_RANK_1;
 244:Src/main.c    ****   sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 245:Src/main.c    ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 246:Src/main.c    ****   {
 247:Src/main.c    ****     Error_Handler();
 248:Src/main.c    ****   }
 249:Src/main.c    ****   /* USER CODE BEGIN ADC1_Init 2 */
 250:Src/main.c    **** 
 251:Src/main.c    ****   /* USER CODE END ADC1_Init 2 */
 252:Src/main.c    **** 
 253:Src/main.c    **** }
 254:Src/main.c    **** 
 255:Src/main.c    **** /**
 256:Src/main.c    ****   * @brief SPI1 Initialization Function
 257:Src/main.c    ****   * @param None
 258:Src/main.c    ****   * @retval None
 259:Src/main.c    ****   */
 260:Src/main.c    **** static void MX_SPI1_Init(void)
 261:Src/main.c    **** {
 262:Src/main.c    **** 
ARM GAS  /tmp/ccxDmQN3.s 			page 6


 263:Src/main.c    ****   /* USER CODE BEGIN SPI1_Init 0 */
 264:Src/main.c    **** 
 265:Src/main.c    ****   /* USER CODE END SPI1_Init 0 */
 266:Src/main.c    **** 
 267:Src/main.c    ****   /* USER CODE BEGIN SPI1_Init 1 */
 268:Src/main.c    **** 
 269:Src/main.c    ****   /* USER CODE END SPI1_Init 1 */
 270:Src/main.c    ****   /* SPI1 parameter configuration*/
 271:Src/main.c    ****   hspi1.Instance = SPI1;
 272:Src/main.c    ****   hspi1.Init.Mode = SPI_MODE_MASTER;
 273:Src/main.c    ****   hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 274:Src/main.c    ****   hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 275:Src/main.c    ****   hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 276:Src/main.c    ****   hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 277:Src/main.c    ****   hspi1.Init.NSS = SPI_NSS_SOFT;
 278:Src/main.c    ****   hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 279:Src/main.c    ****   hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 280:Src/main.c    ****   hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 281:Src/main.c    ****   hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 282:Src/main.c    ****   hspi1.Init.CRCPolynomial = 10;
 283:Src/main.c    ****   if (HAL_SPI_Init(&hspi1) != HAL_OK)
 284:Src/main.c    ****   {
 285:Src/main.c    ****     Error_Handler();
 286:Src/main.c    ****   }
 287:Src/main.c    ****   /* USER CODE BEGIN SPI1_Init 2 */
 288:Src/main.c    **** 
 289:Src/main.c    ****   /* USER CODE END SPI1_Init 2 */
 290:Src/main.c    **** 
 291:Src/main.c    **** }
 292:Src/main.c    **** 
 293:Src/main.c    **** /**
 294:Src/main.c    ****   * @brief USART1 Initialization Function
 295:Src/main.c    ****   * @param None
 296:Src/main.c    ****   * @retval None
 297:Src/main.c    ****   */
 298:Src/main.c    **** static void MX_USART1_UART_Init(void)
 299:Src/main.c    **** {
 300:Src/main.c    **** 
 301:Src/main.c    ****   /* USER CODE BEGIN USART1_Init 0 */
 302:Src/main.c    **** 
 303:Src/main.c    ****   /* USER CODE END USART1_Init 0 */
 304:Src/main.c    **** 
 305:Src/main.c    ****   /* USER CODE BEGIN USART1_Init 1 */
 306:Src/main.c    **** 
 307:Src/main.c    ****   /* USER CODE END USART1_Init 1 */
 308:Src/main.c    ****   huart1.Instance = USART1;
 309:Src/main.c    ****   huart1.Init.BaudRate = 460800;
 310:Src/main.c    ****   huart1.Init.WordLength = UART_WORDLENGTH_8B;
 311:Src/main.c    ****   huart1.Init.StopBits = UART_STOPBITS_1;
 312:Src/main.c    ****   huart1.Init.Parity = UART_PARITY_NONE;
 313:Src/main.c    ****   huart1.Init.Mode = UART_MODE_TX_RX;
 314:Src/main.c    ****   huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 315:Src/main.c    ****   huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 316:Src/main.c    ****   if (HAL_UART_Init(&huart1) != HAL_OK)
 317:Src/main.c    ****   {
 318:Src/main.c    ****     Error_Handler();
 319:Src/main.c    ****   }
ARM GAS  /tmp/ccxDmQN3.s 			page 7


 320:Src/main.c    ****   /* USER CODE BEGIN USART1_Init 2 */
 321:Src/main.c    **** 
 322:Src/main.c    ****   /* USER CODE END USART1_Init 2 */
 323:Src/main.c    **** 
 324:Src/main.c    **** }
 325:Src/main.c    **** 
 326:Src/main.c    **** /**
 327:Src/main.c    ****   * @brief USART2 Initialization Function
 328:Src/main.c    ****   * @param None
 329:Src/main.c    ****   * @retval None
 330:Src/main.c    ****   */
 331:Src/main.c    **** static void MX_USART2_UART_Init(void)
 332:Src/main.c    **** {
 333:Src/main.c    **** 
 334:Src/main.c    ****   /* USER CODE BEGIN USART2_Init 0 */
 335:Src/main.c    **** 
 336:Src/main.c    ****   /* USER CODE END USART2_Init 0 */
 337:Src/main.c    **** 
 338:Src/main.c    ****   /* USER CODE BEGIN USART2_Init 1 */
 339:Src/main.c    **** 
 340:Src/main.c    ****   /* USER CODE END USART2_Init 1 */
 341:Src/main.c    ****   huart2.Instance = USART2;
 342:Src/main.c    ****   huart2.Init.BaudRate = 4800;
 343:Src/main.c    ****   huart2.Init.WordLength = UART_WORDLENGTH_8B;
 344:Src/main.c    ****   huart2.Init.StopBits = UART_STOPBITS_1;
 345:Src/main.c    ****   huart2.Init.Parity = UART_PARITY_NONE;
 346:Src/main.c    ****   huart2.Init.Mode = UART_MODE_TX_RX;
 347:Src/main.c    ****   huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 348:Src/main.c    ****   huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 349:Src/main.c    ****   if (HAL_UART_Init(&huart2) != HAL_OK)
 350:Src/main.c    ****   {
 351:Src/main.c    ****     Error_Handler();
 352:Src/main.c    ****   }
 353:Src/main.c    ****   /* USER CODE BEGIN USART2_Init 2 */
 354:Src/main.c    **** 
 355:Src/main.c    ****   /* USER CODE END USART2_Init 2 */
 356:Src/main.c    **** 
 357:Src/main.c    **** }
 358:Src/main.c    **** 
 359:Src/main.c    **** /**
 360:Src/main.c    ****   * @brief GPIO Initialization Function
 361:Src/main.c    ****   * @param None
 362:Src/main.c    ****   * @retval None
 363:Src/main.c    ****   */
 364:Src/main.c    **** static void MX_GPIO_Init(void)
 365:Src/main.c    **** {
  25              		.loc 1 365 0
  26              		.cfi_startproc
  27              		@ args = 0, pretend = 0, frame = 32
  28              		@ frame_needed = 0, uses_anonymous_args = 0
  29 0000 30B5     		push	{r4, r5, lr}
  30              	.LCFI0:
  31              		.cfi_def_cfa_offset 12
  32              		.cfi_offset 4, -12
  33              		.cfi_offset 5, -8
  34              		.cfi_offset 14, -4
  35 0002 89B0     		sub	sp, sp, #36
ARM GAS  /tmp/ccxDmQN3.s 			page 8


  36              	.LCFI1:
  37              		.cfi_def_cfa_offset 48
 366:Src/main.c    ****   GPIO_InitTypeDef GPIO_InitStruct = {0};
  38              		.loc 1 366 0
  39 0004 0024     		movs	r4, #0
  40 0006 0494     		str	r4, [sp, #16]
  41 0008 0594     		str	r4, [sp, #20]
  42 000a 0694     		str	r4, [sp, #24]
  43 000c 0794     		str	r4, [sp, #28]
  44              	.LBB2:
 367:Src/main.c    **** 
 368:Src/main.c    ****   /* GPIO Ports Clock Enable */
 369:Src/main.c    ****   __HAL_RCC_GPIOC_CLK_ENABLE();
  45              		.loc 1 369 0
  46 000e 1C4B     		ldr	r3, .L3
  47 0010 9A69     		ldr	r2, [r3, #24]
  48 0012 42F01002 		orr	r2, r2, #16
  49 0016 9A61     		str	r2, [r3, #24]
  50 0018 9A69     		ldr	r2, [r3, #24]
  51 001a 02F01002 		and	r2, r2, #16
  52 001e 0092     		str	r2, [sp]
  53 0020 009A     		ldr	r2, [sp]
  54              	.LBE2:
  55              	.LBB3:
 370:Src/main.c    ****   __HAL_RCC_GPIOD_CLK_ENABLE();
  56              		.loc 1 370 0
  57 0022 9A69     		ldr	r2, [r3, #24]
  58 0024 42F02002 		orr	r2, r2, #32
  59 0028 9A61     		str	r2, [r3, #24]
  60 002a 9A69     		ldr	r2, [r3, #24]
  61 002c 02F02002 		and	r2, r2, #32
  62 0030 0192     		str	r2, [sp, #4]
  63 0032 019A     		ldr	r2, [sp, #4]
  64              	.LBE3:
  65              	.LBB4:
 371:Src/main.c    ****   __HAL_RCC_GPIOA_CLK_ENABLE();
  66              		.loc 1 371 0
  67 0034 9A69     		ldr	r2, [r3, #24]
  68 0036 42F00402 		orr	r2, r2, #4
  69 003a 9A61     		str	r2, [r3, #24]
  70 003c 9A69     		ldr	r2, [r3, #24]
  71 003e 02F00402 		and	r2, r2, #4
  72 0042 0292     		str	r2, [sp, #8]
  73 0044 029A     		ldr	r2, [sp, #8]
  74              	.LBE4:
  75              	.LBB5:
 372:Src/main.c    ****   __HAL_RCC_GPIOB_CLK_ENABLE();
  76              		.loc 1 372 0
  77 0046 9A69     		ldr	r2, [r3, #24]
  78 0048 42F00802 		orr	r2, r2, #8
  79 004c 9A61     		str	r2, [r3, #24]
  80 004e 9B69     		ldr	r3, [r3, #24]
  81 0050 03F00803 		and	r3, r3, #8
  82 0054 0393     		str	r3, [sp, #12]
  83 0056 039B     		ldr	r3, [sp, #12]
  84              	.LBE5:
 373:Src/main.c    **** 
ARM GAS  /tmp/ccxDmQN3.s 			page 9


 374:Src/main.c    ****   /*Configure GPIO pin Output Level */
 375:Src/main.c    ****   HAL_GPIO_WritePin(GPIOB, CSS_PGA_Pin|CSS_DAC_Pin, GPIO_PIN_RESET);
  85              		.loc 1 375 0
  86 0058 0A4D     		ldr	r5, .L3+4
  87 005a 2246     		mov	r2, r4
  88 005c 0321     		movs	r1, #3
  89 005e 2846     		mov	r0, r5
  90 0060 FFF7FEFF 		bl	HAL_GPIO_WritePin
  91              	.LVL0:
 376:Src/main.c    **** 
 377:Src/main.c    ****   /*Configure GPIO pins : CSS_PGA_Pin CSS_DAC_Pin */
 378:Src/main.c    ****   GPIO_InitStruct.Pin = CSS_PGA_Pin|CSS_DAC_Pin;
  92              		.loc 1 378 0
  93 0064 0323     		movs	r3, #3
  94 0066 0493     		str	r3, [sp, #16]
 379:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  95              		.loc 1 379 0
  96 0068 0123     		movs	r3, #1
  97 006a 0593     		str	r3, [sp, #20]
 380:Src/main.c    ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
  98              		.loc 1 380 0
  99 006c 0694     		str	r4, [sp, #24]
 381:Src/main.c    ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 100              		.loc 1 381 0
 101 006e 0223     		movs	r3, #2
 102 0070 0793     		str	r3, [sp, #28]
 382:Src/main.c    ****   HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 103              		.loc 1 382 0
 104 0072 04A9     		add	r1, sp, #16
 105 0074 2846     		mov	r0, r5
 106 0076 FFF7FEFF 		bl	HAL_GPIO_Init
 107              	.LVL1:
 383:Src/main.c    **** 
 384:Src/main.c    **** }
 108              		.loc 1 384 0
 109 007a 09B0     		add	sp, sp, #36
 110              	.LCFI2:
 111              		.cfi_def_cfa_offset 12
 112              		@ sp needed
 113 007c 30BD     		pop	{r4, r5, pc}
 114              	.L4:
 115 007e 00BF     		.align	2
 116              	.L3:
 117 0080 00100240 		.word	1073876992
 118 0084 000C0140 		.word	1073810432
 119              		.cfi_endproc
 120              	.LFE72:
 122              		.section	.text.MX_ADC1_Init,"ax",%progbits
 123              		.align	1
 124              		.syntax unified
 125              		.thumb
 126              		.thumb_func
 127              		.fpu softvfp
 129              	MX_ADC1_Init:
 130              	.LFB68:
 216:Src/main.c    **** 
 131              		.loc 1 216 0
ARM GAS  /tmp/ccxDmQN3.s 			page 10


 132              		.cfi_startproc
 133              		@ args = 0, pretend = 0, frame = 16
 134              		@ frame_needed = 0, uses_anonymous_args = 0
 135 0000 70B5     		push	{r4, r5, r6, lr}
 136              	.LCFI3:
 137              		.cfi_def_cfa_offset 16
 138              		.cfi_offset 4, -16
 139              		.cfi_offset 5, -12
 140              		.cfi_offset 6, -8
 141              		.cfi_offset 14, -4
 142 0002 84B0     		sub	sp, sp, #16
 143              	.LCFI4:
 144              		.cfi_def_cfa_offset 32
 222:Src/main.c    **** 
 145              		.loc 1 222 0
 146 0004 0025     		movs	r5, #0
 147 0006 0195     		str	r5, [sp, #4]
 148 0008 0295     		str	r5, [sp, #8]
 149 000a 0395     		str	r5, [sp, #12]
 229:Src/main.c    ****   hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 150              		.loc 1 229 0
 151 000c 0B4C     		ldr	r4, .L7
 152 000e 0C4B     		ldr	r3, .L7+4
 153 0010 2360     		str	r3, [r4]
 230:Src/main.c    ****   hadc1.Init.ContinuousConvMode = DISABLE;
 154              		.loc 1 230 0
 155 0012 A560     		str	r5, [r4, #8]
 231:Src/main.c    ****   hadc1.Init.DiscontinuousConvMode = DISABLE;
 156              		.loc 1 231 0
 157 0014 2573     		strb	r5, [r4, #12]
 232:Src/main.c    ****   hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 158              		.loc 1 232 0
 159 0016 2575     		strb	r5, [r4, #20]
 233:Src/main.c    ****   hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 160              		.loc 1 233 0
 161 0018 4FF46023 		mov	r3, #917504
 162 001c E361     		str	r3, [r4, #28]
 234:Src/main.c    ****   hadc1.Init.NbrOfConversion = 1;
 163              		.loc 1 234 0
 164 001e 6560     		str	r5, [r4, #4]
 235:Src/main.c    ****   if (HAL_ADC_Init(&hadc1) != HAL_OK)
 165              		.loc 1 235 0
 166 0020 0126     		movs	r6, #1
 167 0022 2661     		str	r6, [r4, #16]
 236:Src/main.c    ****   {
 168              		.loc 1 236 0
 169 0024 2046     		mov	r0, r4
 170 0026 FFF7FEFF 		bl	HAL_ADC_Init
 171              	.LVL2:
 242:Src/main.c    ****   sConfig.Rank = ADC_REGULAR_RANK_1;
 172              		.loc 1 242 0
 173 002a 0195     		str	r5, [sp, #4]
 243:Src/main.c    ****   sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 174              		.loc 1 243 0
 175 002c 0296     		str	r6, [sp, #8]
 244:Src/main.c    ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 176              		.loc 1 244 0
ARM GAS  /tmp/ccxDmQN3.s 			page 11


 177 002e 0395     		str	r5, [sp, #12]
 245:Src/main.c    ****   {
 178              		.loc 1 245 0
 179 0030 01A9     		add	r1, sp, #4
 180 0032 2046     		mov	r0, r4
 181 0034 FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 182              	.LVL3:
 253:Src/main.c    **** 
 183              		.loc 1 253 0
 184 0038 04B0     		add	sp, sp, #16
 185              	.LCFI5:
 186              		.cfi_def_cfa_offset 16
 187              		@ sp needed
 188 003a 70BD     		pop	{r4, r5, r6, pc}
 189              	.L8:
 190              		.align	2
 191              	.L7:
 192 003c 00000000 		.word	hadc1
 193 0040 00240140 		.word	1073816576
 194              		.cfi_endproc
 195              	.LFE68:
 197              		.section	.text.MX_SPI1_Init,"ax",%progbits
 198              		.align	1
 199              		.syntax unified
 200              		.thumb
 201              		.thumb_func
 202              		.fpu softvfp
 204              	MX_SPI1_Init:
 205              	.LFB69:
 261:Src/main.c    **** 
 206              		.loc 1 261 0
 207              		.cfi_startproc
 208              		@ args = 0, pretend = 0, frame = 0
 209              		@ frame_needed = 0, uses_anonymous_args = 0
 210 0000 08B5     		push	{r3, lr}
 211              	.LCFI6:
 212              		.cfi_def_cfa_offset 8
 213              		.cfi_offset 3, -8
 214              		.cfi_offset 14, -4
 271:Src/main.c    ****   hspi1.Init.Mode = SPI_MODE_MASTER;
 215              		.loc 1 271 0
 216 0002 0E48     		ldr	r0, .L11
 217 0004 0E4B     		ldr	r3, .L11+4
 218 0006 0360     		str	r3, [r0]
 272:Src/main.c    ****   hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 219              		.loc 1 272 0
 220 0008 4FF48273 		mov	r3, #260
 221 000c 4360     		str	r3, [r0, #4]
 273:Src/main.c    ****   hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 222              		.loc 1 273 0
 223 000e 4FF40043 		mov	r3, #32768
 224 0012 8360     		str	r3, [r0, #8]
 274:Src/main.c    ****   hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 225              		.loc 1 274 0
 226 0014 0023     		movs	r3, #0
 227 0016 C360     		str	r3, [r0, #12]
 275:Src/main.c    ****   hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
ARM GAS  /tmp/ccxDmQN3.s 			page 12


 228              		.loc 1 275 0
 229 0018 0222     		movs	r2, #2
 230 001a 0261     		str	r2, [r0, #16]
 276:Src/main.c    ****   hspi1.Init.NSS = SPI_NSS_SOFT;
 231              		.loc 1 276 0
 232 001c 0122     		movs	r2, #1
 233 001e 4261     		str	r2, [r0, #20]
 277:Src/main.c    ****   hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 234              		.loc 1 277 0
 235 0020 4FF40072 		mov	r2, #512
 236 0024 8261     		str	r2, [r0, #24]
 278:Src/main.c    ****   hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 237              		.loc 1 278 0
 238 0026 0822     		movs	r2, #8
 239 0028 C261     		str	r2, [r0, #28]
 279:Src/main.c    ****   hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 240              		.loc 1 279 0
 241 002a 0362     		str	r3, [r0, #32]
 280:Src/main.c    ****   hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 242              		.loc 1 280 0
 243 002c 4362     		str	r3, [r0, #36]
 281:Src/main.c    ****   hspi1.Init.CRCPolynomial = 10;
 244              		.loc 1 281 0
 245 002e 8362     		str	r3, [r0, #40]
 282:Src/main.c    ****   if (HAL_SPI_Init(&hspi1) != HAL_OK)
 246              		.loc 1 282 0
 247 0030 0A23     		movs	r3, #10
 248 0032 C362     		str	r3, [r0, #44]
 283:Src/main.c    ****   {
 249              		.loc 1 283 0
 250 0034 FFF7FEFF 		bl	HAL_SPI_Init
 251              	.LVL4:
 252 0038 08BD     		pop	{r3, pc}
 253              	.L12:
 254 003a 00BF     		.align	2
 255              	.L11:
 256 003c 00000000 		.word	hspi1
 257 0040 00300140 		.word	1073819648
 258              		.cfi_endproc
 259              	.LFE69:
 261              		.section	.text.MX_USART1_UART_Init,"ax",%progbits
 262              		.align	1
 263              		.syntax unified
 264              		.thumb
 265              		.thumb_func
 266              		.fpu softvfp
 268              	MX_USART1_UART_Init:
 269              	.LFB70:
 299:Src/main.c    **** 
 270              		.loc 1 299 0
 271              		.cfi_startproc
 272              		@ args = 0, pretend = 0, frame = 0
 273              		@ frame_needed = 0, uses_anonymous_args = 0
 274 0000 08B5     		push	{r3, lr}
 275              	.LCFI7:
 276              		.cfi_def_cfa_offset 8
 277              		.cfi_offset 3, -8
ARM GAS  /tmp/ccxDmQN3.s 			page 13


 278              		.cfi_offset 14, -4
 308:Src/main.c    ****   huart1.Init.BaudRate = 460800;
 279              		.loc 1 308 0
 280 0002 0848     		ldr	r0, .L15
 281 0004 084B     		ldr	r3, .L15+4
 282 0006 0360     		str	r3, [r0]
 309:Src/main.c    ****   huart1.Init.WordLength = UART_WORDLENGTH_8B;
 283              		.loc 1 309 0
 284 0008 4FF4E123 		mov	r3, #460800
 285 000c 4360     		str	r3, [r0, #4]
 310:Src/main.c    ****   huart1.Init.StopBits = UART_STOPBITS_1;
 286              		.loc 1 310 0
 287 000e 0023     		movs	r3, #0
 288 0010 8360     		str	r3, [r0, #8]
 311:Src/main.c    ****   huart1.Init.Parity = UART_PARITY_NONE;
 289              		.loc 1 311 0
 290 0012 C360     		str	r3, [r0, #12]
 312:Src/main.c    ****   huart1.Init.Mode = UART_MODE_TX_RX;
 291              		.loc 1 312 0
 292 0014 0361     		str	r3, [r0, #16]
 313:Src/main.c    ****   huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 293              		.loc 1 313 0
 294 0016 0C22     		movs	r2, #12
 295 0018 4261     		str	r2, [r0, #20]
 314:Src/main.c    ****   huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 296              		.loc 1 314 0
 297 001a 8361     		str	r3, [r0, #24]
 315:Src/main.c    ****   if (HAL_UART_Init(&huart1) != HAL_OK)
 298              		.loc 1 315 0
 299 001c C361     		str	r3, [r0, #28]
 316:Src/main.c    ****   {
 300              		.loc 1 316 0
 301 001e FFF7FEFF 		bl	HAL_UART_Init
 302              	.LVL5:
 303 0022 08BD     		pop	{r3, pc}
 304              	.L16:
 305              		.align	2
 306              	.L15:
 307 0024 00000000 		.word	huart1
 308 0028 00380140 		.word	1073821696
 309              		.cfi_endproc
 310              	.LFE70:
 312              		.section	.text.MX_USART2_UART_Init,"ax",%progbits
 313              		.align	1
 314              		.syntax unified
 315              		.thumb
 316              		.thumb_func
 317              		.fpu softvfp
 319              	MX_USART2_UART_Init:
 320              	.LFB71:
 332:Src/main.c    **** 
 321              		.loc 1 332 0
 322              		.cfi_startproc
 323              		@ args = 0, pretend = 0, frame = 0
 324              		@ frame_needed = 0, uses_anonymous_args = 0
 325 0000 08B5     		push	{r3, lr}
 326              	.LCFI8:
ARM GAS  /tmp/ccxDmQN3.s 			page 14


 327              		.cfi_def_cfa_offset 8
 328              		.cfi_offset 3, -8
 329              		.cfi_offset 14, -4
 341:Src/main.c    ****   huart2.Init.BaudRate = 4800;
 330              		.loc 1 341 0
 331 0002 0848     		ldr	r0, .L19
 332 0004 084B     		ldr	r3, .L19+4
 333 0006 0360     		str	r3, [r0]
 342:Src/main.c    ****   huart2.Init.WordLength = UART_WORDLENGTH_8B;
 334              		.loc 1 342 0
 335 0008 4FF49653 		mov	r3, #4800
 336 000c 4360     		str	r3, [r0, #4]
 343:Src/main.c    ****   huart2.Init.StopBits = UART_STOPBITS_1;
 337              		.loc 1 343 0
 338 000e 0023     		movs	r3, #0
 339 0010 8360     		str	r3, [r0, #8]
 344:Src/main.c    ****   huart2.Init.Parity = UART_PARITY_NONE;
 340              		.loc 1 344 0
 341 0012 C360     		str	r3, [r0, #12]
 345:Src/main.c    ****   huart2.Init.Mode = UART_MODE_TX_RX;
 342              		.loc 1 345 0
 343 0014 0361     		str	r3, [r0, #16]
 346:Src/main.c    ****   huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 344              		.loc 1 346 0
 345 0016 0C22     		movs	r2, #12
 346 0018 4261     		str	r2, [r0, #20]
 347:Src/main.c    ****   huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 347              		.loc 1 347 0
 348 001a 8361     		str	r3, [r0, #24]
 348:Src/main.c    ****   if (HAL_UART_Init(&huart2) != HAL_OK)
 349              		.loc 1 348 0
 350 001c C361     		str	r3, [r0, #28]
 349:Src/main.c    ****   {
 351              		.loc 1 349 0
 352 001e FFF7FEFF 		bl	HAL_UART_Init
 353              	.LVL6:
 354 0022 08BD     		pop	{r3, pc}
 355              	.L20:
 356              		.align	2
 357              	.L19:
 358 0024 00000000 		.word	huart2
 359 0028 00440040 		.word	1073759232
 360              		.cfi_endproc
 361              	.LFE71:
 363              		.section	.text.SystemClock_Config,"ax",%progbits
 364              		.align	1
 365              		.global	SystemClock_Config
 366              		.syntax unified
 367              		.thumb
 368              		.thumb_func
 369              		.fpu softvfp
 371              	SystemClock_Config:
 372              	.LFB67:
 171:Src/main.c    ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 373              		.loc 1 171 0
 374              		.cfi_startproc
 375              		@ args = 0, pretend = 0, frame = 80
ARM GAS  /tmp/ccxDmQN3.s 			page 15


 376              		@ frame_needed = 0, uses_anonymous_args = 0
 377 0000 30B5     		push	{r4, r5, lr}
 378              	.LCFI9:
 379              		.cfi_def_cfa_offset 12
 380              		.cfi_offset 4, -12
 381              		.cfi_offset 5, -8
 382              		.cfi_offset 14, -4
 383 0002 95B0     		sub	sp, sp, #84
 384              	.LCFI10:
 385              		.cfi_def_cfa_offset 96
 172:Src/main.c    ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 386              		.loc 1 172 0
 387 0004 2822     		movs	r2, #40
 388 0006 0021     		movs	r1, #0
 389 0008 0DEB0200 		add	r0, sp, r2
 390 000c FFF7FEFF 		bl	memset
 391              	.LVL7:
 173:Src/main.c    ****   RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 392              		.loc 1 173 0
 393 0010 0024     		movs	r4, #0
 394 0012 0594     		str	r4, [sp, #20]
 395 0014 0694     		str	r4, [sp, #24]
 396 0016 0794     		str	r4, [sp, #28]
 397 0018 0894     		str	r4, [sp, #32]
 398 001a 0994     		str	r4, [sp, #36]
 174:Src/main.c    **** 
 399              		.loc 1 174 0
 400 001c 0194     		str	r4, [sp, #4]
 401 001e 0294     		str	r4, [sp, #8]
 402 0020 0394     		str	r4, [sp, #12]
 403 0022 0494     		str	r4, [sp, #16]
 178:Src/main.c    ****   RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 404              		.loc 1 178 0
 405 0024 0122     		movs	r2, #1
 406 0026 0A92     		str	r2, [sp, #40]
 179:Src/main.c    ****   RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 407              		.loc 1 179 0
 408 0028 4FF48033 		mov	r3, #65536
 409 002c 0B93     		str	r3, [sp, #44]
 181:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 410              		.loc 1 181 0
 411 002e 0E92     		str	r2, [sp, #56]
 182:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 412              		.loc 1 182 0
 413 0030 0225     		movs	r5, #2
 414 0032 1195     		str	r5, [sp, #68]
 183:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 415              		.loc 1 183 0
 416 0034 1293     		str	r3, [sp, #72]
 184:Src/main.c    ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 417              		.loc 1 184 0
 418 0036 4FF4E013 		mov	r3, #1835008
 419 003a 1393     		str	r3, [sp, #76]
 185:Src/main.c    ****   {
 420              		.loc 1 185 0
 421 003c 0AA8     		add	r0, sp, #40
 422 003e FFF7FEFF 		bl	HAL_RCC_OscConfig
ARM GAS  /tmp/ccxDmQN3.s 			page 16


 423              	.LVL8:
 191:Src/main.c    ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 424              		.loc 1 191 0
 425 0042 0F23     		movs	r3, #15
 426 0044 0593     		str	r3, [sp, #20]
 193:Src/main.c    ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 427              		.loc 1 193 0
 428 0046 0695     		str	r5, [sp, #24]
 194:Src/main.c    ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 429              		.loc 1 194 0
 430 0048 0794     		str	r4, [sp, #28]
 195:Src/main.c    ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 431              		.loc 1 195 0
 432 004a 4FF48063 		mov	r3, #1024
 433 004e 0893     		str	r3, [sp, #32]
 196:Src/main.c    **** 
 434              		.loc 1 196 0
 435 0050 0994     		str	r4, [sp, #36]
 198:Src/main.c    ****   {
 436              		.loc 1 198 0
 437 0052 2946     		mov	r1, r5
 438 0054 05A8     		add	r0, sp, #20
 439 0056 FFF7FEFF 		bl	HAL_RCC_ClockConfig
 440              	.LVL9:
 202:Src/main.c    ****   PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 441              		.loc 1 202 0
 442 005a 0195     		str	r5, [sp, #4]
 203:Src/main.c    ****   if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 443              		.loc 1 203 0
 444 005c 4FF40043 		mov	r3, #32768
 445 0060 0393     		str	r3, [sp, #12]
 204:Src/main.c    ****   {
 446              		.loc 1 204 0
 447 0062 01A8     		add	r0, sp, #4
 448 0064 FFF7FEFF 		bl	HAL_RCCEx_PeriphCLKConfig
 449              	.LVL10:
 208:Src/main.c    **** 
 450              		.loc 1 208 0
 451 0068 15B0     		add	sp, sp, #84
 452              	.LCFI11:
 453              		.cfi_def_cfa_offset 12
 454              		@ sp needed
 455 006a 30BD     		pop	{r4, r5, pc}
 456              		.cfi_endproc
 457              	.LFE67:
 459              		.section	.text.setGain,"ax",%progbits
 460              		.align	1
 461              		.global	setGain
 462              		.syntax unified
 463              		.thumb
 464              		.thumb_func
 465              		.fpu softvfp
 467              	setGain:
 468              	.LFB73:
 385:Src/main.c    **** 
 386:Src/main.c    **** /* USER CODE BEGIN 4 */
 387:Src/main.c    **** void setGain(gain_t new_gain)
ARM GAS  /tmp/ccxDmQN3.s 			page 17


 388:Src/main.c    **** {
 469              		.loc 1 388 0
 470              		.cfi_startproc
 471              		@ args = 0, pretend = 0, frame = 0
 472              		@ frame_needed = 0, uses_anonymous_args = 0
 473              	.LVL11:
 474 0000 70B5     		push	{r4, r5, r6, lr}
 475              	.LCFI12:
 476              		.cfi_def_cfa_offset 16
 477              		.cfi_offset 4, -16
 478              		.cfi_offset 5, -12
 479              		.cfi_offset 6, -8
 480              		.cfi_offset 14, -4
 481 0002 0646     		mov	r6, r0
 389:Src/main.c    **** 	memset(&SPI_msg[0], 0, MAX_LOG_MSG_SIZE);
 482              		.loc 1 389 0
 483 0004 104C     		ldr	r4, .L25
 484 0006 8025     		movs	r5, #128
 485 0008 2A46     		mov	r2, r5
 486 000a 0021     		movs	r1, #0
 487 000c 2046     		mov	r0, r4
 488              	.LVL12:
 489 000e FFF7FEFF 		bl	memset
 490              	.LVL13:
 390:Src/main.c    **** 	SPI_msg[0] = 0x40;
 491              		.loc 1 390 0
 492 0012 4023     		movs	r3, #64
 493 0014 2370     		strb	r3, [r4]
 391:Src/main.c    ****     SPI_msg[1] = new_gain;
 494              		.loc 1 391 0
 495 0016 6670     		strb	r6, [r4, #1]
 392:Src/main.c    ****     HAL_GPIO_WritePin(CSS_PGA_GPIO_Port, CSS_PGA_Pin, GPIO_PIN_RESET);
 496              		.loc 1 392 0
 497 0018 0C4E     		ldr	r6, .L25+4
 498 001a 0022     		movs	r2, #0
 499 001c 0121     		movs	r1, #1
 500 001e 3046     		mov	r0, r6
 501 0020 FFF7FEFF 		bl	HAL_GPIO_WritePin
 502              	.LVL14:
 393:Src/main.c    ****     HAL_SPI_Transmit(&hspi1, &SPI_msg[0], 2, HAL_MAX_DELAY);
 503              		.loc 1 393 0
 504 0024 4FF0FF33 		mov	r3, #-1
 505 0028 0222     		movs	r2, #2
 506 002a 2146     		mov	r1, r4
 507 002c 0848     		ldr	r0, .L25+8
 508 002e FFF7FEFF 		bl	HAL_SPI_Transmit
 509              	.LVL15:
 394:Src/main.c    ****     HAL_GPIO_WritePin(CSS_PGA_GPIO_Port, CSS_PGA_Pin, GPIO_PIN_SET);
 510              		.loc 1 394 0
 511 0032 0122     		movs	r2, #1
 512 0034 1146     		mov	r1, r2
 513 0036 3046     		mov	r0, r6
 514 0038 FFF7FEFF 		bl	HAL_GPIO_WritePin
 515              	.LVL16:
 395:Src/main.c    ****     memset(&SPI_msg[0], 0, MAX_LOG_MSG_SIZE);
 516              		.loc 1 395 0
 517 003c 2A46     		mov	r2, r5
ARM GAS  /tmp/ccxDmQN3.s 			page 18


 518 003e 0021     		movs	r1, #0
 519 0040 2046     		mov	r0, r4
 520 0042 FFF7FEFF 		bl	memset
 521              	.LVL17:
 522 0046 70BD     		pop	{r4, r5, r6, pc}
 523              	.L26:
 524              		.align	2
 525              	.L25:
 526 0048 00000000 		.word	.LANCHOR0
 527 004c 000C0140 		.word	1073810432
 528 0050 00000000 		.word	hspi1
 529              		.cfi_endproc
 530              	.LFE73:
 532              		.section	.text.setVref,"ax",%progbits
 533              		.align	1
 534              		.global	setVref
 535              		.syntax unified
 536              		.thumb
 537              		.thumb_func
 538              		.fpu softvfp
 540              	setVref:
 541              	.LFB74:
 396:Src/main.c    **** }
 397:Src/main.c    **** 
 398:Src/main.c    **** void setVref(uint16_t _new_Vref)
 399:Src/main.c    **** {
 542              		.loc 1 399 0
 543              		.cfi_startproc
 544              		@ args = 0, pretend = 0, frame = 8
 545              		@ frame_needed = 0, uses_anonymous_args = 0
 546              	.LVL18:
 547 0000 70B5     		push	{r4, r5, r6, lr}
 548              	.LCFI13:
 549              		.cfi_def_cfa_offset 16
 550              		.cfi_offset 4, -16
 551              		.cfi_offset 5, -12
 552              		.cfi_offset 6, -8
 553              		.cfi_offset 14, -4
 554 0002 82B0     		sub	sp, sp, #8
 555              	.LCFI14:
 556              		.cfi_def_cfa_offset 24
 400:Src/main.c    **** 	volatile uint16_t new_Vref = _new_Vref;
 557              		.loc 1 400 0
 558 0004 ADF80600 		strh	r0, [sp, #6]	@ movhi
 401:Src/main.c    **** 	if ( new_Vref > 4095 ) new_Vref = 4095;
 559              		.loc 1 401 0
 560 0008 BDF80630 		ldrh	r3, [sp, #6]
 561 000c 9BB2     		uxth	r3, r3
 562 000e B3F5805F 		cmp	r3, #4096
 563 0012 03D3     		bcc	.L28
 564              		.loc 1 401 0 is_stmt 0 discriminator 1
 565 0014 40F6FF73 		movw	r3, #4095
 566 0018 ADF80630 		strh	r3, [sp, #6]	@ movhi
 567              	.L28:
 402:Src/main.c    **** 
 403:Src/main.c    **** 	memset(&SPI_msg[0], 0, MAX_LOG_MSG_SIZE);
 568              		.loc 1 403 0 is_stmt 1
ARM GAS  /tmp/ccxDmQN3.s 			page 19


 569 001c 144C     		ldr	r4, .L30
 570 001e 8025     		movs	r5, #128
 571 0020 2A46     		mov	r2, r5
 572 0022 0021     		movs	r1, #0
 573 0024 2046     		mov	r0, r4
 574              	.LVL19:
 575 0026 FFF7FEFF 		bl	memset
 576              	.LVL20:
 404:Src/main.c    **** 	SPI_msg[0] = ( 0x70 | ( ( new_Vref >> 8 ) & 0xF ) );
 577              		.loc 1 404 0
 578 002a BDF80630 		ldrh	r3, [sp, #6]
 579 002e C3F30323 		ubfx	r3, r3, #8, #4
 580 0032 43F07003 		orr	r3, r3, #112
 581 0036 2370     		strb	r3, [r4]
 405:Src/main.c    ****     SPI_msg[1] = ( new_Vref & 0xFF );
 582              		.loc 1 405 0
 583 0038 BDF80630 		ldrh	r3, [sp, #6]
 584 003c 6370     		strb	r3, [r4, #1]
 406:Src/main.c    ****     HAL_GPIO_WritePin(CSS_DAC_GPIO_Port, CSS_DAC_Pin, GPIO_PIN_RESET);
 585              		.loc 1 406 0
 586 003e 0D4E     		ldr	r6, .L30+4
 587 0040 0022     		movs	r2, #0
 588 0042 0221     		movs	r1, #2
 589 0044 3046     		mov	r0, r6
 590 0046 FFF7FEFF 		bl	HAL_GPIO_WritePin
 591              	.LVL21:
 407:Src/main.c    ****     HAL_SPI_Transmit(&hspi1, &SPI_msg[0], 2, HAL_MAX_DELAY);
 592              		.loc 1 407 0
 593 004a 4FF0FF33 		mov	r3, #-1
 594 004e 0222     		movs	r2, #2
 595 0050 2146     		mov	r1, r4
 596 0052 0948     		ldr	r0, .L30+8
 597 0054 FFF7FEFF 		bl	HAL_SPI_Transmit
 598              	.LVL22:
 408:Src/main.c    ****     HAL_GPIO_WritePin(CSS_DAC_GPIO_Port, CSS_DAC_Pin, GPIO_PIN_SET);
 599              		.loc 1 408 0
 600 0058 0122     		movs	r2, #1
 601 005a 0221     		movs	r1, #2
 602 005c 3046     		mov	r0, r6
 603 005e FFF7FEFF 		bl	HAL_GPIO_WritePin
 604              	.LVL23:
 409:Src/main.c    ****     memset(&SPI_msg[0], 0, MAX_LOG_MSG_SIZE);
 605              		.loc 1 409 0
 606 0062 2A46     		mov	r2, r5
 607 0064 0021     		movs	r1, #0
 608 0066 2046     		mov	r0, r4
 609 0068 FFF7FEFF 		bl	memset
 610              	.LVL24:
 410:Src/main.c    **** }
 611              		.loc 1 410 0
 612 006c 02B0     		add	sp, sp, #8
 613              	.LCFI15:
 614              		.cfi_def_cfa_offset 16
 615              		@ sp needed
 616 006e 70BD     		pop	{r4, r5, r6, pc}
 617              	.L31:
 618              		.align	2
ARM GAS  /tmp/ccxDmQN3.s 			page 20


 619              	.L30:
 620 0070 00000000 		.word	.LANCHOR0
 621 0074 000C0140 		.word	1073810432
 622 0078 00000000 		.word	hspi1
 623              		.cfi_endproc
 624              	.LFE74:
 626              		.global	__aeabi_fsub
 627              		.global	__aeabi_f2d
 628              		.global	__aeabi_ddiv
 629              		.global	__aeabi_d2f
 630              		.global	__aeabi_i2f
 631              		.global	__aeabi_fcmpgt
 632              		.global	__aeabi_fmul
 633              		.global	__aeabi_fdiv
 634              		.global	__aeabi_d2uiz
 635              		.section	.text.main,"ax",%progbits
 636              		.align	1
 637              		.global	main
 638              		.syntax unified
 639              		.thumb
 640              		.thumb_func
 641              		.fpu softvfp
 643              	main:
 644              	.LFB66:
  80:Src/main.c    ****   /* USER CODE BEGIN 1 */
 645              		.loc 1 80 0
 646              		.cfi_startproc
 647              		@ args = 0, pretend = 0, frame = 0
 648              		@ frame_needed = 0, uses_anonymous_args = 0
 649 0000 70B5     		push	{r4, r5, r6, lr}
 650              	.LCFI16:
 651              		.cfi_def_cfa_offset 16
 652              		.cfi_offset 4, -16
 653              		.cfi_offset 5, -12
 654              		.cfi_offset 6, -8
 655              		.cfi_offset 14, -4
 656 0002 82B0     		sub	sp, sp, #8
 657              	.LCFI17:
 658              		.cfi_def_cfa_offset 24
  97:Src/main.c    **** 
 659              		.loc 1 97 0
 660 0004 FFF7FEFF 		bl	HAL_Init
 661              	.LVL25:
 104:Src/main.c    **** 
 662              		.loc 1 104 0
 663 0008 FFF7FEFF 		bl	SystemClock_Config
 664              	.LVL26:
 111:Src/main.c    ****   MX_ADC1_Init();
 665              		.loc 1 111 0
 666 000c FFF7FEFF 		bl	MX_GPIO_Init
 667              	.LVL27:
 112:Src/main.c    ****   MX_SPI1_Init();
 668              		.loc 1 112 0
 669 0010 FFF7FEFF 		bl	MX_ADC1_Init
 670              	.LVL28:
 113:Src/main.c    ****   MX_USART1_UART_Init();
 671              		.loc 1 113 0
ARM GAS  /tmp/ccxDmQN3.s 			page 21


 672 0014 FFF7FEFF 		bl	MX_SPI1_Init
 673              	.LVL29:
 114:Src/main.c    ****   MX_USART2_UART_Init();
 674              		.loc 1 114 0
 675 0018 FFF7FEFF 		bl	MX_USART1_UART_Init
 676              	.LVL30:
 115:Src/main.c    ****   /* USER CODE BEGIN 2 */
 677              		.loc 1 115 0
 678 001c FFF7FEFF 		bl	MX_USART2_UART_Init
 679              	.LVL31:
 117:Src/main.c    ****   {
 680              		.loc 1 117 0
 681 0020 4748     		ldr	r0, .L41+8
 682 0022 FFF7FEFF 		bl	HAL_ADCEx_Calibration_Start
 683              	.LVL32:
 684 0026 6BE0     		b	.L38
 685              	.LVL33:
 686              	.L40:
 687              	.LBB6:
 136:Src/main.c    ****     	{
 688              		.loc 1 136 0 discriminator 2
 689 0028 464A     		ldr	r2, .L41+12
 690 002a 1378     		ldrb	r3, [r2]	@ zero_extendqisi2
 691 002c 013B     		subs	r3, r3, #1
 692 002e DBB2     		uxtb	r3, r3
 693 0030 1370     		strb	r3, [r2]
 694              	.L34:
 136:Src/main.c    ****     	{
 695              		.loc 1 136 0 is_stmt 0 discriminator 1
 696 0032 444B     		ldr	r3, .L41+12
 697 0034 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 698 0036 63B1     		cbz	r3, .L35
 138:Src/main.c    ****     	}
 699              		.loc 1 138 0 is_stmt 1
 700 0038 424B     		ldr	r3, .L41+12
 701 003a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 702 003c DBB2     		uxtb	r3, r3
 703 003e 424A     		ldr	r2, .L41+16
 704 0040 D05C     		ldrb	r0, [r2, r3]	@ zero_extendqisi2
 705 0042 FFF7FEFF 		bl	__aeabi_i2f
 706              	.LVL34:
 707 0046 0146     		mov	r1, r0
 708 0048 2046     		mov	r0, r4
 709 004a FFF7FEFF 		bl	__aeabi_fcmpgt
 710              	.LVL35:
 711 004e 0028     		cmp	r0, #0
 712 0050 EAD0     		beq	.L40
 713              	.L35:
 141:Src/main.c    **** 
 714              		.loc 1 141 0
 715 0052 3C4C     		ldr	r4, .L41+12
 716              	.LVL36:
 717 0054 2078     		ldrb	r0, [r4]	@ zero_extendqisi2
 718 0056 FFF7FEFF 		bl	setGain
 719              	.LVL37:
 144:Src/main.c    ****     	uint16_t Vref = round( Vref_float * 4095 / 3.3f );
 720              		.loc 1 144 0
ARM GAS  /tmp/ccxDmQN3.s 			page 22


 721 005a 2378     		ldrb	r3, [r4]	@ zero_extendqisi2
 722 005c DBB2     		uxtb	r3, r3
 723 005e 3A4D     		ldr	r5, .L41+16
 724 0060 3A4A     		ldr	r2, .L41+20
 725 0062 1668     		ldr	r6, [r2]	@ float
 726 0064 E85C     		ldrb	r0, [r5, r3]	@ zero_extendqisi2
 727 0066 FFF7FEFF 		bl	__aeabi_i2f
 728              	.LVL38:
 729 006a 3146     		mov	r1, r6
 730 006c FFF7FEFF 		bl	__aeabi_fmul
 731              	.LVL39:
 732 0070 0646     		mov	r6, r0
 733 0072 2378     		ldrb	r3, [r4]	@ zero_extendqisi2
 734 0074 DBB2     		uxtb	r3, r3
 735 0076 E85C     		ldrb	r0, [r5, r3]	@ zero_extendqisi2
 736 0078 0138     		subs	r0, r0, #1
 737 007a FFF7FEFF 		bl	__aeabi_i2f
 738              	.LVL40:
 739 007e 0146     		mov	r1, r0
 740 0080 3046     		mov	r0, r6
 741 0082 FFF7FEFF 		bl	__aeabi_fdiv
 742              	.LVL41:
 145:Src/main.c    ****     	//update Vref
 743              		.loc 1 145 0
 744 0086 3249     		ldr	r1, .L41+24
 745 0088 FFF7FEFF 		bl	__aeabi_fmul
 746              	.LVL42:
 747 008c 3149     		ldr	r1, .L41+28
 748 008e FFF7FEFF 		bl	__aeabi_fdiv
 749              	.LVL43:
 750 0092 FFF7FEFF 		bl	__aeabi_f2d
 751              	.LVL44:
 752 0096 FFF7FEFF 		bl	round
 753              	.LVL45:
 754 009a FFF7FEFF 		bl	__aeabi_d2uiz
 755              	.LVL46:
 147:Src/main.c    **** 
 756              		.loc 1 147 0
 757 009e 80B2     		uxth	r0, r0
 758 00a0 FFF7FEFF 		bl	setVref
 759              	.LVL47:
 760              	.L33:
 761              	.LBE6:
 152:Src/main.c    ****     while( HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY) != HAL_OK );
 762              		.loc 1 152 0
 763 00a4 2648     		ldr	r0, .L41+8
 764 00a6 FFF7FEFF 		bl	HAL_ADC_Start
 765              	.LVL48:
 766              	.L37:
 153:Src/main.c    ****     lightVal = HAL_ADC_GetValue(&hadc1);
 767              		.loc 1 153 0 discriminator 1
 768 00aa 4FF0FF31 		mov	r1, #-1
 769 00ae 2448     		ldr	r0, .L41+8
 770 00b0 FFF7FEFF 		bl	HAL_ADC_PollForConversion
 771              	.LVL49:
 772 00b4 0028     		cmp	r0, #0
 773 00b6 F8D1     		bne	.L37
ARM GAS  /tmp/ccxDmQN3.s 			page 23


 154:Src/main.c    ****     
 774              		.loc 1 154 0
 775 00b8 2148     		ldr	r0, .L41+8
 776 00ba FFF7FEFF 		bl	HAL_ADC_GetValue
 777              	.LVL50:
 778 00be 80B2     		uxth	r0, r0
 779 00c0 254C     		ldr	r4, .L41+32
 780 00c2 2080     		strh	r0, [r4]	@ movhi
 156:Src/main.c    ****     HAL_UART_Transmit(&huart1, (uint8_t*)&ADC_msg[0], strlen(ADC_msg), HAL_MAX_DELAY);
 781              		.loc 1 156 0
 782 00c4 FFF7FEFF 		bl	HAL_GetTick
 783              	.LVL51:
 784 00c8 2388     		ldrh	r3, [r4]
 785 00ca 9BB2     		uxth	r3, r3
 786 00cc 234C     		ldr	r4, .L41+36
 787 00ce 0093     		str	r3, [sp]
 788 00d0 0346     		mov	r3, r0
 789 00d2 234A     		ldr	r2, .L41+40
 790 00d4 2349     		ldr	r1, .L41+44
 791 00d6 2046     		mov	r0, r4
 792 00d8 FFF7FEFF 		bl	sprintf
 793              	.LVL52:
 157:Src/main.c    **** 
 794              		.loc 1 157 0
 795 00dc 2046     		mov	r0, r4
 796 00de FFF7FEFF 		bl	strlen
 797              	.LVL53:
 798 00e2 4FF0FF33 		mov	r3, #-1
 799 00e6 82B2     		uxth	r2, r0
 800 00e8 2146     		mov	r1, r4
 801 00ea 1F48     		ldr	r0, .L41+48
 802 00ec FFF7FEFF 		bl	HAL_UART_Transmit
 803              	.LVL54:
 159:Src/main.c    **** 
 804              		.loc 1 159 0
 805 00f0 8022     		movs	r2, #128
 806 00f2 0021     		movs	r1, #0
 807 00f4 2046     		mov	r0, r4
 808 00f6 FFF7FEFF 		bl	memset
 809              	.LVL55:
 161:Src/main.c    ****   }
 810              		.loc 1 161 0
 811 00fa 0520     		movs	r0, #5
 812 00fc FFF7FEFF 		bl	HAL_Delay
 813              	.LVL56:
 814              	.L38:
 132:Src/main.c    ****     {
 815              		.loc 1 132 0
 816 0100 1A4B     		ldr	r3, .L41+52
 817 0102 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 818 0104 002B     		cmp	r3, #0
 819 0106 CDD0     		beq	.L33
 820              	.LBB7:
 135:Src/main.c    ****     	for ( gain_idx = GAIN_OF_32; gain_idx > 0; gain_idx--)
 821              		.loc 1 135 0
 822 0108 194B     		ldr	r3, .L41+56
 823 010a 1868     		ldr	r0, [r3]	@ float
ARM GAS  /tmp/ccxDmQN3.s 			page 24


 824 010c 0F4B     		ldr	r3, .L41+20
 825 010e 1968     		ldr	r1, [r3]	@ float
 826 0110 FFF7FEFF 		bl	__aeabi_fsub
 827              	.LVL57:
 828 0114 FFF7FEFF 		bl	__aeabi_f2d
 829              	.LVL58:
 830 0118 0246     		mov	r2, r0
 831 011a 0B46     		mov	r3, r1
 832 011c 06A1     		adr	r1, .L41
 833 011e D1E90001 		ldrd	r0, [r1]
 834 0122 FFF7FEFF 		bl	__aeabi_ddiv
 835              	.LVL59:
 836 0126 FFF7FEFF 		bl	__aeabi_d2f
 837              	.LVL60:
 838 012a 0446     		mov	r4, r0
 839              	.LVL61:
 136:Src/main.c    ****     	{
 840              		.loc 1 136 0
 841 012c 0722     		movs	r2, #7
 842 012e 054B     		ldr	r3, .L41+12
 843 0130 1A70     		strb	r2, [r3]
 844 0132 7EE7     		b	.L34
 845              	.L42:
 846 0134 AFF30080 		.align	3
 847              	.L41:
 848 0138 66666666 		.word	1717986918
 849 013c 66660A40 		.word	1074423398
 850 0140 00000000 		.word	hadc1
 851 0144 00000000 		.word	.LANCHOR4
 852 0148 00000000 		.word	.LANCHOR5
 853 014c 00000000 		.word	.LANCHOR3
 854 0150 00F07F45 		.word	1166012416
 855 0154 33335340 		.word	1079194419
 856 0158 00000000 		.word	.LANCHOR6
 857 015c 00000000 		.word	.LANCHOR8
 858 0160 00000000 		.word	.LANCHOR7
 859 0164 00000000 		.word	.LC0
 860 0168 00000000 		.word	huart1
 861 016c 00000000 		.word	.LANCHOR1
 862 0170 00000000 		.word	.LANCHOR2
 863              	.LBE7:
 864              		.cfi_endproc
 865              	.LFE66:
 867              		.section	.text.Error_Handler,"ax",%progbits
 868              		.align	1
 869              		.global	Error_Handler
 870              		.syntax unified
 871              		.thumb
 872              		.thumb_func
 873              		.fpu softvfp
 875              	Error_Handler:
 876              	.LFB75:
 411:Src/main.c    **** /* USER CODE END 4 */
 412:Src/main.c    **** 
 413:Src/main.c    **** /**
 414:Src/main.c    ****   * @brief  This function is executed in case of error occurrence.
 415:Src/main.c    ****   * @retval None
ARM GAS  /tmp/ccxDmQN3.s 			page 25


 416:Src/main.c    ****   */
 417:Src/main.c    **** void Error_Handler(void)
 418:Src/main.c    **** {
 877              		.loc 1 418 0
 878              		.cfi_startproc
 879              		@ args = 0, pretend = 0, frame = 0
 880              		@ frame_needed = 0, uses_anonymous_args = 0
 881              		@ link register save eliminated.
 882 0000 7047     		bx	lr
 883              		.cfi_endproc
 884              	.LFE75:
 886              		.comm	huart2,64,4
 887              		.comm	huart1,64,4
 888              		.comm	hspi1,88,4
 889              		.comm	hadc1,48,4
 890              		.section	.bss.ADC_msg.7458,"aw",%nobits
 891              		.align	2
 892              		.set	.LANCHOR8,. + 0
 895              	ADC_msg.7458:
 896 0000 00000000 		.space	128
 896      00000000 
 896      00000000 
 896      00000000 
 896      00000000 
 897              		.section	.bss.SPI_msg,"aw",%nobits
 898              		.align	2
 899              		.set	.LANCHOR0,. + 0
 902              	SPI_msg:
 903 0000 00000000 		.space	128
 903      00000000 
 903      00000000 
 903      00000000 
 903      00000000 
 904              		.section	.bss.Vin_min.7464,"aw",%nobits
 905              		.align	2
 906              		.set	.LANCHOR3,. + 0
 909              	Vin_min.7464:
 910 0000 00000000 		.space	4
 911              		.section	.bss.Vref.7466,"aw",%nobits
 912              		.align	1
 915              	Vref.7466:
 916 0000 0000     		.space	2
 917              		.section	.bss.gain_idx.7463,"aw",%nobits
 918              		.set	.LANCHOR4,. + 0
 921              	gain_idx.7463:
 922 0000 00       		.space	1
 923              		.section	.bss.lightVal.7460,"aw",%nobits
 924              		.align	1
 925              		.set	.LANCHOR6,. + 0
 928              	lightVal.7460:
 929 0000 0000     		.space	2
 930              		.section	.bss.zoomAndEnhance.7461,"aw",%nobits
 931              		.set	.LANCHOR1,. + 0
 934              	zoomAndEnhance.7461:
 935 0000 00       		.space	1
 936              		.section	.data.Vin_max.7465,"aw",%progbits
 937              		.align	2
ARM GAS  /tmp/ccxDmQN3.s 			page 26


 938              		.set	.LANCHOR2,. + 0
 941              	Vin_max.7465:
 942 0000 33335340 		.word	1079194419
 943              		.section	.rodata.channel_name.7459,"a",%progbits
 944              		.align	2
 945              		.set	.LANCHOR7,. + 0
 948              	channel_name.7459:
 949 0000 4C696768 		.ascii	"LightSensor\000"
 949      7453656E 
 949      736F7200 
 950              		.section	.rodata.gain.7462,"a",%progbits
 951              		.align	2
 952              		.set	.LANCHOR5,. + 0
 955              	gain.7462:
 956 0000 01       		.byte	1
 957 0001 02       		.byte	2
 958 0002 04       		.byte	4
 959 0003 05       		.byte	5
 960 0004 08       		.byte	8
 961 0005 0A       		.byte	10
 962 0006 10       		.byte	16
 963 0007 20       		.byte	32
 964              		.section	.rodata.main.str1.4,"aMS",%progbits,1
 965              		.align	2
 966              	.LC0:
 967 0000 7B202263 		.ascii	"{ \"channel\" : \"%s\", \"time\" : %d, \"value\" : "
 967      68616E6E 
 967      656C2220 
 967      3A202225 
 967      73222C20 
 968 002b 2564207D 		.ascii	"%d }\012\015\000"
 968      0A0D00
 969              		.text
 970              	.Letext0:
 971              		.file 2 "/usr/include/newlib/machine/_default_types.h"
 972              		.file 3 "/usr/include/newlib/sys/_stdint.h"
 973              		.file 4 "Drivers/CMSIS/Include/core_cm3.h"
 974              		.file 5 "Drivers/CMSIS/Device/ST/STM32F1xx/Include/system_stm32f1xx.h"
 975              		.file 6 "Drivers/CMSIS/Device/ST/STM32F1xx/Include/stm32f103xb.h"
 976              		.file 7 "Drivers/CMSIS/Device/ST/STM32F1xx/Include/stm32f1xx.h"
 977              		.file 8 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_def.h"
 978              		.file 9 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_rcc.h"
 979              		.file 10 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_rcc_ex.h"
 980              		.file 11 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_gpio.h"
 981              		.file 12 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_dma.h"
 982              		.file 13 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_adc.h"
 983              		.file 14 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_spi.h"
 984              		.file 15 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_uart.h"
 985              		.file 16 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal.h"
 986              		.file 17 "Inc/main.h"
 987              		.file 18 "/usr/include/newlib/sys/lock.h"
 988              		.file 19 "/usr/include/newlib/sys/_types.h"
 989              		.file 20 "/usr/lib/gcc/arm-none-eabi/6.3.1/include/stddef.h"
 990              		.file 21 "/usr/include/newlib/sys/reent.h"
 991              		.file 22 "/usr/include/newlib/math.h"
 992              		.file 23 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_adc_ex.h"
 993              		.file 24 "/usr/include/newlib/stdio.h"
ARM GAS  /tmp/ccxDmQN3.s 			page 27


 994              		.file 25 "/usr/include/newlib/string.h"
ARM GAS  /tmp/ccxDmQN3.s 			page 28


DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
     /tmp/ccxDmQN3.s:16     .text.MX_GPIO_Init:0000000000000000 $t
     /tmp/ccxDmQN3.s:22     .text.MX_GPIO_Init:0000000000000000 MX_GPIO_Init
     /tmp/ccxDmQN3.s:117    .text.MX_GPIO_Init:0000000000000080 $d
     /tmp/ccxDmQN3.s:123    .text.MX_ADC1_Init:0000000000000000 $t
     /tmp/ccxDmQN3.s:129    .text.MX_ADC1_Init:0000000000000000 MX_ADC1_Init
     /tmp/ccxDmQN3.s:192    .text.MX_ADC1_Init:000000000000003c $d
                            *COM*:0000000000000030 hadc1
     /tmp/ccxDmQN3.s:198    .text.MX_SPI1_Init:0000000000000000 $t
     /tmp/ccxDmQN3.s:204    .text.MX_SPI1_Init:0000000000000000 MX_SPI1_Init
     /tmp/ccxDmQN3.s:256    .text.MX_SPI1_Init:000000000000003c $d
                            *COM*:0000000000000058 hspi1
     /tmp/ccxDmQN3.s:262    .text.MX_USART1_UART_Init:0000000000000000 $t
     /tmp/ccxDmQN3.s:268    .text.MX_USART1_UART_Init:0000000000000000 MX_USART1_UART_Init
     /tmp/ccxDmQN3.s:307    .text.MX_USART1_UART_Init:0000000000000024 $d
                            *COM*:0000000000000040 huart1
     /tmp/ccxDmQN3.s:313    .text.MX_USART2_UART_Init:0000000000000000 $t
     /tmp/ccxDmQN3.s:319    .text.MX_USART2_UART_Init:0000000000000000 MX_USART2_UART_Init
     /tmp/ccxDmQN3.s:358    .text.MX_USART2_UART_Init:0000000000000024 $d
                            *COM*:0000000000000040 huart2
     /tmp/ccxDmQN3.s:364    .text.SystemClock_Config:0000000000000000 $t
     /tmp/ccxDmQN3.s:371    .text.SystemClock_Config:0000000000000000 SystemClock_Config
     /tmp/ccxDmQN3.s:460    .text.setGain:0000000000000000 $t
     /tmp/ccxDmQN3.s:467    .text.setGain:0000000000000000 setGain
     /tmp/ccxDmQN3.s:526    .text.setGain:0000000000000048 $d
     /tmp/ccxDmQN3.s:533    .text.setVref:0000000000000000 $t
     /tmp/ccxDmQN3.s:540    .text.setVref:0000000000000000 setVref
     /tmp/ccxDmQN3.s:620    .text.setVref:0000000000000070 $d
     /tmp/ccxDmQN3.s:636    .text.main:0000000000000000 $t
     /tmp/ccxDmQN3.s:643    .text.main:0000000000000000 main
     /tmp/ccxDmQN3.s:848    .text.main:0000000000000138 $d
     /tmp/ccxDmQN3.s:868    .text.Error_Handler:0000000000000000 $t
     /tmp/ccxDmQN3.s:875    .text.Error_Handler:0000000000000000 Error_Handler
     /tmp/ccxDmQN3.s:891    .bss.ADC_msg.7458:0000000000000000 $d
     /tmp/ccxDmQN3.s:895    .bss.ADC_msg.7458:0000000000000000 ADC_msg.7458
     /tmp/ccxDmQN3.s:898    .bss.SPI_msg:0000000000000000 $d
     /tmp/ccxDmQN3.s:902    .bss.SPI_msg:0000000000000000 SPI_msg
     /tmp/ccxDmQN3.s:905    .bss.Vin_min.7464:0000000000000000 $d
     /tmp/ccxDmQN3.s:909    .bss.Vin_min.7464:0000000000000000 Vin_min.7464
     /tmp/ccxDmQN3.s:912    .bss.Vref.7466:0000000000000000 $d
     /tmp/ccxDmQN3.s:915    .bss.Vref.7466:0000000000000000 Vref.7466
     /tmp/ccxDmQN3.s:921    .bss.gain_idx.7463:0000000000000000 gain_idx.7463
     /tmp/ccxDmQN3.s:922    .bss.gain_idx.7463:0000000000000000 $d
     /tmp/ccxDmQN3.s:924    .bss.lightVal.7460:0000000000000000 $d
     /tmp/ccxDmQN3.s:928    .bss.lightVal.7460:0000000000000000 lightVal.7460
     /tmp/ccxDmQN3.s:934    .bss.zoomAndEnhance.7461:0000000000000000 zoomAndEnhance.7461
     /tmp/ccxDmQN3.s:935    .bss.zoomAndEnhance.7461:0000000000000000 $d
     /tmp/ccxDmQN3.s:937    .data.Vin_max.7465:0000000000000000 $d
     /tmp/ccxDmQN3.s:941    .data.Vin_max.7465:0000000000000000 Vin_max.7465
     /tmp/ccxDmQN3.s:944    .rodata.channel_name.7459:0000000000000000 $d
     /tmp/ccxDmQN3.s:948    .rodata.channel_name.7459:0000000000000000 channel_name.7459
     /tmp/ccxDmQN3.s:951    .rodata.gain.7462:0000000000000000 $d
     /tmp/ccxDmQN3.s:955    .rodata.gain.7462:0000000000000000 gain.7462
     /tmp/ccxDmQN3.s:965    .rodata.main.str1.4:0000000000000000 $d
                     .debug_frame:0000000000000010 $d

ARM GAS  /tmp/ccxDmQN3.s 			page 29


UNDEFINED SYMBOLS
HAL_GPIO_WritePin
HAL_GPIO_Init
HAL_ADC_Init
HAL_ADC_ConfigChannel
HAL_SPI_Init
HAL_UART_Init
memset
HAL_RCC_OscConfig
HAL_RCC_ClockConfig
HAL_RCCEx_PeriphCLKConfig
HAL_SPI_Transmit
__aeabi_fsub
__aeabi_f2d
__aeabi_ddiv
__aeabi_d2f
__aeabi_i2f
__aeabi_fcmpgt
__aeabi_fmul
__aeabi_fdiv
__aeabi_d2uiz
HAL_Init
HAL_ADCEx_Calibration_Start
round
HAL_ADC_Start
HAL_ADC_PollForConversion
HAL_ADC_GetValue
HAL_GetTick
sprintf
strlen
HAL_UART_Transmit
HAL_Delay
