ARM GAS  /tmp/ccparjHr.s 			page 1


   1              		.cpu cortex-m3
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 1
   9              		.eabi_attribute 34, 1
  10              		.eabi_attribute 18, 4
  11              		.file	"main.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.text.MX_GPIO_Init,"ax",%progbits
  16              		.align	1
  17              		.arch armv7-m
  18              		.syntax unified
  19              		.thumb
  20              		.thumb_func
  21              		.fpu softvfp
  23              	MX_GPIO_Init:
  24              	.LFB77:
  25              		.file 1 "Src/main.c"
   1:Src/main.c    **** /* USER CODE BEGIN Header */
   2:Src/main.c    **** /**
   3:Src/main.c    ****   ******************************************************************************
   4:Src/main.c    ****   * @file           : main.c
   5:Src/main.c    ****   * @brief          : Main program body
   6:Src/main.c    ****   ******************************************************************************
   7:Src/main.c    ****   * @attention
   8:Src/main.c    ****   *
   9:Src/main.c    ****   * <h2><center>&copy; Copyright (c) 2020 STMicroelectronics.
  10:Src/main.c    ****   * All rights reserved.</center></h2>
  11:Src/main.c    ****   *
  12:Src/main.c    ****   * This software component is licensed by ST under BSD 3-Clause license,
  13:Src/main.c    ****   * the "License"; You may not use this file except in compliance with the
  14:Src/main.c    ****   * License. You may obtain a copy of the License at:
  15:Src/main.c    ****   *                        opensource.org/licenses/BSD-3-Clause
  16:Src/main.c    ****   *
  17:Src/main.c    ****   ******************************************************************************
  18:Src/main.c    ****   */
  19:Src/main.c    **** /* USER CODE END Header */
  20:Src/main.c    **** 
  21:Src/main.c    **** /* Includes ------------------------------------------------------------------*/
  22:Src/main.c    **** #include "main.h"
  23:Src/main.c    **** 
  24:Src/main.c    **** /* Private includes ----------------------------------------------------------*/
  25:Src/main.c    **** /* USER CODE BEGIN Includes */
  26:Src/main.c    **** #include <string.h>
  27:Src/main.c    **** #include <stdio.h>
  28:Src/main.c    **** #include <math.h>
  29:Src/main.c    **** /* USER CODE END Includes */
  30:Src/main.c    **** 
  31:Src/main.c    **** /* Private typedef -----------------------------------------------------------*/
  32:Src/main.c    **** /* USER CODE BEGIN PTD */
  33:Src/main.c    **** 
ARM GAS  /tmp/ccparjHr.s 			page 2


  34:Src/main.c    **** /* USER CODE END PTD */
  35:Src/main.c    **** 
  36:Src/main.c    **** /* Private define ------------------------------------------------------------*/
  37:Src/main.c    **** /* USER CODE BEGIN PD */
  38:Src/main.c    **** #define MAX_LOG_MSG_SIZE 128
  39:Src/main.c    **** /* USER CODE END PD */
  40:Src/main.c    **** 
  41:Src/main.c    **** /* Private macro -------------------------------------------------------------*/
  42:Src/main.c    **** /* USER CODE BEGIN PM */
  43:Src/main.c    **** 
  44:Src/main.c    **** /* USER CODE END PM */
  45:Src/main.c    **** 
  46:Src/main.c    **** /* Private variables ---------------------------------------------------------*/
  47:Src/main.c    **** ADC_HandleTypeDef hadc1;
  48:Src/main.c    **** 
  49:Src/main.c    **** I2C_HandleTypeDef hi2c1;
  50:Src/main.c    **** 
  51:Src/main.c    **** SPI_HandleTypeDef hspi1;
  52:Src/main.c    **** 
  53:Src/main.c    **** UART_HandleTypeDef huart1;
  54:Src/main.c    **** UART_HandleTypeDef huart2;
  55:Src/main.c    **** 
  56:Src/main.c    **** /* USER CODE BEGIN PV */
  57:Src/main.c    **** static uint8_t SPI_msg[MAX_LOG_MSG_SIZE] = {0};
  58:Src/main.c    **** /* USER CODE END PV */
  59:Src/main.c    **** 
  60:Src/main.c    **** /* Private function prototypes -----------------------------------------------*/
  61:Src/main.c    **** void SystemClock_Config(void);
  62:Src/main.c    **** static void MX_GPIO_Init(void);
  63:Src/main.c    **** static void MX_ADC1_Init(void);
  64:Src/main.c    **** static void MX_SPI1_Init(void);
  65:Src/main.c    **** static void MX_USART1_UART_Init(void);
  66:Src/main.c    **** static void MX_USART2_UART_Init(void);
  67:Src/main.c    **** static void MX_I2C1_Init(void);
  68:Src/main.c    **** /* USER CODE BEGIN PFP */
  69:Src/main.c    **** void setGain(gain_t new_gain);
  70:Src/main.c    **** void setVref(uint16_t _new_Vref);
  71:Src/main.c    **** /* USER CODE END PFP */
  72:Src/main.c    **** 
  73:Src/main.c    **** /* Private user code ---------------------------------------------------------*/
  74:Src/main.c    **** /* USER CODE BEGIN 0 */
  75:Src/main.c    **** //From https://electronics.stackexchange.com/questions/272427/stm32-busy-flag-is-set-after-i2c-init
  76:Src/main.c    **** /**
  77:Src/main.c    **** 1. Disable the I2C peripheral by clearing the PE bit in I2Cx_CR1 register.
  78:Src/main.c    **** 2. Configure the SCL and SDA I/Os as General Purpose Output Open-Drain, High level
  79:Src/main.c    **** (Write 1 to GPIOx_ODR).
  80:Src/main.c    **** 3. Check SCL and SDA High level in GPIOx_IDR.
  81:Src/main.c    **** 4. Configure the SDA I/O as General Purpose Output Open-Drain, Low level (Write 0 to
  82:Src/main.c    **** GPIOx_ODR).
  83:Src/main.c    **** 5. Check SDA Low level in GPIOx_IDR.
  84:Src/main.c    **** 6. Configure the SCL I/O as General Purpose Output Open-Drain, Low level (Write 0 to
  85:Src/main.c    **** GPIOx_ODR).
  86:Src/main.c    **** 7. Check SCL Low level in GPIOx_IDR.
  87:Src/main.c    **** 8. Configure the SCL I/O as General Purpose Output Open-Drain, High level (Write 1 to
  88:Src/main.c    **** GPIOx_ODR).
  89:Src/main.c    **** 9. Check SCL High level in GPIOx_IDR.
  90:Src/main.c    **** 10. Configure the SDA I/O as General Purpose Output Open-Drain , High level (Write 1 to
ARM GAS  /tmp/ccparjHr.s 			page 3


  91:Src/main.c    **** GPIOx_ODR).
  92:Src/main.c    **** 11. Check SDA High level in GPIOx_IDR.
  93:Src/main.c    **** 12. Configure the SCL and SDA I/Os as Alternate function Open-Drain.
  94:Src/main.c    **** 13. Set SWRST bit in I2Cx_CR1 register.
  95:Src/main.c    **** 14. Clear SWRST bit in I2Cx_CR1 register.
  96:Src/main.c    **** 15. Enable the I2C peripheral by setting the PE bit in I2Cx_CR1 register.
  97:Src/main.c    **** **/
  98:Src/main.c    **** 
  99:Src/main.c    **** void HAL_GPIO_WRITE_ODR(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
 100:Src/main.c    **** {
 101:Src/main.c    ****   /* Check the parameters */
 102:Src/main.c    ****   assert_param(IS_GPIO_PIN(GPIO_Pin));
 103:Src/main.c    **** 
 104:Src/main.c    ****   GPIOx->ODR |= GPIO_Pin;
 105:Src/main.c    **** }
 106:Src/main.c    **** 
 107:Src/main.c    **** void HAL_I2C_ClearBusyFlagErrata_2_14_7(I2C_HandleTypeDef *hi2c) {
 108:Src/main.c    **** 
 109:Src/main.c    ****     static uint8_t resetTried = 0;
 110:Src/main.c    ****     if (resetTried == 1) {
 111:Src/main.c    ****         return ;
 112:Src/main.c    ****     }
 113:Src/main.c    ****     uint32_t SDA_PIN = GPIO_PIN_7;
 114:Src/main.c    ****     uint32_t SCL_PIN = GPIO_PIN_6;
 115:Src/main.c    ****     GPIO_InitTypeDef GPIO_InitStruct;
 116:Src/main.c    **** 
 117:Src/main.c    ****     // 1
 118:Src/main.c    ****     __HAL_I2C_DISABLE(hi2c);
 119:Src/main.c    **** 
 120:Src/main.c    ****     // 2
 121:Src/main.c    ****     GPIO_InitStruct.Pin = SDA_PIN|SCL_PIN;
 122:Src/main.c    ****     GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 123:Src/main.c    ****     GPIO_InitStruct.Pull = GPIO_NOPULL;
 124:Src/main.c    ****     GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 125:Src/main.c    ****     HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 126:Src/main.c    **** 
 127:Src/main.c    ****     HAL_GPIO_WRITE_ODR(GPIOB, SDA_PIN);
 128:Src/main.c    ****     HAL_GPIO_WRITE_ODR(GPIOB, SCL_PIN);
 129:Src/main.c    **** 
 130:Src/main.c    ****     // 3
 131:Src/main.c    ****     GPIO_PinState pinState;
 132:Src/main.c    ****     if (HAL_GPIO_ReadPin(GPIOB, SDA_PIN) == GPIO_PIN_RESET) {
 133:Src/main.c    ****         for(;;){}
 134:Src/main.c    ****     }
 135:Src/main.c    ****     if (HAL_GPIO_ReadPin(GPIOB, SCL_PIN) == GPIO_PIN_RESET) {
 136:Src/main.c    ****         for(;;){}
 137:Src/main.c    ****     }
 138:Src/main.c    **** 
 139:Src/main.c    ****     // 4
 140:Src/main.c    ****     GPIO_InitStruct.Pin = SDA_PIN;
 141:Src/main.c    ****     HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 142:Src/main.c    **** 
 143:Src/main.c    ****     HAL_GPIO_TogglePin(GPIOB, SDA_PIN);
 144:Src/main.c    **** 
 145:Src/main.c    ****     // 5
 146:Src/main.c    ****     if (HAL_GPIO_ReadPin(GPIOB, SDA_PIN) == GPIO_PIN_SET) {
 147:Src/main.c    ****         for(;;){}
ARM GAS  /tmp/ccparjHr.s 			page 4


 148:Src/main.c    ****     }
 149:Src/main.c    **** 
 150:Src/main.c    ****     // 6
 151:Src/main.c    ****     GPIO_InitStruct.Pin = SCL_PIN;
 152:Src/main.c    ****     HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 153:Src/main.c    **** 
 154:Src/main.c    ****     HAL_GPIO_TogglePin(GPIOB, SCL_PIN);
 155:Src/main.c    **** 
 156:Src/main.c    ****     // 7
 157:Src/main.c    ****     if (HAL_GPIO_ReadPin(GPIOB, SCL_PIN) == GPIO_PIN_SET) {
 158:Src/main.c    ****         for(;;){}
 159:Src/main.c    ****     }
 160:Src/main.c    **** 
 161:Src/main.c    ****     // 8
 162:Src/main.c    ****     GPIO_InitStruct.Pin = SDA_PIN;
 163:Src/main.c    ****     HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 164:Src/main.c    **** 
 165:Src/main.c    ****     HAL_GPIO_WRITE_ODR(GPIOB, SDA_PIN);
 166:Src/main.c    **** 
 167:Src/main.c    ****     // 9
 168:Src/main.c    ****     if (HAL_GPIO_ReadPin(GPIOB, SDA_PIN) == GPIO_PIN_RESET) {
 169:Src/main.c    ****         for(;;){}
 170:Src/main.c    ****     }
 171:Src/main.c    **** 
 172:Src/main.c    ****     // 10
 173:Src/main.c    ****     GPIO_InitStruct.Pin = SCL_PIN;
 174:Src/main.c    ****     HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 175:Src/main.c    **** 
 176:Src/main.c    ****     HAL_GPIO_WRITE_ODR(GPIOB, SCL_PIN);
 177:Src/main.c    **** 
 178:Src/main.c    ****     // 11
 179:Src/main.c    ****     if (HAL_GPIO_ReadPin(GPIOB, SCL_PIN) == GPIO_PIN_RESET) {
 180:Src/main.c    ****         for(;;){}
 181:Src/main.c    ****     }
 182:Src/main.c    **** 
 183:Src/main.c    ****     // 12
 184:Src/main.c    ****     GPIO_InitStruct.Pin = SDA_PIN|SCL_PIN;
 185:Src/main.c    ****     GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 186:Src/main.c    ****     //GPIO_InitStruct.Alternate = NUCLEO_I2C_EXPBD_SCL_SDA_AF;
 187:Src/main.c    ****     HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 188:Src/main.c    **** 
 189:Src/main.c    ****    // 13
 190:Src/main.c    ****    hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 191:Src/main.c    **** 
 192:Src/main.c    ****    // 14
 193:Src/main.c    ****    hi2c->Instance->CR1 ^= I2C_CR1_SWRST;
 194:Src/main.c    **** 
 195:Src/main.c    ****    // 15
 196:Src/main.c    ****    __HAL_I2C_ENABLE(hi2c);
 197:Src/main.c    **** 
 198:Src/main.c    ****    resetTried = 1;
 199:Src/main.c    **** }
 200:Src/main.c    **** /* USER CODE END 0 */
 201:Src/main.c    **** 
 202:Src/main.c    **** /**
 203:Src/main.c    ****   * @brief  The application entry point.
 204:Src/main.c    ****   * @retval int
ARM GAS  /tmp/ccparjHr.s 			page 5


 205:Src/main.c    ****   */
 206:Src/main.c    **** int main(void)
 207:Src/main.c    **** {
 208:Src/main.c    ****   /* USER CODE BEGIN 1 */
 209:Src/main.c    ****   static char ADC_msg[MAX_LOG_MSG_SIZE] = {0};
 210:Src/main.c    ****   static const char channel_name[] = "LightSensor";
 211:Src/main.c    ****   static volatile uint16_t lightVal = 0;
 212:Src/main.c    ****   static volatile uint8_t zoomAndEnhance = 0;
 213:Src/main.c    ****   static const uint8_t gain[8] = {1,2,4,5,8,10,16,32};
 214:Src/main.c    ****   static volatile gain_t gain_idx = GAIN_OF_1;
 215:Src/main.c    ****   static volatile float Vin_min = 0;
 216:Src/main.c    ****   static volatile float Vin_max = 3.300;
 217:Src/main.c    ****   static volatile uint16_t Vref = 0;
 218:Src/main.c    ****   static uint8_t I2C_msg[MAX_LOG_MSG_SIZE] = {0};
 219:Src/main.c    ****   /* USER CODE END 1 */
 220:Src/main.c    ****   
 221:Src/main.c    **** 
 222:Src/main.c    ****   /* MCU Configuration--------------------------------------------------------*/
 223:Src/main.c    **** 
 224:Src/main.c    ****   /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
 225:Src/main.c    ****   HAL_Init();
 226:Src/main.c    **** 
 227:Src/main.c    ****   /* USER CODE BEGIN Init */
 228:Src/main.c    **** 
 229:Src/main.c    ****   /* USER CODE END Init */
 230:Src/main.c    **** 
 231:Src/main.c    ****   /* Configure the system clock */
 232:Src/main.c    ****   SystemClock_Config();
 233:Src/main.c    **** 
 234:Src/main.c    ****   /* USER CODE BEGIN SysInit */
 235:Src/main.c    **** 
 236:Src/main.c    ****   /* USER CODE END SysInit */
 237:Src/main.c    **** 
 238:Src/main.c    ****   /* Initialize all configured peripherals */
 239:Src/main.c    ****   MX_GPIO_Init();
 240:Src/main.c    ****   MX_ADC1_Init();
 241:Src/main.c    ****   MX_SPI1_Init();
 242:Src/main.c    ****   MX_USART1_UART_Init();
 243:Src/main.c    ****   MX_USART2_UART_Init();
 244:Src/main.c    ****   MX_I2C1_Init();
 245:Src/main.c    ****   /* USER CODE BEGIN 2 */
 246:Src/main.c    ****   if (HAL_ADCEx_Calibration_Start(&hadc1) != HAL_OK)
 247:Src/main.c    ****   {
 248:Src/main.c    ****       Error_Handler();
 249:Src/main.c    ****   }
 250:Src/main.c    **** 
 251:Src/main.c    ****   /*
 252:Src/main.c    ****   HAL_I2C_ClearBusyFlagErrata_2_14_7(&hi2c1);
 253:Src/main.c    **** 
 254:Src/main.c    ****   volatile uint8_t res = 0;
 255:Src/main.c    ****   while ( res = HAL_I2C_IsDeviceReady(&hi2c1, (uint16_t)(0x2A<<1), 1000, HAL_MAX_DELAY)  )
 256:Src/main.c    ****   {
 257:Src/main.c    ****   	__asm("nop");
 258:Src/main.c    ****   }
 259:Src/main.c    ****   //Reset the load scale
 260:Src/main.c    ****   //Read REG0x0, PU_CTRL. Data should be 0.
 261:Src/main.c    ****   //HAL_I2C_Mem_Read(&hi2c1, 0x54, 0x0, 0x2, &I2C_msg[0], 0x2, HAL_MAX_DELAY);
ARM GAS  /tmp/ccparjHr.s 			page 6


 262:Src/main.c    ****   HAL_I2C_Master_Transmit(&hi2c1, (uint16_t)0x54, &I2C_msg[0], 2, HAL_MAX_DELAY);
 263:Src/main.c    ****   //Write 0x1 to REG0x0, PU_CTRL, to put device in reset state.
 264:Src/main.c    ****   I2C_msg[0] = 0x1;
 265:Src/main.c    ****   HAL_I2C_Mem_Write(&hi2c1, 0x54, 0x0, 0x2, &I2C_msg[0], 0x2, HAL_MAX_DELAY);
 266:Src/main.c    ****   I2C_msg[0] = 0x0;
 267:Src/main.c    ****   //Read REG0x0, PU_CTRL. Data should be 1.
 268:Src/main.c    ****   HAL_I2C_Mem_Read(&hi2c1, 0x54, 0x0, 0x2, &I2C_msg[0], 0x2, HAL_MAX_DELAY);
 269:Src/main.c    **** 
 270:Src/main.c    ****   //Set initial load scale register values
 271:Src/main.c    ****   //Take device out of reset, set AVDD to internal LDO, and turn on analog and digital circuits
 272:Src/main.c    ****   I2C_msg[0] = 0x85;
 273:Src/main.c    ****   HAL_I2C_Mem_Write(&hi2c1, 0x54, 0x0, 0x2, &I2C_msg[0], 0x2, HAL_MAX_DELAY);
 274:Src/main.c    ****   I2C_msg[0] = 0x0;
 275:Src/main.c    ****   //Read REG0x0, PU_CTRL. Data should be 0xAE.
 276:Src/main.c    ****   HAL_I2C_Mem_Read(&hi2c1, 0x54, 0x0, 0x2, &I2C_msg[0], 0x2, HAL_MAX_DELAY);
 277:Src/main.c    ****   */
 278:Src/main.c    ****   /* USER CODE END 2 */
 279:Src/main.c    ****  
 280:Src/main.c    ****  
 281:Src/main.c    **** 
 282:Src/main.c    ****   /* Infinite loop */
 283:Src/main.c    ****   /* USER CODE BEGIN WHILE */
 284:Src/main.c    ****   while (1)
 285:Src/main.c    ****   {
 286:Src/main.c    ****     /* USER CODE END WHILE */
 287:Src/main.c    **** 
 288:Src/main.c    ****     /* USER CODE BEGIN 3 */
 289:Src/main.c    ****     //int z = 0;
 290:Src/main.c    ****     //z = 4*t;
 291:Src/main.c    ****     if (zoomAndEnhance)
 292:Src/main.c    ****     {
 293:Src/main.c    ****     	//calculate gain from Vin_max, Vin_min
 294:Src/main.c    ****     	float gain_float = 3.3 / ( Vin_max - Vin_min );
 295:Src/main.c    ****     	for ( gain_idx = GAIN_OF_32; gain_idx > 0; gain_idx--)
 296:Src/main.c    ****     	{
 297:Src/main.c    ****     		if ( gain[gain_idx] < gain_float ) break;
 298:Src/main.c    ****     	}
 299:Src/main.c    ****     	//update gain
 300:Src/main.c    ****     	setGain(gain_idx);
 301:Src/main.c    **** 
 302:Src/main.c    ****     	//calculate Vref from gain, Vin_min
 303:Src/main.c    ****     	float Vref_float = ( gain[gain_idx] * Vin_min ) / ( gain[gain_idx] - 1 );
 304:Src/main.c    ****     	uint16_t Vref = round( Vref_float * 4095 / 3.3f );
 305:Src/main.c    ****     	//update Vref
 306:Src/main.c    ****     	setVref(Vref);
 307:Src/main.c    ****     }
 308:Src/main.c    **** 
 309:Src/main.c    ****     HAL_ADC_Start(&hadc1);
 310:Src/main.c    ****     while( HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY) != HAL_OK );
 311:Src/main.c    ****     lightVal = HAL_ADC_GetValue(&hadc1);
 312:Src/main.c    ****     
 313:Src/main.c    ****     sprintf(&ADC_msg[0], "{ \"channel\" : \"%s\", \"time\" : %d, \"value\" : %d }\n\r", channel_nam
 314:Src/main.c    ****     HAL_UART_Transmit(&huart1, (uint8_t*)&ADC_msg[0], strlen(ADC_msg), HAL_MAX_DELAY);
 315:Src/main.c    **** 
 316:Src/main.c    ****     memset(&ADC_msg[0], 0, MAX_LOG_MSG_SIZE);
 317:Src/main.c    **** 
 318:Src/main.c    ****     HAL_Delay(5);
ARM GAS  /tmp/ccparjHr.s 			page 7


 319:Src/main.c    ****   }
 320:Src/main.c    ****   /* USER CODE END 3 */
 321:Src/main.c    **** }
 322:Src/main.c    **** 
 323:Src/main.c    **** /**
 324:Src/main.c    ****   * @brief System Clock Configuration
 325:Src/main.c    ****   * @retval None
 326:Src/main.c    ****   */
 327:Src/main.c    **** void SystemClock_Config(void)
 328:Src/main.c    **** {
 329:Src/main.c    ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 330:Src/main.c    ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 331:Src/main.c    ****   RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 332:Src/main.c    **** 
 333:Src/main.c    ****   /** Initializes the CPU, AHB and APB busses clocks 
 334:Src/main.c    ****   */
 335:Src/main.c    ****   RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 336:Src/main.c    ****   RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 337:Src/main.c    ****   RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 338:Src/main.c    ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 339:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 340:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 341:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 342:Src/main.c    ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 343:Src/main.c    ****   {
 344:Src/main.c    ****     Error_Handler();
 345:Src/main.c    ****   }
 346:Src/main.c    ****   /** Initializes the CPU, AHB and APB busses clocks 
 347:Src/main.c    ****   */
 348:Src/main.c    ****   RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 349:Src/main.c    ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 350:Src/main.c    ****   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 351:Src/main.c    ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 352:Src/main.c    ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 353:Src/main.c    ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 354:Src/main.c    **** 
 355:Src/main.c    ****   if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 356:Src/main.c    ****   {
 357:Src/main.c    ****     Error_Handler();
 358:Src/main.c    ****   }
 359:Src/main.c    ****   PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 360:Src/main.c    ****   PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 361:Src/main.c    ****   if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 362:Src/main.c    ****   {
 363:Src/main.c    ****     Error_Handler();
 364:Src/main.c    ****   }
 365:Src/main.c    **** }
 366:Src/main.c    **** 
 367:Src/main.c    **** /**
 368:Src/main.c    ****   * @brief ADC1 Initialization Function
 369:Src/main.c    ****   * @param None
 370:Src/main.c    ****   * @retval None
 371:Src/main.c    ****   */
 372:Src/main.c    **** static void MX_ADC1_Init(void)
 373:Src/main.c    **** {
 374:Src/main.c    **** 
 375:Src/main.c    ****   /* USER CODE BEGIN ADC1_Init 0 */
ARM GAS  /tmp/ccparjHr.s 			page 8


 376:Src/main.c    **** 
 377:Src/main.c    ****   /* USER CODE END ADC1_Init 0 */
 378:Src/main.c    **** 
 379:Src/main.c    ****   ADC_ChannelConfTypeDef sConfig = {0};
 380:Src/main.c    **** 
 381:Src/main.c    ****   /* USER CODE BEGIN ADC1_Init 1 */
 382:Src/main.c    **** 
 383:Src/main.c    ****   /* USER CODE END ADC1_Init 1 */
 384:Src/main.c    ****   /** Common config 
 385:Src/main.c    ****   */
 386:Src/main.c    ****   hadc1.Instance = ADC1;
 387:Src/main.c    ****   hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 388:Src/main.c    ****   hadc1.Init.ContinuousConvMode = DISABLE;
 389:Src/main.c    ****   hadc1.Init.DiscontinuousConvMode = DISABLE;
 390:Src/main.c    ****   hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 391:Src/main.c    ****   hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 392:Src/main.c    ****   hadc1.Init.NbrOfConversion = 1;
 393:Src/main.c    ****   if (HAL_ADC_Init(&hadc1) != HAL_OK)
 394:Src/main.c    ****   {
 395:Src/main.c    ****     Error_Handler();
 396:Src/main.c    ****   }
 397:Src/main.c    ****   /** Configure Regular Channel 
 398:Src/main.c    ****   */
 399:Src/main.c    ****   sConfig.Channel = ADC_CHANNEL_0;
 400:Src/main.c    ****   sConfig.Rank = ADC_REGULAR_RANK_1;
 401:Src/main.c    ****   sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 402:Src/main.c    ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 403:Src/main.c    ****   {
 404:Src/main.c    ****     Error_Handler();
 405:Src/main.c    ****   }
 406:Src/main.c    ****   /* USER CODE BEGIN ADC1_Init 2 */
 407:Src/main.c    **** 
 408:Src/main.c    ****   /* USER CODE END ADC1_Init 2 */
 409:Src/main.c    **** 
 410:Src/main.c    **** }
 411:Src/main.c    **** 
 412:Src/main.c    **** /**
 413:Src/main.c    ****   * @brief I2C1 Initialization Function
 414:Src/main.c    ****   * @param None
 415:Src/main.c    ****   * @retval None
 416:Src/main.c    ****   */
 417:Src/main.c    **** static void MX_I2C1_Init(void)
 418:Src/main.c    **** {
 419:Src/main.c    **** 
 420:Src/main.c    ****   /* USER CODE BEGIN I2C1_Init 0 */
 421:Src/main.c    **** 
 422:Src/main.c    ****   /* USER CODE END I2C1_Init 0 */
 423:Src/main.c    **** 
 424:Src/main.c    ****   /* USER CODE BEGIN I2C1_Init 1 */
 425:Src/main.c    **** 
 426:Src/main.c    ****   /* USER CODE END I2C1_Init 1 */
 427:Src/main.c    ****   hi2c1.Instance = I2C1;
 428:Src/main.c    ****   hi2c1.Init.ClockSpeed = 100000;
 429:Src/main.c    ****   hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 430:Src/main.c    ****   hi2c1.Init.OwnAddress1 = 0;
 431:Src/main.c    ****   hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 432:Src/main.c    ****   hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
ARM GAS  /tmp/ccparjHr.s 			page 9


 433:Src/main.c    ****   hi2c1.Init.OwnAddress2 = 0;
 434:Src/main.c    ****   hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 435:Src/main.c    ****   hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 436:Src/main.c    ****   if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 437:Src/main.c    ****   {
 438:Src/main.c    ****     Error_Handler();
 439:Src/main.c    ****   }
 440:Src/main.c    ****   /* USER CODE BEGIN I2C1_Init 2 */
 441:Src/main.c    **** 
 442:Src/main.c    ****   /* USER CODE END I2C1_Init 2 */
 443:Src/main.c    **** 
 444:Src/main.c    **** }
 445:Src/main.c    **** 
 446:Src/main.c    **** /**
 447:Src/main.c    ****   * @brief SPI1 Initialization Function
 448:Src/main.c    ****   * @param None
 449:Src/main.c    ****   * @retval None
 450:Src/main.c    ****   */
 451:Src/main.c    **** static void MX_SPI1_Init(void)
 452:Src/main.c    **** {
 453:Src/main.c    **** 
 454:Src/main.c    ****   /* USER CODE BEGIN SPI1_Init 0 */
 455:Src/main.c    **** 
 456:Src/main.c    ****   /* USER CODE END SPI1_Init 0 */
 457:Src/main.c    **** 
 458:Src/main.c    ****   /* USER CODE BEGIN SPI1_Init 1 */
 459:Src/main.c    **** 
 460:Src/main.c    ****   /* USER CODE END SPI1_Init 1 */
 461:Src/main.c    ****   /* SPI1 parameter configuration*/
 462:Src/main.c    ****   hspi1.Instance = SPI1;
 463:Src/main.c    ****   hspi1.Init.Mode = SPI_MODE_MASTER;
 464:Src/main.c    ****   hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 465:Src/main.c    ****   hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 466:Src/main.c    ****   hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 467:Src/main.c    ****   hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 468:Src/main.c    ****   hspi1.Init.NSS = SPI_NSS_SOFT;
 469:Src/main.c    ****   hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 470:Src/main.c    ****   hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 471:Src/main.c    ****   hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 472:Src/main.c    ****   hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 473:Src/main.c    ****   hspi1.Init.CRCPolynomial = 10;
 474:Src/main.c    ****   if (HAL_SPI_Init(&hspi1) != HAL_OK)
 475:Src/main.c    ****   {
 476:Src/main.c    ****     Error_Handler();
 477:Src/main.c    ****   }
 478:Src/main.c    ****   /* USER CODE BEGIN SPI1_Init 2 */
 479:Src/main.c    **** 
 480:Src/main.c    ****   /* USER CODE END SPI1_Init 2 */
 481:Src/main.c    **** 
 482:Src/main.c    **** }
 483:Src/main.c    **** 
 484:Src/main.c    **** /**
 485:Src/main.c    ****   * @brief USART1 Initialization Function
 486:Src/main.c    ****   * @param None
 487:Src/main.c    ****   * @retval None
 488:Src/main.c    ****   */
 489:Src/main.c    **** static void MX_USART1_UART_Init(void)
ARM GAS  /tmp/ccparjHr.s 			page 10


 490:Src/main.c    **** {
 491:Src/main.c    **** 
 492:Src/main.c    ****   /* USER CODE BEGIN USART1_Init 0 */
 493:Src/main.c    **** 
 494:Src/main.c    ****   /* USER CODE END USART1_Init 0 */
 495:Src/main.c    **** 
 496:Src/main.c    ****   /* USER CODE BEGIN USART1_Init 1 */
 497:Src/main.c    **** 
 498:Src/main.c    ****   /* USER CODE END USART1_Init 1 */
 499:Src/main.c    ****   huart1.Instance = USART1;
 500:Src/main.c    ****   huart1.Init.BaudRate = 460800;
 501:Src/main.c    ****   huart1.Init.WordLength = UART_WORDLENGTH_8B;
 502:Src/main.c    ****   huart1.Init.StopBits = UART_STOPBITS_1;
 503:Src/main.c    ****   huart1.Init.Parity = UART_PARITY_NONE;
 504:Src/main.c    ****   huart1.Init.Mode = UART_MODE_TX_RX;
 505:Src/main.c    ****   huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 506:Src/main.c    ****   huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 507:Src/main.c    ****   if (HAL_UART_Init(&huart1) != HAL_OK)
 508:Src/main.c    ****   {
 509:Src/main.c    ****     Error_Handler();
 510:Src/main.c    ****   }
 511:Src/main.c    ****   /* USER CODE BEGIN USART1_Init 2 */
 512:Src/main.c    **** 
 513:Src/main.c    ****   /* USER CODE END USART1_Init 2 */
 514:Src/main.c    **** 
 515:Src/main.c    **** }
 516:Src/main.c    **** 
 517:Src/main.c    **** /**
 518:Src/main.c    ****   * @brief USART2 Initialization Function
 519:Src/main.c    ****   * @param None
 520:Src/main.c    ****   * @retval None
 521:Src/main.c    ****   */
 522:Src/main.c    **** static void MX_USART2_UART_Init(void)
 523:Src/main.c    **** {
 524:Src/main.c    **** 
 525:Src/main.c    ****   /* USER CODE BEGIN USART2_Init 0 */
 526:Src/main.c    **** 
 527:Src/main.c    ****   /* USER CODE END USART2_Init 0 */
 528:Src/main.c    **** 
 529:Src/main.c    ****   /* USER CODE BEGIN USART2_Init 1 */
 530:Src/main.c    **** 
 531:Src/main.c    ****   /* USER CODE END USART2_Init 1 */
 532:Src/main.c    ****   huart2.Instance = USART2;
 533:Src/main.c    ****   huart2.Init.BaudRate = 4800;
 534:Src/main.c    ****   huart2.Init.WordLength = UART_WORDLENGTH_8B;
 535:Src/main.c    ****   huart2.Init.StopBits = UART_STOPBITS_1;
 536:Src/main.c    ****   huart2.Init.Parity = UART_PARITY_NONE;
 537:Src/main.c    ****   huart2.Init.Mode = UART_MODE_TX_RX;
 538:Src/main.c    ****   huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 539:Src/main.c    ****   huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 540:Src/main.c    ****   if (HAL_UART_Init(&huart2) != HAL_OK)
 541:Src/main.c    ****   {
 542:Src/main.c    ****     Error_Handler();
 543:Src/main.c    ****   }
 544:Src/main.c    ****   /* USER CODE BEGIN USART2_Init 2 */
 545:Src/main.c    **** 
 546:Src/main.c    ****   /* USER CODE END USART2_Init 2 */
ARM GAS  /tmp/ccparjHr.s 			page 11


 547:Src/main.c    **** 
 548:Src/main.c    **** }
 549:Src/main.c    **** 
 550:Src/main.c    **** /**
 551:Src/main.c    ****   * @brief GPIO Initialization Function
 552:Src/main.c    ****   * @param None
 553:Src/main.c    ****   * @retval None
 554:Src/main.c    ****   */
 555:Src/main.c    **** static void MX_GPIO_Init(void)
 556:Src/main.c    **** {
  26              		.loc 1 556 1 view -0
  27              		.cfi_startproc
  28              		@ args = 0, pretend = 0, frame = 32
  29              		@ frame_needed = 0, uses_anonymous_args = 0
  30 0000 30B5     		push	{r4, r5, lr}
  31              	.LCFI0:
  32              		.cfi_def_cfa_offset 12
  33              		.cfi_offset 4, -12
  34              		.cfi_offset 5, -8
  35              		.cfi_offset 14, -4
  36 0002 89B0     		sub	sp, sp, #36
  37              	.LCFI1:
  38              		.cfi_def_cfa_offset 48
 557:Src/main.c    ****   GPIO_InitTypeDef GPIO_InitStruct = {0};
  39              		.loc 1 557 3 view .LVU1
  40              		.loc 1 557 20 is_stmt 0 view .LVU2
  41 0004 0024     		movs	r4, #0
  42 0006 0494     		str	r4, [sp, #16]
  43 0008 0594     		str	r4, [sp, #20]
  44 000a 0694     		str	r4, [sp, #24]
  45 000c 0794     		str	r4, [sp, #28]
 558:Src/main.c    **** 
 559:Src/main.c    ****   /* GPIO Ports Clock Enable */
 560:Src/main.c    ****   __HAL_RCC_GPIOC_CLK_ENABLE();
  46              		.loc 1 560 3 is_stmt 1 view .LVU3
  47              	.LBB2:
  48              		.loc 1 560 3 view .LVU4
  49              		.loc 1 560 3 view .LVU5
  50 000e 1C4B     		ldr	r3, .L3
  51 0010 9A69     		ldr	r2, [r3, #24]
  52 0012 42F01002 		orr	r2, r2, #16
  53 0016 9A61     		str	r2, [r3, #24]
  54              		.loc 1 560 3 view .LVU6
  55 0018 9A69     		ldr	r2, [r3, #24]
  56 001a 02F01002 		and	r2, r2, #16
  57 001e 0092     		str	r2, [sp]
  58              		.loc 1 560 3 view .LVU7
  59 0020 009A     		ldr	r2, [sp]
  60              	.LBE2:
 561:Src/main.c    ****   __HAL_RCC_GPIOD_CLK_ENABLE();
  61              		.loc 1 561 3 view .LVU8
  62              	.LBB3:
  63              		.loc 1 561 3 view .LVU9
  64              		.loc 1 561 3 view .LVU10
  65 0022 9A69     		ldr	r2, [r3, #24]
  66 0024 42F02002 		orr	r2, r2, #32
  67 0028 9A61     		str	r2, [r3, #24]
ARM GAS  /tmp/ccparjHr.s 			page 12


  68              		.loc 1 561 3 view .LVU11
  69 002a 9A69     		ldr	r2, [r3, #24]
  70 002c 02F02002 		and	r2, r2, #32
  71 0030 0192     		str	r2, [sp, #4]
  72              		.loc 1 561 3 view .LVU12
  73 0032 019A     		ldr	r2, [sp, #4]
  74              	.LBE3:
 562:Src/main.c    ****   __HAL_RCC_GPIOA_CLK_ENABLE();
  75              		.loc 1 562 3 view .LVU13
  76              	.LBB4:
  77              		.loc 1 562 3 view .LVU14
  78              		.loc 1 562 3 view .LVU15
  79 0034 9A69     		ldr	r2, [r3, #24]
  80 0036 42F00402 		orr	r2, r2, #4
  81 003a 9A61     		str	r2, [r3, #24]
  82              		.loc 1 562 3 view .LVU16
  83 003c 9A69     		ldr	r2, [r3, #24]
  84 003e 02F00402 		and	r2, r2, #4
  85 0042 0292     		str	r2, [sp, #8]
  86              		.loc 1 562 3 view .LVU17
  87 0044 029A     		ldr	r2, [sp, #8]
  88              	.LBE4:
 563:Src/main.c    ****   __HAL_RCC_GPIOB_CLK_ENABLE();
  89              		.loc 1 563 3 view .LVU18
  90              	.LBB5:
  91              		.loc 1 563 3 view .LVU19
  92              		.loc 1 563 3 view .LVU20
  93 0046 9A69     		ldr	r2, [r3, #24]
  94 0048 42F00802 		orr	r2, r2, #8
  95 004c 9A61     		str	r2, [r3, #24]
  96              		.loc 1 563 3 view .LVU21
  97 004e 9B69     		ldr	r3, [r3, #24]
  98 0050 03F00803 		and	r3, r3, #8
  99 0054 0393     		str	r3, [sp, #12]
 100              		.loc 1 563 3 view .LVU22
 101 0056 039B     		ldr	r3, [sp, #12]
 102              	.LBE5:
 564:Src/main.c    **** 
 565:Src/main.c    ****   /*Configure GPIO pin Output Level */
 566:Src/main.c    ****   HAL_GPIO_WritePin(GPIOB, CSS_PGA_Pin|CSS_DAC_Pin, GPIO_PIN_RESET);
 103              		.loc 1 566 3 view .LVU23
 104 0058 0A4D     		ldr	r5, .L3+4
 105 005a 2246     		mov	r2, r4
 106 005c 0321     		movs	r1, #3
 107 005e 2846     		mov	r0, r5
 108 0060 FFF7FEFF 		bl	HAL_GPIO_WritePin
 109              	.LVL0:
 567:Src/main.c    **** 
 568:Src/main.c    ****   /*Configure GPIO pins : CSS_PGA_Pin CSS_DAC_Pin */
 569:Src/main.c    ****   GPIO_InitStruct.Pin = CSS_PGA_Pin|CSS_DAC_Pin;
 110              		.loc 1 569 3 view .LVU24
 111              		.loc 1 569 23 is_stmt 0 view .LVU25
 112 0064 0323     		movs	r3, #3
 113 0066 0493     		str	r3, [sp, #16]
 570:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 114              		.loc 1 570 3 is_stmt 1 view .LVU26
 115              		.loc 1 570 24 is_stmt 0 view .LVU27
ARM GAS  /tmp/ccparjHr.s 			page 13


 116 0068 0123     		movs	r3, #1
 117 006a 0593     		str	r3, [sp, #20]
 571:Src/main.c    ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 118              		.loc 1 571 3 is_stmt 1 view .LVU28
 119              		.loc 1 571 24 is_stmt 0 view .LVU29
 120 006c 0694     		str	r4, [sp, #24]
 572:Src/main.c    ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 121              		.loc 1 572 3 is_stmt 1 view .LVU30
 122              		.loc 1 572 25 is_stmt 0 view .LVU31
 123 006e 0223     		movs	r3, #2
 124 0070 0793     		str	r3, [sp, #28]
 573:Src/main.c    ****   HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 125              		.loc 1 573 3 is_stmt 1 view .LVU32
 126 0072 04A9     		add	r1, sp, #16
 127 0074 2846     		mov	r0, r5
 128 0076 FFF7FEFF 		bl	HAL_GPIO_Init
 129              	.LVL1:
 574:Src/main.c    **** 
 575:Src/main.c    **** }
 130              		.loc 1 575 1 is_stmt 0 view .LVU33
 131 007a 09B0     		add	sp, sp, #36
 132              	.LCFI2:
 133              		.cfi_def_cfa_offset 12
 134              		@ sp needed
 135 007c 30BD     		pop	{r4, r5, pc}
 136              	.L4:
 137 007e 00BF     		.align	2
 138              	.L3:
 139 0080 00100240 		.word	1073876992
 140 0084 000C0140 		.word	1073810432
 141              		.cfi_endproc
 142              	.LFE77:
 144              		.section	.text.HAL_GPIO_WRITE_ODR,"ax",%progbits
 145              		.align	1
 146              		.global	HAL_GPIO_WRITE_ODR
 147              		.syntax unified
 148              		.thumb
 149              		.thumb_func
 150              		.fpu softvfp
 152              	HAL_GPIO_WRITE_ODR:
 153              	.LVL2:
 154              	.LFB68:
 100:Src/main.c    ****   /* Check the parameters */
 155              		.loc 1 100 1 is_stmt 1 view -0
 156              		.cfi_startproc
 157              		@ args = 0, pretend = 0, frame = 0
 158              		@ frame_needed = 0, uses_anonymous_args = 0
 159              		@ link register save eliminated.
 102:Src/main.c    **** 
 160              		.loc 1 102 3 view .LVU35
 104:Src/main.c    **** }
 161              		.loc 1 104 3 view .LVU36
 104:Src/main.c    **** }
 162              		.loc 1 104 14 is_stmt 0 view .LVU37
 163 0000 C368     		ldr	r3, [r0, #12]
 164 0002 1943     		orrs	r1, r1, r3
 165              	.LVL3:
ARM GAS  /tmp/ccparjHr.s 			page 14


 104:Src/main.c    **** }
 166              		.loc 1 104 14 view .LVU38
 167 0004 C160     		str	r1, [r0, #12]
 105:Src/main.c    **** 
 168              		.loc 1 105 1 view .LVU39
 169 0006 7047     		bx	lr
 170              		.cfi_endproc
 171              	.LFE68:
 173              		.section	.text.HAL_I2C_ClearBusyFlagErrata_2_14_7,"ax",%progbits
 174              		.align	1
 175              		.global	HAL_I2C_ClearBusyFlagErrata_2_14_7
 176              		.syntax unified
 177              		.thumb
 178              		.thumb_func
 179              		.fpu softvfp
 181              	HAL_I2C_ClearBusyFlagErrata_2_14_7:
 182              	.LVL4:
 183              	.LFB69:
 107:Src/main.c    **** 
 184              		.loc 1 107 66 is_stmt 1 view -0
 185              		.cfi_startproc
 186              		@ args = 0, pretend = 0, frame = 16
 187              		@ frame_needed = 0, uses_anonymous_args = 0
 109:Src/main.c    ****     if (resetTried == 1) {
 188              		.loc 1 109 5 view .LVU41
 110:Src/main.c    ****         return ;
 189              		.loc 1 110 5 view .LVU42
 110:Src/main.c    ****         return ;
 190              		.loc 1 110 20 is_stmt 0 view .LVU43
 191 0000 484B     		ldr	r3, .L25
 192 0002 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 110:Src/main.c    ****         return ;
 193              		.loc 1 110 8 view .LVU44
 194 0004 012B     		cmp	r3, #1
 195 0006 00F08B80 		beq	.L22
 107:Src/main.c    **** 
 196              		.loc 1 107 66 view .LVU45
 197 000a 70B5     		push	{r4, r5, r6, lr}
 198              	.LCFI3:
 199              		.cfi_def_cfa_offset 16
 200              		.cfi_offset 4, -16
 201              		.cfi_offset 5, -12
 202              		.cfi_offset 6, -8
 203              		.cfi_offset 14, -4
 204 000c 84B0     		sub	sp, sp, #16
 205              	.LCFI4:
 206              		.cfi_def_cfa_offset 32
 207 000e 0446     		mov	r4, r0
 113:Src/main.c    ****     uint32_t SCL_PIN = GPIO_PIN_6;
 208              		.loc 1 113 5 is_stmt 1 view .LVU46
 209              	.LVL5:
 114:Src/main.c    ****     GPIO_InitTypeDef GPIO_InitStruct;
 210              		.loc 1 114 5 view .LVU47
 115:Src/main.c    **** 
 211              		.loc 1 115 5 view .LVU48
 118:Src/main.c    **** 
 212              		.loc 1 118 5 view .LVU49
ARM GAS  /tmp/ccparjHr.s 			page 15


 213 0010 0268     		ldr	r2, [r0]
 214 0012 1368     		ldr	r3, [r2]
 215 0014 23F00103 		bic	r3, r3, #1
 216 0018 1360     		str	r3, [r2]
 121:Src/main.c    ****     GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 217              		.loc 1 121 5 view .LVU50
 121:Src/main.c    ****     GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 218              		.loc 1 121 25 is_stmt 0 view .LVU51
 219 001a C023     		movs	r3, #192
 220 001c 0093     		str	r3, [sp]
 122:Src/main.c    ****     GPIO_InitStruct.Pull = GPIO_NOPULL;
 221              		.loc 1 122 5 is_stmt 1 view .LVU52
 122:Src/main.c    ****     GPIO_InitStruct.Pull = GPIO_NOPULL;
 222              		.loc 1 122 26 is_stmt 0 view .LVU53
 223 001e 1123     		movs	r3, #17
 224 0020 0193     		str	r3, [sp, #4]
 123:Src/main.c    ****     GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 225              		.loc 1 123 5 is_stmt 1 view .LVU54
 123:Src/main.c    ****     GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 226              		.loc 1 123 26 is_stmt 0 view .LVU55
 227 0022 0023     		movs	r3, #0
 228 0024 0293     		str	r3, [sp, #8]
 124:Src/main.c    ****     HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 229              		.loc 1 124 5 is_stmt 1 view .LVU56
 124:Src/main.c    ****     HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 230              		.loc 1 124 27 is_stmt 0 view .LVU57
 231 0026 0323     		movs	r3, #3
 232 0028 0393     		str	r3, [sp, #12]
 125:Src/main.c    **** 
 233              		.loc 1 125 5 is_stmt 1 view .LVU58
 234 002a 3F4D     		ldr	r5, .L25+4
 235 002c 6946     		mov	r1, sp
 236 002e 2846     		mov	r0, r5
 237              	.LVL6:
 125:Src/main.c    **** 
 238              		.loc 1 125 5 is_stmt 0 view .LVU59
 239 0030 FFF7FEFF 		bl	HAL_GPIO_Init
 240              	.LVL7:
 127:Src/main.c    ****     HAL_GPIO_WRITE_ODR(GPIOB, SCL_PIN);
 241              		.loc 1 127 5 is_stmt 1 view .LVU60
 242 0034 8021     		movs	r1, #128
 243 0036 2846     		mov	r0, r5
 244 0038 FFF7FEFF 		bl	HAL_GPIO_WRITE_ODR
 245              	.LVL8:
 128:Src/main.c    **** 
 246              		.loc 1 128 5 view .LVU61
 247 003c 4021     		movs	r1, #64
 248 003e 2846     		mov	r0, r5
 249 0040 FFF7FEFF 		bl	HAL_GPIO_WRITE_ODR
 250              	.LVL9:
 131:Src/main.c    ****     if (HAL_GPIO_ReadPin(GPIOB, SDA_PIN) == GPIO_PIN_RESET) {
 251              		.loc 1 131 5 view .LVU62
 132:Src/main.c    ****         for(;;){}
 252              		.loc 1 132 5 view .LVU63
 132:Src/main.c    ****         for(;;){}
 253              		.loc 1 132 9 is_stmt 0 view .LVU64
 254 0044 8021     		movs	r1, #128
ARM GAS  /tmp/ccparjHr.s 			page 16


 255 0046 2846     		mov	r0, r5
 256 0048 FFF7FEFF 		bl	HAL_GPIO_ReadPin
 257              	.LVL10:
 132:Src/main.c    ****         for(;;){}
 258              		.loc 1 132 8 view .LVU65
 259 004c 00B9     		cbnz	r0, .L9
 260              	.L10:
 133:Src/main.c    ****     }
 261              		.loc 1 133 9 is_stmt 1 discriminator 1 view .LVU66
 133:Src/main.c    ****     }
 262              		.loc 1 133 17 discriminator 1 view .LVU67
 263 004e FEE7     		b	.L10
 264              	.L9:
 135:Src/main.c    ****         for(;;){}
 265              		.loc 1 135 5 view .LVU68
 135:Src/main.c    ****         for(;;){}
 266              		.loc 1 135 9 is_stmt 0 view .LVU69
 267 0050 4021     		movs	r1, #64
 268 0052 3548     		ldr	r0, .L25+4
 269 0054 FFF7FEFF 		bl	HAL_GPIO_ReadPin
 270              	.LVL11:
 135:Src/main.c    ****         for(;;){}
 271              		.loc 1 135 8 view .LVU70
 272 0058 00B9     		cbnz	r0, .L11
 273              	.L12:
 136:Src/main.c    ****     }
 274              		.loc 1 136 9 is_stmt 1 discriminator 2 view .LVU71
 136:Src/main.c    ****     }
 275              		.loc 1 136 17 discriminator 2 view .LVU72
 276 005a FEE7     		b	.L12
 277              	.L11:
 140:Src/main.c    ****     HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 278              		.loc 1 140 5 view .LVU73
 140:Src/main.c    ****     HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 279              		.loc 1 140 25 is_stmt 0 view .LVU74
 280 005c 8026     		movs	r6, #128
 281 005e 0096     		str	r6, [sp]
 141:Src/main.c    **** 
 282              		.loc 1 141 5 is_stmt 1 view .LVU75
 283 0060 314D     		ldr	r5, .L25+4
 284 0062 6946     		mov	r1, sp
 285 0064 2846     		mov	r0, r5
 286 0066 FFF7FEFF 		bl	HAL_GPIO_Init
 287              	.LVL12:
 143:Src/main.c    **** 
 288              		.loc 1 143 5 view .LVU76
 289 006a 3146     		mov	r1, r6
 290 006c 2846     		mov	r0, r5
 291 006e FFF7FEFF 		bl	HAL_GPIO_TogglePin
 292              	.LVL13:
 146:Src/main.c    ****         for(;;){}
 293              		.loc 1 146 5 view .LVU77
 146:Src/main.c    ****         for(;;){}
 294              		.loc 1 146 9 is_stmt 0 view .LVU78
 295 0072 3146     		mov	r1, r6
 296 0074 2846     		mov	r0, r5
 297 0076 FFF7FEFF 		bl	HAL_GPIO_ReadPin
ARM GAS  /tmp/ccparjHr.s 			page 17


 298              	.LVL14:
 146:Src/main.c    ****         for(;;){}
 299              		.loc 1 146 8 view .LVU79
 300 007a 0128     		cmp	r0, #1
 301 007c 00D1     		bne	.L13
 302              	.L14:
 147:Src/main.c    ****     }
 303              		.loc 1 147 9 is_stmt 1 discriminator 3 view .LVU80
 147:Src/main.c    ****     }
 304              		.loc 1 147 17 discriminator 3 view .LVU81
 305 007e FEE7     		b	.L14
 306              	.L13:
 151:Src/main.c    ****     HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 307              		.loc 1 151 5 view .LVU82
 151:Src/main.c    ****     HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 308              		.loc 1 151 25 is_stmt 0 view .LVU83
 309 0080 4026     		movs	r6, #64
 310 0082 0096     		str	r6, [sp]
 152:Src/main.c    **** 
 311              		.loc 1 152 5 is_stmt 1 view .LVU84
 312 0084 284D     		ldr	r5, .L25+4
 313 0086 6946     		mov	r1, sp
 314 0088 2846     		mov	r0, r5
 315 008a FFF7FEFF 		bl	HAL_GPIO_Init
 316              	.LVL15:
 154:Src/main.c    **** 
 317              		.loc 1 154 5 view .LVU85
 318 008e 3146     		mov	r1, r6
 319 0090 2846     		mov	r0, r5
 320 0092 FFF7FEFF 		bl	HAL_GPIO_TogglePin
 321              	.LVL16:
 157:Src/main.c    ****         for(;;){}
 322              		.loc 1 157 5 view .LVU86
 157:Src/main.c    ****         for(;;){}
 323              		.loc 1 157 9 is_stmt 0 view .LVU87
 324 0096 3146     		mov	r1, r6
 325 0098 2846     		mov	r0, r5
 326 009a FFF7FEFF 		bl	HAL_GPIO_ReadPin
 327              	.LVL17:
 157:Src/main.c    ****         for(;;){}
 328              		.loc 1 157 8 view .LVU88
 329 009e 0128     		cmp	r0, #1
 330 00a0 00D1     		bne	.L15
 331              	.L16:
 158:Src/main.c    ****     }
 332              		.loc 1 158 9 is_stmt 1 discriminator 4 view .LVU89
 158:Src/main.c    ****     }
 333              		.loc 1 158 17 discriminator 4 view .LVU90
 334 00a2 FEE7     		b	.L16
 335              	.L15:
 162:Src/main.c    ****     HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 336              		.loc 1 162 5 view .LVU91
 162:Src/main.c    ****     HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 337              		.loc 1 162 25 is_stmt 0 view .LVU92
 338 00a4 8026     		movs	r6, #128
 339 00a6 0096     		str	r6, [sp]
 163:Src/main.c    **** 
ARM GAS  /tmp/ccparjHr.s 			page 18


 340              		.loc 1 163 5 is_stmt 1 view .LVU93
 341 00a8 1F4D     		ldr	r5, .L25+4
 342 00aa 6946     		mov	r1, sp
 343 00ac 2846     		mov	r0, r5
 344 00ae FFF7FEFF 		bl	HAL_GPIO_Init
 345              	.LVL18:
 165:Src/main.c    **** 
 346              		.loc 1 165 5 view .LVU94
 347 00b2 3146     		mov	r1, r6
 348 00b4 2846     		mov	r0, r5
 349 00b6 FFF7FEFF 		bl	HAL_GPIO_WRITE_ODR
 350              	.LVL19:
 168:Src/main.c    ****         for(;;){}
 351              		.loc 1 168 5 view .LVU95
 168:Src/main.c    ****         for(;;){}
 352              		.loc 1 168 9 is_stmt 0 view .LVU96
 353 00ba 3146     		mov	r1, r6
 354 00bc 2846     		mov	r0, r5
 355 00be FFF7FEFF 		bl	HAL_GPIO_ReadPin
 356              	.LVL20:
 168:Src/main.c    ****         for(;;){}
 357              		.loc 1 168 8 view .LVU97
 358 00c2 00B9     		cbnz	r0, .L17
 359              	.L18:
 169:Src/main.c    ****     }
 360              		.loc 1 169 9 is_stmt 1 discriminator 5 view .LVU98
 169:Src/main.c    ****     }
 361              		.loc 1 169 17 discriminator 5 view .LVU99
 362 00c4 FEE7     		b	.L18
 363              	.L17:
 173:Src/main.c    ****     HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 364              		.loc 1 173 5 view .LVU100
 173:Src/main.c    ****     HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 365              		.loc 1 173 25 is_stmt 0 view .LVU101
 366 00c6 4026     		movs	r6, #64
 367 00c8 0096     		str	r6, [sp]
 174:Src/main.c    **** 
 368              		.loc 1 174 5 is_stmt 1 view .LVU102
 369 00ca 174D     		ldr	r5, .L25+4
 370 00cc 6946     		mov	r1, sp
 371 00ce 2846     		mov	r0, r5
 372 00d0 FFF7FEFF 		bl	HAL_GPIO_Init
 373              	.LVL21:
 176:Src/main.c    **** 
 374              		.loc 1 176 5 view .LVU103
 375 00d4 3146     		mov	r1, r6
 376 00d6 2846     		mov	r0, r5
 377 00d8 FFF7FEFF 		bl	HAL_GPIO_WRITE_ODR
 378              	.LVL22:
 179:Src/main.c    ****         for(;;){}
 379              		.loc 1 179 5 view .LVU104
 179:Src/main.c    ****         for(;;){}
 380              		.loc 1 179 9 is_stmt 0 view .LVU105
 381 00dc 3146     		mov	r1, r6
 382 00de 2846     		mov	r0, r5
 383 00e0 FFF7FEFF 		bl	HAL_GPIO_ReadPin
 384              	.LVL23:
ARM GAS  /tmp/ccparjHr.s 			page 19


 179:Src/main.c    ****         for(;;){}
 385              		.loc 1 179 8 view .LVU106
 386 00e4 00B9     		cbnz	r0, .L19
 387              	.L20:
 180:Src/main.c    ****     }
 388              		.loc 1 180 9 is_stmt 1 discriminator 6 view .LVU107
 180:Src/main.c    ****     }
 389              		.loc 1 180 17 discriminator 6 view .LVU108
 390 00e6 FEE7     		b	.L20
 391              	.L19:
 184:Src/main.c    ****     GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 392              		.loc 1 184 5 view .LVU109
 184:Src/main.c    ****     GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 393              		.loc 1 184 25 is_stmt 0 view .LVU110
 394 00e8 C023     		movs	r3, #192
 395 00ea 0093     		str	r3, [sp]
 185:Src/main.c    ****     //GPIO_InitStruct.Alternate = NUCLEO_I2C_EXPBD_SCL_SDA_AF;
 396              		.loc 1 185 5 is_stmt 1 view .LVU111
 185:Src/main.c    ****     //GPIO_InitStruct.Alternate = NUCLEO_I2C_EXPBD_SCL_SDA_AF;
 397              		.loc 1 185 26 is_stmt 0 view .LVU112
 398 00ec 1223     		movs	r3, #18
 399 00ee 0193     		str	r3, [sp, #4]
 187:Src/main.c    **** 
 400              		.loc 1 187 5 is_stmt 1 view .LVU113
 401 00f0 6946     		mov	r1, sp
 402 00f2 0D48     		ldr	r0, .L25+4
 403 00f4 FFF7FEFF 		bl	HAL_GPIO_Init
 404              	.LVL24:
 190:Src/main.c    **** 
 405              		.loc 1 190 4 view .LVU114
 190:Src/main.c    **** 
 406              		.loc 1 190 8 is_stmt 0 view .LVU115
 407 00f8 2268     		ldr	r2, [r4]
 190:Src/main.c    **** 
 408              		.loc 1 190 24 view .LVU116
 409 00fa 1368     		ldr	r3, [r2]
 410 00fc 43F40043 		orr	r3, r3, #32768
 411 0100 1360     		str	r3, [r2]
 193:Src/main.c    **** 
 412              		.loc 1 193 4 is_stmt 1 view .LVU117
 193:Src/main.c    **** 
 413              		.loc 1 193 8 is_stmt 0 view .LVU118
 414 0102 2268     		ldr	r2, [r4]
 193:Src/main.c    **** 
 415              		.loc 1 193 24 view .LVU119
 416 0104 1368     		ldr	r3, [r2]
 417 0106 83F40043 		eor	r3, r3, #32768
 418 010a 1360     		str	r3, [r2]
 196:Src/main.c    **** 
 419              		.loc 1 196 4 is_stmt 1 view .LVU120
 420 010c 2268     		ldr	r2, [r4]
 421 010e 1368     		ldr	r3, [r2]
 422 0110 43F00103 		orr	r3, r3, #1
 423 0114 1360     		str	r3, [r2]
 198:Src/main.c    **** }
 424              		.loc 1 198 4 view .LVU121
 198:Src/main.c    **** }
ARM GAS  /tmp/ccparjHr.s 			page 20


 425              		.loc 1 198 15 is_stmt 0 view .LVU122
 426 0116 034B     		ldr	r3, .L25
 427 0118 0122     		movs	r2, #1
 428 011a 1A70     		strb	r2, [r3]
 199:Src/main.c    **** /* USER CODE END 0 */
 429              		.loc 1 199 1 view .LVU123
 430 011c 04B0     		add	sp, sp, #16
 431              	.LCFI5:
 432              		.cfi_def_cfa_offset 16
 433              		@ sp needed
 434 011e 70BD     		pop	{r4, r5, r6, pc}
 435              	.LVL25:
 436              	.L22:
 437              	.LCFI6:
 438              		.cfi_def_cfa_offset 0
 439              		.cfi_restore 4
 440              		.cfi_restore 5
 441              		.cfi_restore 6
 442              		.cfi_restore 14
 199:Src/main.c    **** /* USER CODE END 0 */
 443              		.loc 1 199 1 view .LVU124
 444 0120 7047     		bx	lr
 445              	.L26:
 446 0122 00BF     		.align	2
 447              	.L25:
 448 0124 00000000 		.word	.LANCHOR0
 449 0128 000C0140 		.word	1073810432
 450              		.cfi_endproc
 451              	.LFE69:
 453              		.section	.text.setGain,"ax",%progbits
 454              		.align	1
 455              		.global	setGain
 456              		.syntax unified
 457              		.thumb
 458              		.thumb_func
 459              		.fpu softvfp
 461              	setGain:
 462              	.LVL26:
 463              	.LFB78:
 576:Src/main.c    **** 
 577:Src/main.c    **** /* USER CODE BEGIN 4 */
 578:Src/main.c    **** void setGain(gain_t new_gain)
 579:Src/main.c    **** {
 464              		.loc 1 579 1 is_stmt 1 view -0
 465              		.cfi_startproc
 466              		@ args = 0, pretend = 0, frame = 0
 467              		@ frame_needed = 0, uses_anonymous_args = 0
 468              		.loc 1 579 1 is_stmt 0 view .LVU126
 469 0000 38B5     		push	{r3, r4, r5, lr}
 470              	.LCFI7:
 471              		.cfi_def_cfa_offset 16
 472              		.cfi_offset 3, -16
 473              		.cfi_offset 4, -12
 474              		.cfi_offset 5, -8
 475              		.cfi_offset 14, -4
 476 0002 0546     		mov	r5, r0
 580:Src/main.c    **** 	memset(&SPI_msg[0], 0, MAX_LOG_MSG_SIZE);
ARM GAS  /tmp/ccparjHr.s 			page 21


 477              		.loc 1 580 2 is_stmt 1 view .LVU127
 478 0004 104C     		ldr	r4, .L29
 479 0006 7E22     		movs	r2, #126
 480 0008 0021     		movs	r1, #0
 481 000a A01C     		adds	r0, r4, #2
 482              	.LVL27:
 483              		.loc 1 580 2 is_stmt 0 view .LVU128
 484 000c FFF7FEFF 		bl	memset
 485              	.LVL28:
 581:Src/main.c    **** 	SPI_msg[0] = 0x40;
 486              		.loc 1 581 2 is_stmt 1 view .LVU129
 487              		.loc 1 581 13 is_stmt 0 view .LVU130
 488 0010 4023     		movs	r3, #64
 489 0012 2370     		strb	r3, [r4]
 582:Src/main.c    ****     SPI_msg[1] = new_gain;
 490              		.loc 1 582 5 is_stmt 1 view .LVU131
 491              		.loc 1 582 16 is_stmt 0 view .LVU132
 492 0014 6570     		strb	r5, [r4, #1]
 583:Src/main.c    ****     HAL_GPIO_WritePin(CSS_PGA_GPIO_Port, CSS_PGA_Pin, GPIO_PIN_RESET);
 493              		.loc 1 583 5 is_stmt 1 view .LVU133
 494 0016 0D4D     		ldr	r5, .L29+4
 495 0018 0022     		movs	r2, #0
 496 001a 0121     		movs	r1, #1
 497 001c 2846     		mov	r0, r5
 498 001e FFF7FEFF 		bl	HAL_GPIO_WritePin
 499              	.LVL29:
 584:Src/main.c    ****     HAL_SPI_Transmit(&hspi1, &SPI_msg[0], 2, HAL_MAX_DELAY);
 500              		.loc 1 584 5 view .LVU134
 501 0022 4FF0FF33 		mov	r3, #-1
 502 0026 0222     		movs	r2, #2
 503 0028 2146     		mov	r1, r4
 504 002a 0948     		ldr	r0, .L29+8
 505 002c FFF7FEFF 		bl	HAL_SPI_Transmit
 506              	.LVL30:
 585:Src/main.c    ****     HAL_GPIO_WritePin(CSS_PGA_GPIO_Port, CSS_PGA_Pin, GPIO_PIN_SET);
 507              		.loc 1 585 5 view .LVU135
 508 0030 0122     		movs	r2, #1
 509 0032 1146     		mov	r1, r2
 510 0034 2846     		mov	r0, r5
 511 0036 FFF7FEFF 		bl	HAL_GPIO_WritePin
 512              	.LVL31:
 586:Src/main.c    ****     memset(&SPI_msg[0], 0, MAX_LOG_MSG_SIZE);
 513              		.loc 1 586 5 view .LVU136
 514 003a 8022     		movs	r2, #128
 515 003c 0021     		movs	r1, #0
 516 003e 2046     		mov	r0, r4
 517 0040 FFF7FEFF 		bl	memset
 518              	.LVL32:
 587:Src/main.c    **** }
 519              		.loc 1 587 1 is_stmt 0 view .LVU137
 520 0044 38BD     		pop	{r3, r4, r5, pc}
 521              	.L30:
 522 0046 00BF     		.align	2
 523              	.L29:
 524 0048 00000000 		.word	.LANCHOR1
 525 004c 000C0140 		.word	1073810432
 526 0050 00000000 		.word	hspi1
ARM GAS  /tmp/ccparjHr.s 			page 22


 527              		.cfi_endproc
 528              	.LFE78:
 530              		.section	.text.setVref,"ax",%progbits
 531              		.align	1
 532              		.global	setVref
 533              		.syntax unified
 534              		.thumb
 535              		.thumb_func
 536              		.fpu softvfp
 538              	setVref:
 539              	.LVL33:
 540              	.LFB79:
 588:Src/main.c    **** 
 589:Src/main.c    **** void setVref(uint16_t _new_Vref)
 590:Src/main.c    **** {
 541              		.loc 1 590 1 is_stmt 1 view -0
 542              		.cfi_startproc
 543              		@ args = 0, pretend = 0, frame = 8
 544              		@ frame_needed = 0, uses_anonymous_args = 0
 545              		.loc 1 590 1 is_stmt 0 view .LVU139
 546 0000 30B5     		push	{r4, r5, lr}
 547              	.LCFI8:
 548              		.cfi_def_cfa_offset 12
 549              		.cfi_offset 4, -12
 550              		.cfi_offset 5, -8
 551              		.cfi_offset 14, -4
 552 0002 83B0     		sub	sp, sp, #12
 553              	.LCFI9:
 554              		.cfi_def_cfa_offset 24
 591:Src/main.c    **** 	volatile uint16_t new_Vref = _new_Vref;
 555              		.loc 1 591 2 is_stmt 1 view .LVU140
 556              		.loc 1 591 20 is_stmt 0 view .LVU141
 557 0004 ADF80600 		strh	r0, [sp, #6]	@ movhi
 592:Src/main.c    **** 	if ( new_Vref > 4095 ) new_Vref = 4095;
 558              		.loc 1 592 2 is_stmt 1 view .LVU142
 559              		.loc 1 592 16 is_stmt 0 view .LVU143
 560 0008 BDF80630 		ldrh	r3, [sp, #6]
 561 000c 9BB2     		uxth	r3, r3
 562              		.loc 1 592 5 view .LVU144
 563 000e B3F5805F 		cmp	r3, #4096
 564 0012 03D3     		bcc	.L32
 565              		.loc 1 592 25 is_stmt 1 discriminator 1 view .LVU145
 566              		.loc 1 592 34 is_stmt 0 discriminator 1 view .LVU146
 567 0014 40F6FF73 		movw	r3, #4095
 568 0018 ADF80630 		strh	r3, [sp, #6]	@ movhi
 569              	.L32:
 593:Src/main.c    **** 
 594:Src/main.c    **** 	memset(&SPI_msg[0], 0, MAX_LOG_MSG_SIZE);
 570              		.loc 1 594 2 is_stmt 1 view .LVU147
 571 001c 144C     		ldr	r4, .L34
 572 001e 7E22     		movs	r2, #126
 573 0020 0021     		movs	r1, #0
 574 0022 A01C     		adds	r0, r4, #2
 575              	.LVL34:
 576              		.loc 1 594 2 is_stmt 0 view .LVU148
 577 0024 FFF7FEFF 		bl	memset
 578              	.LVL35:
ARM GAS  /tmp/ccparjHr.s 			page 23


 595:Src/main.c    **** 	SPI_msg[0] = ( 0x70 | ( ( new_Vref >> 8 ) & 0xF ) );
 579              		.loc 1 595 2 is_stmt 1 view .LVU149
 580              		.loc 1 595 44 is_stmt 0 view .LVU150
 581 0028 BDF80630 		ldrh	r3, [sp, #6]
 582 002c C3F30323 		ubfx	r3, r3, #8, #4
 583              		.loc 1 595 22 view .LVU151
 584 0030 43F07003 		orr	r3, r3, #112
 585              		.loc 1 595 13 view .LVU152
 586 0034 2370     		strb	r3, [r4]
 596:Src/main.c    ****     SPI_msg[1] = ( new_Vref & 0xFF );
 587              		.loc 1 596 5 is_stmt 1 view .LVU153
 588              		.loc 1 596 16 is_stmt 0 view .LVU154
 589 0036 BDF80630 		ldrh	r3, [sp, #6]
 590 003a 6370     		strb	r3, [r4, #1]
 597:Src/main.c    ****     HAL_GPIO_WritePin(CSS_DAC_GPIO_Port, CSS_DAC_Pin, GPIO_PIN_RESET);
 591              		.loc 1 597 5 is_stmt 1 view .LVU155
 592 003c 0D4D     		ldr	r5, .L34+4
 593 003e 0022     		movs	r2, #0
 594 0040 0221     		movs	r1, #2
 595 0042 2846     		mov	r0, r5
 596 0044 FFF7FEFF 		bl	HAL_GPIO_WritePin
 597              	.LVL36:
 598:Src/main.c    ****     HAL_SPI_Transmit(&hspi1, &SPI_msg[0], 2, HAL_MAX_DELAY);
 598              		.loc 1 598 5 view .LVU156
 599 0048 4FF0FF33 		mov	r3, #-1
 600 004c 0222     		movs	r2, #2
 601 004e 2146     		mov	r1, r4
 602 0050 0948     		ldr	r0, .L34+8
 603 0052 FFF7FEFF 		bl	HAL_SPI_Transmit
 604              	.LVL37:
 599:Src/main.c    ****     HAL_GPIO_WritePin(CSS_DAC_GPIO_Port, CSS_DAC_Pin, GPIO_PIN_SET);
 605              		.loc 1 599 5 view .LVU157
 606 0056 0122     		movs	r2, #1
 607 0058 0221     		movs	r1, #2
 608 005a 2846     		mov	r0, r5
 609 005c FFF7FEFF 		bl	HAL_GPIO_WritePin
 610              	.LVL38:
 600:Src/main.c    ****     memset(&SPI_msg[0], 0, MAX_LOG_MSG_SIZE);
 611              		.loc 1 600 5 view .LVU158
 612 0060 8022     		movs	r2, #128
 613 0062 0021     		movs	r1, #0
 614 0064 2046     		mov	r0, r4
 615 0066 FFF7FEFF 		bl	memset
 616              	.LVL39:
 601:Src/main.c    **** }
 617              		.loc 1 601 1 is_stmt 0 view .LVU159
 618 006a 03B0     		add	sp, sp, #12
 619              	.LCFI10:
 620              		.cfi_def_cfa_offset 12
 621              		@ sp needed
 622 006c 30BD     		pop	{r4, r5, pc}
 623              	.L35:
 624 006e 00BF     		.align	2
 625              	.L34:
 626 0070 00000000 		.word	.LANCHOR1
 627 0074 000C0140 		.word	1073810432
 628 0078 00000000 		.word	hspi1
ARM GAS  /tmp/ccparjHr.s 			page 24


 629              		.cfi_endproc
 630              	.LFE79:
 632              		.section	.text.Error_Handler,"ax",%progbits
 633              		.align	1
 634              		.global	Error_Handler
 635              		.syntax unified
 636              		.thumb
 637              		.thumb_func
 638              		.fpu softvfp
 640              	Error_Handler:
 641              	.LFB80:
 602:Src/main.c    **** /* USER CODE END 4 */
 603:Src/main.c    **** 
 604:Src/main.c    **** /**
 605:Src/main.c    ****   * @brief  This function is executed in case of error occurrence.
 606:Src/main.c    ****   * @retval None
 607:Src/main.c    ****   */
 608:Src/main.c    **** void Error_Handler(void)
 609:Src/main.c    **** {
 642              		.loc 1 609 1 is_stmt 1 view -0
 643              		.cfi_startproc
 644              		@ args = 0, pretend = 0, frame = 0
 645              		@ frame_needed = 0, uses_anonymous_args = 0
 646              		@ link register save eliminated.
 610:Src/main.c    ****   /* USER CODE BEGIN Error_Handler_Debug */
 611:Src/main.c    ****   /* User can add his own implementation to report the HAL error return state */
 612:Src/main.c    **** 	__asm("bkpt 0");
 647              		.loc 1 612 2 view .LVU161
 648              		.syntax unified
 649              	@ 612 "Src/main.c" 1
 650 0000 00BE     		bkpt 0
 651              	@ 0 "" 2
 613:Src/main.c    ****   /* USER CODE END Error_Handler_Debug */
 614:Src/main.c    **** }
 652              		.loc 1 614 1 is_stmt 0 view .LVU162
 653              		.thumb
 654              		.syntax unified
 655 0002 7047     		bx	lr
 656              		.cfi_endproc
 657              	.LFE80:
 659              		.section	.text.MX_ADC1_Init,"ax",%progbits
 660              		.align	1
 661              		.syntax unified
 662              		.thumb
 663              		.thumb_func
 664              		.fpu softvfp
 666              	MX_ADC1_Init:
 667              	.LFB72:
 373:Src/main.c    **** 
 668              		.loc 1 373 1 is_stmt 1 view -0
 669              		.cfi_startproc
 670              		@ args = 0, pretend = 0, frame = 16
 671              		@ frame_needed = 0, uses_anonymous_args = 0
 672 0000 00B5     		push	{lr}
 673              	.LCFI11:
 674              		.cfi_def_cfa_offset 4
 675              		.cfi_offset 14, -4
ARM GAS  /tmp/ccparjHr.s 			page 25


 676 0002 85B0     		sub	sp, sp, #20
 677              	.LCFI12:
 678              		.cfi_def_cfa_offset 24
 379:Src/main.c    **** 
 679              		.loc 1 379 3 view .LVU164
 379:Src/main.c    **** 
 680              		.loc 1 379 26 is_stmt 0 view .LVU165
 681 0004 0023     		movs	r3, #0
 682 0006 0193     		str	r3, [sp, #4]
 683 0008 0293     		str	r3, [sp, #8]
 684 000a 0393     		str	r3, [sp, #12]
 386:Src/main.c    ****   hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 685              		.loc 1 386 3 is_stmt 1 view .LVU166
 386:Src/main.c    ****   hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 686              		.loc 1 386 18 is_stmt 0 view .LVU167
 687 000c 1048     		ldr	r0, .L43
 688 000e 114A     		ldr	r2, .L43+4
 689 0010 0260     		str	r2, [r0]
 387:Src/main.c    ****   hadc1.Init.ContinuousConvMode = DISABLE;
 690              		.loc 1 387 3 is_stmt 1 view .LVU168
 387:Src/main.c    ****   hadc1.Init.ContinuousConvMode = DISABLE;
 691              		.loc 1 387 27 is_stmt 0 view .LVU169
 692 0012 8360     		str	r3, [r0, #8]
 388:Src/main.c    ****   hadc1.Init.DiscontinuousConvMode = DISABLE;
 693              		.loc 1 388 3 is_stmt 1 view .LVU170
 388:Src/main.c    ****   hadc1.Init.DiscontinuousConvMode = DISABLE;
 694              		.loc 1 388 33 is_stmt 0 view .LVU171
 695 0014 0373     		strb	r3, [r0, #12]
 389:Src/main.c    ****   hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 696              		.loc 1 389 3 is_stmt 1 view .LVU172
 389:Src/main.c    ****   hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 697              		.loc 1 389 36 is_stmt 0 view .LVU173
 698 0016 0375     		strb	r3, [r0, #20]
 390:Src/main.c    ****   hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 699              		.loc 1 390 3 is_stmt 1 view .LVU174
 390:Src/main.c    ****   hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 700              		.loc 1 390 31 is_stmt 0 view .LVU175
 701 0018 4FF46022 		mov	r2, #917504
 702 001c C261     		str	r2, [r0, #28]
 391:Src/main.c    ****   hadc1.Init.NbrOfConversion = 1;
 703              		.loc 1 391 3 is_stmt 1 view .LVU176
 391:Src/main.c    ****   hadc1.Init.NbrOfConversion = 1;
 704              		.loc 1 391 24 is_stmt 0 view .LVU177
 705 001e 4360     		str	r3, [r0, #4]
 392:Src/main.c    ****   if (HAL_ADC_Init(&hadc1) != HAL_OK)
 706              		.loc 1 392 3 is_stmt 1 view .LVU178
 392:Src/main.c    ****   if (HAL_ADC_Init(&hadc1) != HAL_OK)
 707              		.loc 1 392 30 is_stmt 0 view .LVU179
 708 0020 0123     		movs	r3, #1
 709 0022 0361     		str	r3, [r0, #16]
 393:Src/main.c    ****   {
 710              		.loc 1 393 3 is_stmt 1 view .LVU180
 393:Src/main.c    ****   {
 711              		.loc 1 393 7 is_stmt 0 view .LVU181
 712 0024 FFF7FEFF 		bl	HAL_ADC_Init
 713              	.LVL40:
 393:Src/main.c    ****   {
ARM GAS  /tmp/ccparjHr.s 			page 26


 714              		.loc 1 393 6 view .LVU182
 715 0028 60B9     		cbnz	r0, .L41
 716              	.L38:
 399:Src/main.c    ****   sConfig.Rank = ADC_REGULAR_RANK_1;
 717              		.loc 1 399 3 is_stmt 1 view .LVU183
 399:Src/main.c    ****   sConfig.Rank = ADC_REGULAR_RANK_1;
 718              		.loc 1 399 19 is_stmt 0 view .LVU184
 719 002a 0023     		movs	r3, #0
 720 002c 0193     		str	r3, [sp, #4]
 400:Src/main.c    ****   sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 721              		.loc 1 400 3 is_stmt 1 view .LVU185
 400:Src/main.c    ****   sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 722              		.loc 1 400 16 is_stmt 0 view .LVU186
 723 002e 0122     		movs	r2, #1
 724 0030 0292     		str	r2, [sp, #8]
 401:Src/main.c    ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 725              		.loc 1 401 3 is_stmt 1 view .LVU187
 401:Src/main.c    ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 726              		.loc 1 401 24 is_stmt 0 view .LVU188
 727 0032 0393     		str	r3, [sp, #12]
 402:Src/main.c    ****   {
 728              		.loc 1 402 3 is_stmt 1 view .LVU189
 402:Src/main.c    ****   {
 729              		.loc 1 402 7 is_stmt 0 view .LVU190
 730 0034 01A9     		add	r1, sp, #4
 731 0036 0648     		ldr	r0, .L43
 732 0038 FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 733              	.LVL41:
 402:Src/main.c    ****   {
 734              		.loc 1 402 6 view .LVU191
 735 003c 28B9     		cbnz	r0, .L42
 736              	.L37:
 410:Src/main.c    **** 
 737              		.loc 1 410 1 view .LVU192
 738 003e 05B0     		add	sp, sp, #20
 739              	.LCFI13:
 740              		.cfi_remember_state
 741              		.cfi_def_cfa_offset 4
 742              		@ sp needed
 743 0040 5DF804FB 		ldr	pc, [sp], #4
 744              	.L41:
 745              	.LCFI14:
 746              		.cfi_restore_state
 395:Src/main.c    ****   }
 747              		.loc 1 395 5 is_stmt 1 view .LVU193
 748 0044 FFF7FEFF 		bl	Error_Handler
 749              	.LVL42:
 750 0048 EFE7     		b	.L38
 751              	.L42:
 404:Src/main.c    ****   }
 752              		.loc 1 404 5 view .LVU194
 753 004a FFF7FEFF 		bl	Error_Handler
 754              	.LVL43:
 410:Src/main.c    **** 
 755              		.loc 1 410 1 is_stmt 0 view .LVU195
 756 004e F6E7     		b	.L37
 757              	.L44:
ARM GAS  /tmp/ccparjHr.s 			page 27


 758              		.align	2
 759              	.L43:
 760 0050 00000000 		.word	hadc1
 761 0054 00240140 		.word	1073816576
 762              		.cfi_endproc
 763              	.LFE72:
 765              		.section	.text.MX_SPI1_Init,"ax",%progbits
 766              		.align	1
 767              		.syntax unified
 768              		.thumb
 769              		.thumb_func
 770              		.fpu softvfp
 772              	MX_SPI1_Init:
 773              	.LFB74:
 452:Src/main.c    **** 
 774              		.loc 1 452 1 is_stmt 1 view -0
 775              		.cfi_startproc
 776              		@ args = 0, pretend = 0, frame = 0
 777              		@ frame_needed = 0, uses_anonymous_args = 0
 778 0000 08B5     		push	{r3, lr}
 779              	.LCFI15:
 780              		.cfi_def_cfa_offset 8
 781              		.cfi_offset 3, -8
 782              		.cfi_offset 14, -4
 462:Src/main.c    ****   hspi1.Init.Mode = SPI_MODE_MASTER;
 783              		.loc 1 462 3 view .LVU197
 462:Src/main.c    ****   hspi1.Init.Mode = SPI_MODE_MASTER;
 784              		.loc 1 462 18 is_stmt 0 view .LVU198
 785 0002 1048     		ldr	r0, .L49
 786 0004 104B     		ldr	r3, .L49+4
 787 0006 0360     		str	r3, [r0]
 463:Src/main.c    ****   hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 788              		.loc 1 463 3 is_stmt 1 view .LVU199
 463:Src/main.c    ****   hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 789              		.loc 1 463 19 is_stmt 0 view .LVU200
 790 0008 4FF48273 		mov	r3, #260
 791 000c 4360     		str	r3, [r0, #4]
 464:Src/main.c    ****   hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 792              		.loc 1 464 3 is_stmt 1 view .LVU201
 464:Src/main.c    ****   hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 793              		.loc 1 464 24 is_stmt 0 view .LVU202
 794 000e 4FF40043 		mov	r3, #32768
 795 0012 8360     		str	r3, [r0, #8]
 465:Src/main.c    ****   hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 796              		.loc 1 465 3 is_stmt 1 view .LVU203
 465:Src/main.c    ****   hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 797              		.loc 1 465 23 is_stmt 0 view .LVU204
 798 0014 0023     		movs	r3, #0
 799 0016 C360     		str	r3, [r0, #12]
 466:Src/main.c    ****   hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 800              		.loc 1 466 3 is_stmt 1 view .LVU205
 466:Src/main.c    ****   hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 801              		.loc 1 466 26 is_stmt 0 view .LVU206
 802 0018 0222     		movs	r2, #2
 803 001a 0261     		str	r2, [r0, #16]
 467:Src/main.c    ****   hspi1.Init.NSS = SPI_NSS_SOFT;
 804              		.loc 1 467 3 is_stmt 1 view .LVU207
ARM GAS  /tmp/ccparjHr.s 			page 28


 467:Src/main.c    ****   hspi1.Init.NSS = SPI_NSS_SOFT;
 805              		.loc 1 467 23 is_stmt 0 view .LVU208
 806 001c 0122     		movs	r2, #1
 807 001e 4261     		str	r2, [r0, #20]
 468:Src/main.c    ****   hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 808              		.loc 1 468 3 is_stmt 1 view .LVU209
 468:Src/main.c    ****   hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 809              		.loc 1 468 18 is_stmt 0 view .LVU210
 810 0020 4FF40072 		mov	r2, #512
 811 0024 8261     		str	r2, [r0, #24]
 469:Src/main.c    ****   hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 812              		.loc 1 469 3 is_stmt 1 view .LVU211
 469:Src/main.c    ****   hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 813              		.loc 1 469 32 is_stmt 0 view .LVU212
 814 0026 0822     		movs	r2, #8
 815 0028 C261     		str	r2, [r0, #28]
 470:Src/main.c    ****   hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 816              		.loc 1 470 3 is_stmt 1 view .LVU213
 470:Src/main.c    ****   hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 817              		.loc 1 470 23 is_stmt 0 view .LVU214
 818 002a 0362     		str	r3, [r0, #32]
 471:Src/main.c    ****   hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 819              		.loc 1 471 3 is_stmt 1 view .LVU215
 471:Src/main.c    ****   hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 820              		.loc 1 471 21 is_stmt 0 view .LVU216
 821 002c 4362     		str	r3, [r0, #36]
 472:Src/main.c    ****   hspi1.Init.CRCPolynomial = 10;
 822              		.loc 1 472 3 is_stmt 1 view .LVU217
 472:Src/main.c    ****   hspi1.Init.CRCPolynomial = 10;
 823              		.loc 1 472 29 is_stmt 0 view .LVU218
 824 002e 8362     		str	r3, [r0, #40]
 473:Src/main.c    ****   if (HAL_SPI_Init(&hspi1) != HAL_OK)
 825              		.loc 1 473 3 is_stmt 1 view .LVU219
 473:Src/main.c    ****   if (HAL_SPI_Init(&hspi1) != HAL_OK)
 826              		.loc 1 473 28 is_stmt 0 view .LVU220
 827 0030 0A23     		movs	r3, #10
 828 0032 C362     		str	r3, [r0, #44]
 474:Src/main.c    ****   {
 829              		.loc 1 474 3 is_stmt 1 view .LVU221
 474:Src/main.c    ****   {
 830              		.loc 1 474 7 is_stmt 0 view .LVU222
 831 0034 FFF7FEFF 		bl	HAL_SPI_Init
 832              	.LVL44:
 474:Src/main.c    ****   {
 833              		.loc 1 474 6 view .LVU223
 834 0038 00B9     		cbnz	r0, .L48
 835              	.L45:
 482:Src/main.c    **** 
 836              		.loc 1 482 1 view .LVU224
 837 003a 08BD     		pop	{r3, pc}
 838              	.L48:
 476:Src/main.c    ****   }
 839              		.loc 1 476 5 is_stmt 1 view .LVU225
 840 003c FFF7FEFF 		bl	Error_Handler
 841              	.LVL45:
 482:Src/main.c    **** 
 842              		.loc 1 482 1 is_stmt 0 view .LVU226
ARM GAS  /tmp/ccparjHr.s 			page 29


 843 0040 FBE7     		b	.L45
 844              	.L50:
 845 0042 00BF     		.align	2
 846              	.L49:
 847 0044 00000000 		.word	hspi1
 848 0048 00300140 		.word	1073819648
 849              		.cfi_endproc
 850              	.LFE74:
 852              		.section	.text.MX_USART1_UART_Init,"ax",%progbits
 853              		.align	1
 854              		.syntax unified
 855              		.thumb
 856              		.thumb_func
 857              		.fpu softvfp
 859              	MX_USART1_UART_Init:
 860              	.LFB75:
 490:Src/main.c    **** 
 861              		.loc 1 490 1 is_stmt 1 view -0
 862              		.cfi_startproc
 863              		@ args = 0, pretend = 0, frame = 0
 864              		@ frame_needed = 0, uses_anonymous_args = 0
 865 0000 08B5     		push	{r3, lr}
 866              	.LCFI16:
 867              		.cfi_def_cfa_offset 8
 868              		.cfi_offset 3, -8
 869              		.cfi_offset 14, -4
 499:Src/main.c    ****   huart1.Init.BaudRate = 460800;
 870              		.loc 1 499 3 view .LVU228
 499:Src/main.c    ****   huart1.Init.BaudRate = 460800;
 871              		.loc 1 499 19 is_stmt 0 view .LVU229
 872 0002 0A48     		ldr	r0, .L55
 873 0004 0A4B     		ldr	r3, .L55+4
 874 0006 0360     		str	r3, [r0]
 500:Src/main.c    ****   huart1.Init.WordLength = UART_WORDLENGTH_8B;
 875              		.loc 1 500 3 is_stmt 1 view .LVU230
 500:Src/main.c    ****   huart1.Init.WordLength = UART_WORDLENGTH_8B;
 876              		.loc 1 500 24 is_stmt 0 view .LVU231
 877 0008 4FF4E123 		mov	r3, #460800
 878 000c 4360     		str	r3, [r0, #4]
 501:Src/main.c    ****   huart1.Init.StopBits = UART_STOPBITS_1;
 879              		.loc 1 501 3 is_stmt 1 view .LVU232
 501:Src/main.c    ****   huart1.Init.StopBits = UART_STOPBITS_1;
 880              		.loc 1 501 26 is_stmt 0 view .LVU233
 881 000e 0023     		movs	r3, #0
 882 0010 8360     		str	r3, [r0, #8]
 502:Src/main.c    ****   huart1.Init.Parity = UART_PARITY_NONE;
 883              		.loc 1 502 3 is_stmt 1 view .LVU234
 502:Src/main.c    ****   huart1.Init.Parity = UART_PARITY_NONE;
 884              		.loc 1 502 24 is_stmt 0 view .LVU235
 885 0012 C360     		str	r3, [r0, #12]
 503:Src/main.c    ****   huart1.Init.Mode = UART_MODE_TX_RX;
 886              		.loc 1 503 3 is_stmt 1 view .LVU236
 503:Src/main.c    ****   huart1.Init.Mode = UART_MODE_TX_RX;
 887              		.loc 1 503 22 is_stmt 0 view .LVU237
 888 0014 0361     		str	r3, [r0, #16]
 504:Src/main.c    ****   huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 889              		.loc 1 504 3 is_stmt 1 view .LVU238
ARM GAS  /tmp/ccparjHr.s 			page 30


 504:Src/main.c    ****   huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 890              		.loc 1 504 20 is_stmt 0 view .LVU239
 891 0016 0C22     		movs	r2, #12
 892 0018 4261     		str	r2, [r0, #20]
 505:Src/main.c    ****   huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 893              		.loc 1 505 3 is_stmt 1 view .LVU240
 505:Src/main.c    ****   huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 894              		.loc 1 505 25 is_stmt 0 view .LVU241
 895 001a 8361     		str	r3, [r0, #24]
 506:Src/main.c    ****   if (HAL_UART_Init(&huart1) != HAL_OK)
 896              		.loc 1 506 3 is_stmt 1 view .LVU242
 506:Src/main.c    ****   if (HAL_UART_Init(&huart1) != HAL_OK)
 897              		.loc 1 506 28 is_stmt 0 view .LVU243
 898 001c C361     		str	r3, [r0, #28]
 507:Src/main.c    ****   {
 899              		.loc 1 507 3 is_stmt 1 view .LVU244
 507:Src/main.c    ****   {
 900              		.loc 1 507 7 is_stmt 0 view .LVU245
 901 001e FFF7FEFF 		bl	HAL_UART_Init
 902              	.LVL46:
 507:Src/main.c    ****   {
 903              		.loc 1 507 6 view .LVU246
 904 0022 00B9     		cbnz	r0, .L54
 905              	.L51:
 515:Src/main.c    **** 
 906              		.loc 1 515 1 view .LVU247
 907 0024 08BD     		pop	{r3, pc}
 908              	.L54:
 509:Src/main.c    ****   }
 909              		.loc 1 509 5 is_stmt 1 view .LVU248
 910 0026 FFF7FEFF 		bl	Error_Handler
 911              	.LVL47:
 515:Src/main.c    **** 
 912              		.loc 1 515 1 is_stmt 0 view .LVU249
 913 002a FBE7     		b	.L51
 914              	.L56:
 915              		.align	2
 916              	.L55:
 917 002c 00000000 		.word	huart1
 918 0030 00380140 		.word	1073821696
 919              		.cfi_endproc
 920              	.LFE75:
 922              		.section	.text.MX_USART2_UART_Init,"ax",%progbits
 923              		.align	1
 924              		.syntax unified
 925              		.thumb
 926              		.thumb_func
 927              		.fpu softvfp
 929              	MX_USART2_UART_Init:
 930              	.LFB76:
 523:Src/main.c    **** 
 931              		.loc 1 523 1 is_stmt 1 view -0
 932              		.cfi_startproc
 933              		@ args = 0, pretend = 0, frame = 0
 934              		@ frame_needed = 0, uses_anonymous_args = 0
 935 0000 08B5     		push	{r3, lr}
 936              	.LCFI17:
ARM GAS  /tmp/ccparjHr.s 			page 31


 937              		.cfi_def_cfa_offset 8
 938              		.cfi_offset 3, -8
 939              		.cfi_offset 14, -4
 532:Src/main.c    ****   huart2.Init.BaudRate = 4800;
 940              		.loc 1 532 3 view .LVU251
 532:Src/main.c    ****   huart2.Init.BaudRate = 4800;
 941              		.loc 1 532 19 is_stmt 0 view .LVU252
 942 0002 0A48     		ldr	r0, .L61
 943 0004 0A4B     		ldr	r3, .L61+4
 944 0006 0360     		str	r3, [r0]
 533:Src/main.c    ****   huart2.Init.WordLength = UART_WORDLENGTH_8B;
 945              		.loc 1 533 3 is_stmt 1 view .LVU253
 533:Src/main.c    ****   huart2.Init.WordLength = UART_WORDLENGTH_8B;
 946              		.loc 1 533 24 is_stmt 0 view .LVU254
 947 0008 4FF49653 		mov	r3, #4800
 948 000c 4360     		str	r3, [r0, #4]
 534:Src/main.c    ****   huart2.Init.StopBits = UART_STOPBITS_1;
 949              		.loc 1 534 3 is_stmt 1 view .LVU255
 534:Src/main.c    ****   huart2.Init.StopBits = UART_STOPBITS_1;
 950              		.loc 1 534 26 is_stmt 0 view .LVU256
 951 000e 0023     		movs	r3, #0
 952 0010 8360     		str	r3, [r0, #8]
 535:Src/main.c    ****   huart2.Init.Parity = UART_PARITY_NONE;
 953              		.loc 1 535 3 is_stmt 1 view .LVU257
 535:Src/main.c    ****   huart2.Init.Parity = UART_PARITY_NONE;
 954              		.loc 1 535 24 is_stmt 0 view .LVU258
 955 0012 C360     		str	r3, [r0, #12]
 536:Src/main.c    ****   huart2.Init.Mode = UART_MODE_TX_RX;
 956              		.loc 1 536 3 is_stmt 1 view .LVU259
 536:Src/main.c    ****   huart2.Init.Mode = UART_MODE_TX_RX;
 957              		.loc 1 536 22 is_stmt 0 view .LVU260
 958 0014 0361     		str	r3, [r0, #16]
 537:Src/main.c    ****   huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 959              		.loc 1 537 3 is_stmt 1 view .LVU261
 537:Src/main.c    ****   huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 960              		.loc 1 537 20 is_stmt 0 view .LVU262
 961 0016 0C22     		movs	r2, #12
 962 0018 4261     		str	r2, [r0, #20]
 538:Src/main.c    ****   huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 963              		.loc 1 538 3 is_stmt 1 view .LVU263
 538:Src/main.c    ****   huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 964              		.loc 1 538 25 is_stmt 0 view .LVU264
 965 001a 8361     		str	r3, [r0, #24]
 539:Src/main.c    ****   if (HAL_UART_Init(&huart2) != HAL_OK)
 966              		.loc 1 539 3 is_stmt 1 view .LVU265
 539:Src/main.c    ****   if (HAL_UART_Init(&huart2) != HAL_OK)
 967              		.loc 1 539 28 is_stmt 0 view .LVU266
 968 001c C361     		str	r3, [r0, #28]
 540:Src/main.c    ****   {
 969              		.loc 1 540 3 is_stmt 1 view .LVU267
 540:Src/main.c    ****   {
 970              		.loc 1 540 7 is_stmt 0 view .LVU268
 971 001e FFF7FEFF 		bl	HAL_UART_Init
 972              	.LVL48:
 540:Src/main.c    ****   {
 973              		.loc 1 540 6 view .LVU269
 974 0022 00B9     		cbnz	r0, .L60
ARM GAS  /tmp/ccparjHr.s 			page 32


 975              	.L57:
 548:Src/main.c    **** 
 976              		.loc 1 548 1 view .LVU270
 977 0024 08BD     		pop	{r3, pc}
 978              	.L60:
 542:Src/main.c    ****   }
 979              		.loc 1 542 5 is_stmt 1 view .LVU271
 980 0026 FFF7FEFF 		bl	Error_Handler
 981              	.LVL49:
 548:Src/main.c    **** 
 982              		.loc 1 548 1 is_stmt 0 view .LVU272
 983 002a FBE7     		b	.L57
 984              	.L62:
 985              		.align	2
 986              	.L61:
 987 002c 00000000 		.word	huart2
 988 0030 00440040 		.word	1073759232
 989              		.cfi_endproc
 990              	.LFE76:
 992              		.section	.text.MX_I2C1_Init,"ax",%progbits
 993              		.align	1
 994              		.syntax unified
 995              		.thumb
 996              		.thumb_func
 997              		.fpu softvfp
 999              	MX_I2C1_Init:
 1000              	.LFB73:
 418:Src/main.c    **** 
 1001              		.loc 1 418 1 is_stmt 1 view -0
 1002              		.cfi_startproc
 1003              		@ args = 0, pretend = 0, frame = 0
 1004              		@ frame_needed = 0, uses_anonymous_args = 0
 1005 0000 08B5     		push	{r3, lr}
 1006              	.LCFI18:
 1007              		.cfi_def_cfa_offset 8
 1008              		.cfi_offset 3, -8
 1009              		.cfi_offset 14, -4
 427:Src/main.c    ****   hi2c1.Init.ClockSpeed = 100000;
 1010              		.loc 1 427 3 view .LVU274
 427:Src/main.c    ****   hi2c1.Init.ClockSpeed = 100000;
 1011              		.loc 1 427 18 is_stmt 0 view .LVU275
 1012 0002 0B48     		ldr	r0, .L67
 1013 0004 0B4B     		ldr	r3, .L67+4
 1014 0006 0360     		str	r3, [r0]
 428:Src/main.c    ****   hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 1015              		.loc 1 428 3 is_stmt 1 view .LVU276
 428:Src/main.c    ****   hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 1016              		.loc 1 428 25 is_stmt 0 view .LVU277
 1017 0008 0B4B     		ldr	r3, .L67+8
 1018 000a 4360     		str	r3, [r0, #4]
 429:Src/main.c    ****   hi2c1.Init.OwnAddress1 = 0;
 1019              		.loc 1 429 3 is_stmt 1 view .LVU278
 429:Src/main.c    ****   hi2c1.Init.OwnAddress1 = 0;
 1020              		.loc 1 429 24 is_stmt 0 view .LVU279
 1021 000c 0023     		movs	r3, #0
 1022 000e 8360     		str	r3, [r0, #8]
 430:Src/main.c    ****   hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
ARM GAS  /tmp/ccparjHr.s 			page 33


 1023              		.loc 1 430 3 is_stmt 1 view .LVU280
 430:Src/main.c    ****   hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 1024              		.loc 1 430 26 is_stmt 0 view .LVU281
 1025 0010 C360     		str	r3, [r0, #12]
 431:Src/main.c    ****   hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 1026              		.loc 1 431 3 is_stmt 1 view .LVU282
 431:Src/main.c    ****   hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 1027              		.loc 1 431 29 is_stmt 0 view .LVU283
 1028 0012 4FF48042 		mov	r2, #16384
 1029 0016 0261     		str	r2, [r0, #16]
 432:Src/main.c    ****   hi2c1.Init.OwnAddress2 = 0;
 1030              		.loc 1 432 3 is_stmt 1 view .LVU284
 432:Src/main.c    ****   hi2c1.Init.OwnAddress2 = 0;
 1031              		.loc 1 432 30 is_stmt 0 view .LVU285
 1032 0018 4361     		str	r3, [r0, #20]
 433:Src/main.c    ****   hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 1033              		.loc 1 433 3 is_stmt 1 view .LVU286
 433:Src/main.c    ****   hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 1034              		.loc 1 433 26 is_stmt 0 view .LVU287
 1035 001a 8361     		str	r3, [r0, #24]
 434:Src/main.c    ****   hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 1036              		.loc 1 434 3 is_stmt 1 view .LVU288
 434:Src/main.c    ****   hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 1037              		.loc 1 434 30 is_stmt 0 view .LVU289
 1038 001c C361     		str	r3, [r0, #28]
 435:Src/main.c    ****   if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 1039              		.loc 1 435 3 is_stmt 1 view .LVU290
 435:Src/main.c    ****   if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 1040              		.loc 1 435 28 is_stmt 0 view .LVU291
 1041 001e 0362     		str	r3, [r0, #32]
 436:Src/main.c    ****   {
 1042              		.loc 1 436 3 is_stmt 1 view .LVU292
 436:Src/main.c    ****   {
 1043              		.loc 1 436 7 is_stmt 0 view .LVU293
 1044 0020 FFF7FEFF 		bl	HAL_I2C_Init
 1045              	.LVL50:
 436:Src/main.c    ****   {
 1046              		.loc 1 436 6 view .LVU294
 1047 0024 00B9     		cbnz	r0, .L66
 1048              	.L63:
 444:Src/main.c    **** 
 1049              		.loc 1 444 1 view .LVU295
 1050 0026 08BD     		pop	{r3, pc}
 1051              	.L66:
 438:Src/main.c    ****   }
 1052              		.loc 1 438 5 is_stmt 1 view .LVU296
 1053 0028 FFF7FEFF 		bl	Error_Handler
 1054              	.LVL51:
 444:Src/main.c    **** 
 1055              		.loc 1 444 1 is_stmt 0 view .LVU297
 1056 002c FBE7     		b	.L63
 1057              	.L68:
 1058 002e 00BF     		.align	2
 1059              	.L67:
 1060 0030 00000000 		.word	hi2c1
 1061 0034 00540040 		.word	1073763328
 1062 0038 A0860100 		.word	100000
ARM GAS  /tmp/ccparjHr.s 			page 34


 1063              		.cfi_endproc
 1064              	.LFE73:
 1066              		.section	.text.SystemClock_Config,"ax",%progbits
 1067              		.align	1
 1068              		.global	SystemClock_Config
 1069              		.syntax unified
 1070              		.thumb
 1071              		.thumb_func
 1072              		.fpu softvfp
 1074              	SystemClock_Config:
 1075              	.LFB71:
 328:Src/main.c    ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 1076              		.loc 1 328 1 is_stmt 1 view -0
 1077              		.cfi_startproc
 1078              		@ args = 0, pretend = 0, frame = 80
 1079              		@ frame_needed = 0, uses_anonymous_args = 0
 1080 0000 00B5     		push	{lr}
 1081              	.LCFI19:
 1082              		.cfi_def_cfa_offset 4
 1083              		.cfi_offset 14, -4
 1084 0002 95B0     		sub	sp, sp, #84
 1085              	.LCFI20:
 1086              		.cfi_def_cfa_offset 88
 329:Src/main.c    ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 1087              		.loc 1 329 3 view .LVU299
 329:Src/main.c    ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 1088              		.loc 1 329 22 is_stmt 0 view .LVU300
 1089 0004 0023     		movs	r3, #0
 1090 0006 0C93     		str	r3, [sp, #48]
 1091 0008 0D93     		str	r3, [sp, #52]
 1092 000a 0F93     		str	r3, [sp, #60]
 1093 000c 1093     		str	r3, [sp, #64]
 330:Src/main.c    ****   RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 1094              		.loc 1 330 3 is_stmt 1 view .LVU301
 330:Src/main.c    ****   RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 1095              		.loc 1 330 22 is_stmt 0 view .LVU302
 1096 000e 0593     		str	r3, [sp, #20]
 1097 0010 0693     		str	r3, [sp, #24]
 1098 0012 0793     		str	r3, [sp, #28]
 1099 0014 0893     		str	r3, [sp, #32]
 1100 0016 0993     		str	r3, [sp, #36]
 331:Src/main.c    **** 
 1101              		.loc 1 331 3 is_stmt 1 view .LVU303
 331:Src/main.c    **** 
 1102              		.loc 1 331 28 is_stmt 0 view .LVU304
 1103 0018 0193     		str	r3, [sp, #4]
 1104 001a 0293     		str	r3, [sp, #8]
 1105 001c 0393     		str	r3, [sp, #12]
 1106 001e 0493     		str	r3, [sp, #16]
 335:Src/main.c    ****   RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 1107              		.loc 1 335 3 is_stmt 1 view .LVU305
 335:Src/main.c    ****   RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 1108              		.loc 1 335 36 is_stmt 0 view .LVU306
 1109 0020 0122     		movs	r2, #1
 1110 0022 0A92     		str	r2, [sp, #40]
 336:Src/main.c    ****   RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 1111              		.loc 1 336 3 is_stmt 1 view .LVU307
ARM GAS  /tmp/ccparjHr.s 			page 35


 336:Src/main.c    ****   RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 1112              		.loc 1 336 30 is_stmt 0 view .LVU308
 1113 0024 4FF48033 		mov	r3, #65536
 1114 0028 0B93     		str	r3, [sp, #44]
 337:Src/main.c    ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 1115              		.loc 1 337 3 is_stmt 1 view .LVU309
 338:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 1116              		.loc 1 338 3 view .LVU310
 338:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 1117              		.loc 1 338 30 is_stmt 0 view .LVU311
 1118 002a 0E92     		str	r2, [sp, #56]
 339:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 1119              		.loc 1 339 3 is_stmt 1 view .LVU312
 339:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 1120              		.loc 1 339 34 is_stmt 0 view .LVU313
 1121 002c 0222     		movs	r2, #2
 1122 002e 1192     		str	r2, [sp, #68]
 340:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 1123              		.loc 1 340 3 is_stmt 1 view .LVU314
 340:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 1124              		.loc 1 340 35 is_stmt 0 view .LVU315
 1125 0030 1293     		str	r3, [sp, #72]
 341:Src/main.c    ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 1126              		.loc 1 341 3 is_stmt 1 view .LVU316
 341:Src/main.c    ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 1127              		.loc 1 341 32 is_stmt 0 view .LVU317
 1128 0032 4FF4E013 		mov	r3, #1835008
 1129 0036 1393     		str	r3, [sp, #76]
 342:Src/main.c    ****   {
 1130              		.loc 1 342 3 is_stmt 1 view .LVU318
 342:Src/main.c    ****   {
 1131              		.loc 1 342 7 is_stmt 0 view .LVU319
 1132 0038 0AA8     		add	r0, sp, #40
 1133 003a FFF7FEFF 		bl	HAL_RCC_OscConfig
 1134              	.LVL52:
 342:Src/main.c    ****   {
 1135              		.loc 1 342 6 view .LVU320
 1136 003e C8B9     		cbnz	r0, .L74
 1137              	.L70:
 348:Src/main.c    ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 1138              		.loc 1 348 3 is_stmt 1 view .LVU321
 348:Src/main.c    ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 1139              		.loc 1 348 31 is_stmt 0 view .LVU322
 1140 0040 0F23     		movs	r3, #15
 1141 0042 0593     		str	r3, [sp, #20]
 350:Src/main.c    ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 1142              		.loc 1 350 3 is_stmt 1 view .LVU323
 350:Src/main.c    ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 1143              		.loc 1 350 34 is_stmt 0 view .LVU324
 1144 0044 0221     		movs	r1, #2
 1145 0046 0691     		str	r1, [sp, #24]
 351:Src/main.c    ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 1146              		.loc 1 351 3 is_stmt 1 view .LVU325
 351:Src/main.c    ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 1147              		.loc 1 351 35 is_stmt 0 view .LVU326
 1148 0048 0023     		movs	r3, #0
 1149 004a 0793     		str	r3, [sp, #28]
ARM GAS  /tmp/ccparjHr.s 			page 36


 352:Src/main.c    ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 1150              		.loc 1 352 3 is_stmt 1 view .LVU327
 352:Src/main.c    ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 1151              		.loc 1 352 36 is_stmt 0 view .LVU328
 1152 004c 4FF48062 		mov	r2, #1024
 1153 0050 0892     		str	r2, [sp, #32]
 353:Src/main.c    **** 
 1154              		.loc 1 353 3 is_stmt 1 view .LVU329
 353:Src/main.c    **** 
 1155              		.loc 1 353 36 is_stmt 0 view .LVU330
 1156 0052 0993     		str	r3, [sp, #36]
 355:Src/main.c    ****   {
 1157              		.loc 1 355 3 is_stmt 1 view .LVU331
 355:Src/main.c    ****   {
 1158              		.loc 1 355 7 is_stmt 0 view .LVU332
 1159 0054 05A8     		add	r0, sp, #20
 1160 0056 FFF7FEFF 		bl	HAL_RCC_ClockConfig
 1161              	.LVL53:
 355:Src/main.c    ****   {
 1162              		.loc 1 355 6 view .LVU333
 1163 005a 70B9     		cbnz	r0, .L75
 1164              	.L71:
 359:Src/main.c    ****   PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 1165              		.loc 1 359 3 is_stmt 1 view .LVU334
 359:Src/main.c    ****   PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 1166              		.loc 1 359 38 is_stmt 0 view .LVU335
 1167 005c 0223     		movs	r3, #2
 1168 005e 0193     		str	r3, [sp, #4]
 360:Src/main.c    ****   if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 1169              		.loc 1 360 3 is_stmt 1 view .LVU336
 360:Src/main.c    ****   if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 1170              		.loc 1 360 35 is_stmt 0 view .LVU337
 1171 0060 4FF40043 		mov	r3, #32768
 1172 0064 0393     		str	r3, [sp, #12]
 361:Src/main.c    ****   {
 1173              		.loc 1 361 3 is_stmt 1 view .LVU338
 361:Src/main.c    ****   {
 1174              		.loc 1 361 7 is_stmt 0 view .LVU339
 1175 0066 01A8     		add	r0, sp, #4
 1176 0068 FFF7FEFF 		bl	HAL_RCCEx_PeriphCLKConfig
 1177              	.LVL54:
 361:Src/main.c    ****   {
 1178              		.loc 1 361 6 view .LVU340
 1179 006c 40B9     		cbnz	r0, .L76
 1180              	.L69:
 365:Src/main.c    **** 
 1181              		.loc 1 365 1 view .LVU341
 1182 006e 15B0     		add	sp, sp, #84
 1183              	.LCFI21:
 1184              		.cfi_remember_state
 1185              		.cfi_def_cfa_offset 4
 1186              		@ sp needed
 1187 0070 5DF804FB 		ldr	pc, [sp], #4
 1188              	.L74:
 1189              	.LCFI22:
 1190              		.cfi_restore_state
 344:Src/main.c    ****   }
ARM GAS  /tmp/ccparjHr.s 			page 37


 1191              		.loc 1 344 5 is_stmt 1 view .LVU342
 1192 0074 FFF7FEFF 		bl	Error_Handler
 1193              	.LVL55:
 1194 0078 E2E7     		b	.L70
 1195              	.L75:
 357:Src/main.c    ****   }
 1196              		.loc 1 357 5 view .LVU343
 1197 007a FFF7FEFF 		bl	Error_Handler
 1198              	.LVL56:
 1199 007e EDE7     		b	.L71
 1200              	.L76:
 363:Src/main.c    ****   }
 1201              		.loc 1 363 5 view .LVU344
 1202 0080 FFF7FEFF 		bl	Error_Handler
 1203              	.LVL57:
 365:Src/main.c    **** 
 1204              		.loc 1 365 1 is_stmt 0 view .LVU345
 1205 0084 F3E7     		b	.L69
 1206              		.cfi_endproc
 1207              	.LFE71:
 1209              		.global	__aeabi_fsub
 1210              		.global	__aeabi_f2d
 1211              		.global	__aeabi_ddiv
 1212              		.global	__aeabi_d2f
 1213              		.global	__aeabi_i2f
 1214              		.global	__aeabi_fcmplt
 1215              		.global	__aeabi_fmul
 1216              		.global	__aeabi_fdiv
 1217              		.global	__aeabi_d2uiz
 1218              		.section	.text.main,"ax",%progbits
 1219              		.align	1
 1220              		.global	main
 1221              		.syntax unified
 1222              		.thumb
 1223              		.thumb_func
 1224              		.fpu softvfp
 1226              	main:
 1227              	.LFB70:
 207:Src/main.c    ****   /* USER CODE BEGIN 1 */
 1228              		.loc 1 207 1 is_stmt 1 view -0
 1229              		.cfi_startproc
 1230              		@ args = 0, pretend = 0, frame = 0
 1231              		@ frame_needed = 0, uses_anonymous_args = 0
 1232 0000 70B5     		push	{r4, r5, r6, lr}
 1233              	.LCFI23:
 1234              		.cfi_def_cfa_offset 16
 1235              		.cfi_offset 4, -16
 1236              		.cfi_offset 5, -12
 1237              		.cfi_offset 6, -8
 1238              		.cfi_offset 14, -4
 1239 0002 82B0     		sub	sp, sp, #8
 1240              	.LCFI24:
 1241              		.cfi_def_cfa_offset 24
 209:Src/main.c    ****   static const char channel_name[] = "LightSensor";
 1242              		.loc 1 209 3 view .LVU347
 210:Src/main.c    ****   static volatile uint16_t lightVal = 0;
 1243              		.loc 1 210 3 view .LVU348
ARM GAS  /tmp/ccparjHr.s 			page 38


 211:Src/main.c    ****   static volatile uint8_t zoomAndEnhance = 0;
 1244              		.loc 1 211 3 view .LVU349
 212:Src/main.c    ****   static const uint8_t gain[8] = {1,2,4,5,8,10,16,32};
 1245              		.loc 1 212 3 view .LVU350
 213:Src/main.c    ****   static volatile gain_t gain_idx = GAIN_OF_1;
 1246              		.loc 1 213 3 view .LVU351
 214:Src/main.c    ****   static volatile float Vin_min = 0;
 1247              		.loc 1 214 3 view .LVU352
 215:Src/main.c    ****   static volatile float Vin_max = 3.300;
 1248              		.loc 1 215 3 view .LVU353
 216:Src/main.c    ****   static volatile uint16_t Vref = 0;
 1249              		.loc 1 216 3 view .LVU354
 217:Src/main.c    ****   static uint8_t I2C_msg[MAX_LOG_MSG_SIZE] = {0};
 1250              		.loc 1 217 3 view .LVU355
 218:Src/main.c    ****   /* USER CODE END 1 */
 1251              		.loc 1 218 3 view .LVU356
 225:Src/main.c    **** 
 1252              		.loc 1 225 3 view .LVU357
 1253 0004 FFF7FEFF 		bl	HAL_Init
 1254              	.LVL58:
 232:Src/main.c    **** 
 1255              		.loc 1 232 3 view .LVU358
 1256 0008 FFF7FEFF 		bl	SystemClock_Config
 1257              	.LVL59:
 239:Src/main.c    ****   MX_ADC1_Init();
 1258              		.loc 1 239 3 view .LVU359
 1259 000c FFF7FEFF 		bl	MX_GPIO_Init
 1260              	.LVL60:
 240:Src/main.c    ****   MX_SPI1_Init();
 1261              		.loc 1 240 3 view .LVU360
 1262 0010 FFF7FEFF 		bl	MX_ADC1_Init
 1263              	.LVL61:
 241:Src/main.c    ****   MX_USART1_UART_Init();
 1264              		.loc 1 241 3 view .LVU361
 1265 0014 FFF7FEFF 		bl	MX_SPI1_Init
 1266              	.LVL62:
 242:Src/main.c    ****   MX_USART2_UART_Init();
 1267              		.loc 1 242 3 view .LVU362
 1268 0018 FFF7FEFF 		bl	MX_USART1_UART_Init
 1269              	.LVL63:
 243:Src/main.c    ****   MX_I2C1_Init();
 1270              		.loc 1 243 3 view .LVU363
 1271 001c FFF7FEFF 		bl	MX_USART2_UART_Init
 1272              	.LVL64:
 244:Src/main.c    ****   /* USER CODE BEGIN 2 */
 1273              		.loc 1 244 3 view .LVU364
 1274 0020 FFF7FEFF 		bl	MX_I2C1_Init
 1275              	.LVL65:
 246:Src/main.c    ****   {
 1276              		.loc 1 246 3 view .LVU365
 246:Src/main.c    ****   {
 1277              		.loc 1 246 7 is_stmt 0 view .LVU366
 1278 0024 4848     		ldr	r0, .L86+8
 1279 0026 FFF7FEFF 		bl	HAL_ADCEx_Calibration_Start
 1280              	.LVL66:
 246:Src/main.c    ****   {
 1281              		.loc 1 246 6 view .LVU367
ARM GAS  /tmp/ccparjHr.s 			page 39


 1282 002a 0028     		cmp	r0, #0
 1283 002c 58D0     		beq	.L84
 248:Src/main.c    ****   }
 1284              		.loc 1 248 7 is_stmt 1 view .LVU368
 1285 002e FFF7FEFF 		bl	Error_Handler
 1286              	.LVL67:
 1287 0032 55E0     		b	.L84
 1288              	.LVL68:
 1289              	.L81:
 1290              	.LBB6:
 300:Src/main.c    **** 
 1291              		.loc 1 300 6 view .LVU369
 1292 0034 454C     		ldr	r4, .L86+12
 1293              	.LVL69:
 300:Src/main.c    **** 
 1294              		.loc 1 300 6 is_stmt 0 view .LVU370
 1295 0036 2078     		ldrb	r0, [r4]	@ zero_extendqisi2
 1296 0038 FFF7FEFF 		bl	setGain
 1297              	.LVL70:
 303:Src/main.c    ****     	uint16_t Vref = round( Vref_float * 4095 / 3.3f );
 1298              		.loc 1 303 6 is_stmt 1 view .LVU371
 303:Src/main.c    ****     	uint16_t Vref = round( Vref_float * 4095 / 3.3f );
 1299              		.loc 1 303 31 is_stmt 0 view .LVU372
 1300 003c 2378     		ldrb	r3, [r4]	@ zero_extendqisi2
 1301 003e DBB2     		uxtb	r3, r3
 1302 0040 434D     		ldr	r5, .L86+16
 303:Src/main.c    ****     	uint16_t Vref = round( Vref_float * 4095 / 3.3f );
 1303              		.loc 1 303 42 view .LVU373
 1304 0042 444A     		ldr	r2, .L86+20
 1305 0044 1668     		ldr	r6, [r2]	@ float
 1306 0046 E85C     		ldrb	r0, [r5, r3]	@ zero_extendqisi2
 1307 0048 FFF7FEFF 		bl	__aeabi_i2f
 1308              	.LVL71:
 1309 004c 3146     		mov	r1, r6
 1310 004e FFF7FEFF 		bl	__aeabi_fmul
 1311              	.LVL72:
 1312 0052 0646     		mov	r6, r0
 303:Src/main.c    ****     	uint16_t Vref = round( Vref_float * 4095 / 3.3f );
 1313              		.loc 1 303 62 view .LVU374
 1314 0054 2378     		ldrb	r3, [r4]	@ zero_extendqisi2
 1315 0056 DBB2     		uxtb	r3, r3
 1316 0058 E85C     		ldrb	r0, [r5, r3]	@ zero_extendqisi2
 303:Src/main.c    ****     	uint16_t Vref = round( Vref_float * 4095 / 3.3f );
 1317              		.loc 1 303 54 view .LVU375
 1318 005a 0138     		subs	r0, r0, #1
 1319 005c FFF7FEFF 		bl	__aeabi_i2f
 1320              	.LVL73:
 303:Src/main.c    ****     	uint16_t Vref = round( Vref_float * 4095 / 3.3f );
 1321              		.loc 1 303 12 view .LVU376
 1322 0060 0146     		mov	r1, r0
 1323 0062 3046     		mov	r0, r6
 1324 0064 FFF7FEFF 		bl	__aeabi_fdiv
 1325              	.LVL74:
 304:Src/main.c    ****     	//update Vref
 1326              		.loc 1 304 6 is_stmt 1 view .LVU377
 304:Src/main.c    ****     	//update Vref
 1327              		.loc 1 304 40 is_stmt 0 view .LVU378
ARM GAS  /tmp/ccparjHr.s 			page 40


 1328 0068 3B49     		ldr	r1, .L86+24
 1329 006a FFF7FEFF 		bl	__aeabi_fmul
 1330              	.LVL75:
 304:Src/main.c    ****     	//update Vref
 1331              		.loc 1 304 47 view .LVU379
 1332 006e 3B49     		ldr	r1, .L86+28
 1333 0070 FFF7FEFF 		bl	__aeabi_fdiv
 1334              	.LVL76:
 304:Src/main.c    ****     	//update Vref
 1335              		.loc 1 304 22 view .LVU380
 1336 0074 FFF7FEFF 		bl	__aeabi_f2d
 1337              	.LVL77:
 1338 0078 FFF7FEFF 		bl	round
 1339              	.LVL78:
 304:Src/main.c    ****     	//update Vref
 1340              		.loc 1 304 15 view .LVU381
 1341 007c FFF7FEFF 		bl	__aeabi_d2uiz
 1342              	.LVL79:
 306:Src/main.c    ****     }
 1343              		.loc 1 306 6 is_stmt 1 view .LVU382
 1344 0080 80B2     		uxth	r0, r0
 306:Src/main.c    ****     }
 1345              		.loc 1 306 6 is_stmt 0 view .LVU383
 1346 0082 FFF7FEFF 		bl	setVref
 1347              	.LVL80:
 1348              	.L79:
 306:Src/main.c    ****     }
 1349              		.loc 1 306 6 view .LVU384
 1350              	.LBE6:
 309:Src/main.c    ****     while( HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY) != HAL_OK );
 1351              		.loc 1 309 5 is_stmt 1 view .LVU385
 1352 0086 3048     		ldr	r0, .L86+8
 1353 0088 FFF7FEFF 		bl	HAL_ADC_Start
 1354              	.LVL81:
 310:Src/main.c    ****     lightVal = HAL_ADC_GetValue(&hadc1);
 1355              		.loc 1 310 5 view .LVU386
 1356              	.L83:
 310:Src/main.c    ****     lightVal = HAL_ADC_GetValue(&hadc1);
 1357              		.loc 1 310 72 discriminator 1 view .LVU387
 310:Src/main.c    ****     lightVal = HAL_ADC_GetValue(&hadc1);
 1358              		.loc 1 310 12 is_stmt 0 discriminator 1 view .LVU388
 1359 008c 4FF0FF31 		mov	r1, #-1
 1360 0090 2D48     		ldr	r0, .L86+8
 1361 0092 FFF7FEFF 		bl	HAL_ADC_PollForConversion
 1362              	.LVL82:
 310:Src/main.c    ****     lightVal = HAL_ADC_GetValue(&hadc1);
 1363              		.loc 1 310 10 discriminator 1 view .LVU389
 1364 0096 0028     		cmp	r0, #0
 1365 0098 F8D1     		bne	.L83
 311:Src/main.c    ****     
 1366              		.loc 1 311 5 is_stmt 1 view .LVU390
 311:Src/main.c    ****     
 1367              		.loc 1 311 16 is_stmt 0 view .LVU391
 1368 009a 2B48     		ldr	r0, .L86+8
 1369 009c FFF7FEFF 		bl	HAL_ADC_GetValue
 1370              	.LVL83:
 311:Src/main.c    ****     
ARM GAS  /tmp/ccparjHr.s 			page 41


 1371              		.loc 1 311 14 view .LVU392
 1372 00a0 80B2     		uxth	r0, r0
 1373 00a2 2F4C     		ldr	r4, .L86+32
 1374 00a4 2080     		strh	r0, [r4]	@ movhi
 313:Src/main.c    ****     HAL_UART_Transmit(&huart1, (uint8_t*)&ADC_msg[0], strlen(ADC_msg), HAL_MAX_DELAY);
 1375              		.loc 1 313 5 is_stmt 1 view .LVU393
 313:Src/main.c    ****     HAL_UART_Transmit(&huart1, (uint8_t*)&ADC_msg[0], strlen(ADC_msg), HAL_MAX_DELAY);
 1376              		.loc 1 313 108 is_stmt 0 view .LVU394
 1377 00a6 FFF7FEFF 		bl	HAL_GetTick
 1378              	.LVL84:
 313:Src/main.c    ****     HAL_UART_Transmit(&huart1, (uint8_t*)&ADC_msg[0], strlen(ADC_msg), HAL_MAX_DELAY);
 1379              		.loc 1 313 5 view .LVU395
 1380 00aa 2388     		ldrh	r3, [r4]
 1381 00ac 2D4C     		ldr	r4, .L86+36
 1382 00ae 0093     		str	r3, [sp]
 1383 00b0 0346     		mov	r3, r0
 1384 00b2 2D4A     		ldr	r2, .L86+40
 1385 00b4 2D49     		ldr	r1, .L86+44
 1386 00b6 2046     		mov	r0, r4
 1387 00b8 FFF7FEFF 		bl	sprintf
 1388              	.LVL85:
 314:Src/main.c    **** 
 1389              		.loc 1 314 5 is_stmt 1 view .LVU396
 314:Src/main.c    **** 
 1390              		.loc 1 314 55 is_stmt 0 view .LVU397
 1391 00bc 2046     		mov	r0, r4
 1392 00be FFF7FEFF 		bl	strlen
 1393              	.LVL86:
 314:Src/main.c    **** 
 1394              		.loc 1 314 5 view .LVU398
 1395 00c2 4FF0FF33 		mov	r3, #-1
 1396 00c6 82B2     		uxth	r2, r0
 1397 00c8 2146     		mov	r1, r4
 1398 00ca 2948     		ldr	r0, .L86+48
 1399 00cc FFF7FEFF 		bl	HAL_UART_Transmit
 1400              	.LVL87:
 316:Src/main.c    **** 
 1401              		.loc 1 316 5 is_stmt 1 view .LVU399
 1402 00d0 8022     		movs	r2, #128
 1403 00d2 0021     		movs	r1, #0
 1404 00d4 2046     		mov	r0, r4
 1405 00d6 FFF7FEFF 		bl	memset
 1406              	.LVL88:
 318:Src/main.c    ****   }
 1407              		.loc 1 318 5 view .LVU400
 1408 00da 0520     		movs	r0, #5
 1409 00dc FFF7FEFF 		bl	HAL_Delay
 1410              	.LVL89:
 1411              	.L84:
 284:Src/main.c    ****   {
 1412              		.loc 1 284 3 view .LVU401
 291:Src/main.c    ****     {
 1413              		.loc 1 291 5 view .LVU402
 291:Src/main.c    ****     {
 1414              		.loc 1 291 9 is_stmt 0 view .LVU403
 1415 00e0 244B     		ldr	r3, .L86+52
 1416 00e2 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
ARM GAS  /tmp/ccparjHr.s 			page 42


 291:Src/main.c    ****     {
 1417              		.loc 1 291 8 view .LVU404
 1418 00e4 002B     		cmp	r3, #0
 1419 00e6 CED0     		beq	.L79
 1420              	.LBB7:
 294:Src/main.c    ****     	for ( gain_idx = GAIN_OF_32; gain_idx > 0; gain_idx--)
 1421              		.loc 1 294 6 is_stmt 1 view .LVU405
 294:Src/main.c    ****     	for ( gain_idx = GAIN_OF_32; gain_idx > 0; gain_idx--)
 1422              		.loc 1 294 41 is_stmt 0 view .LVU406
 1423 00e8 234B     		ldr	r3, .L86+56
 1424 00ea 1868     		ldr	r0, [r3]	@ float
 1425 00ec 194B     		ldr	r3, .L86+20
 1426 00ee 1968     		ldr	r1, [r3]	@ float
 1427 00f0 FFF7FEFF 		bl	__aeabi_fsub
 1428              	.LVL90:
 1429 00f4 FFF7FEFF 		bl	__aeabi_f2d
 1430              	.LVL91:
 294:Src/main.c    ****     	for ( gain_idx = GAIN_OF_32; gain_idx > 0; gain_idx--)
 1431              		.loc 1 294 29 view .LVU407
 1432 00f8 0246     		mov	r2, r0
 1433 00fa 0B46     		mov	r3, r1
 1434 00fc 10A1     		adr	r1, .L86
 1435 00fe D1E90001 		ldrd	r0, [r1]
 1436 0102 FFF7FEFF 		bl	__aeabi_ddiv
 1437              	.LVL92:
 294:Src/main.c    ****     	for ( gain_idx = GAIN_OF_32; gain_idx > 0; gain_idx--)
 1438              		.loc 1 294 12 view .LVU408
 1439 0106 FFF7FEFF 		bl	__aeabi_d2f
 1440              	.LVL93:
 1441 010a 0446     		mov	r4, r0
 1442              	.LVL94:
 295:Src/main.c    ****     	{
 1443              		.loc 1 295 6 is_stmt 1 view .LVU409
 295:Src/main.c    ****     	{
 1444              		.loc 1 295 21 is_stmt 0 view .LVU410
 1445 010c 0F4B     		ldr	r3, .L86+12
 1446 010e 0722     		movs	r2, #7
 1447 0110 1A70     		strb	r2, [r3]
 1448              	.LVL95:
 1449              	.L80:
 295:Src/main.c    ****     	{
 1450              		.loc 1 295 44 discriminator 1 view .LVU411
 1451 0112 0E4B     		ldr	r3, .L86+12
 1452 0114 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 295:Src/main.c    ****     	{
 1453              		.loc 1 295 6 discriminator 1 view .LVU412
 1454 0116 002B     		cmp	r3, #0
 1455 0118 8CD0     		beq	.L81
 297:Src/main.c    ****     	}
 1456              		.loc 1 297 7 is_stmt 1 view .LVU413
 297:Src/main.c    ****     	}
 1457              		.loc 1 297 16 is_stmt 0 view .LVU414
 1458 011a 0C4B     		ldr	r3, .L86+12
 1459 011c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1460 011e DBB2     		uxtb	r3, r3
 297:Src/main.c    ****     	}
 1461              		.loc 1 297 27 view .LVU415
ARM GAS  /tmp/ccparjHr.s 			page 43


 1462 0120 0B4A     		ldr	r2, .L86+16
 1463 0122 D05C     		ldrb	r0, [r2, r3]	@ zero_extendqisi2
 1464 0124 FFF7FEFF 		bl	__aeabi_i2f
 1465              	.LVL96:
 297:Src/main.c    ****     	}
 1466              		.loc 1 297 10 view .LVU416
 1467 0128 2146     		mov	r1, r4
 1468 012a FFF7FEFF 		bl	__aeabi_fcmplt
 1469              	.LVL97:
 1470 012e 0028     		cmp	r0, #0
 1471 0130 80D1     		bne	.L81
 295:Src/main.c    ****     	{
 1472              		.loc 1 295 57 discriminator 2 view .LVU417
 1473 0132 064A     		ldr	r2, .L86+12
 1474 0134 1378     		ldrb	r3, [r2]	@ zero_extendqisi2
 1475 0136 013B     		subs	r3, r3, #1
 1476 0138 DBB2     		uxtb	r3, r3
 1477 013a 1370     		strb	r3, [r2]
 1478 013c E9E7     		b	.L80
 1479              	.L87:
 1480 013e 00BF     		.align	3
 1481              	.L86:
 1482 0140 66666666 		.word	1717986918
 1483 0144 66660A40 		.word	1074423398
 1484 0148 00000000 		.word	hadc1
 1485 014c 00000000 		.word	.LANCHOR5
 1486 0150 00000000 		.word	.LANCHOR6
 1487 0154 00000000 		.word	.LANCHOR4
 1488 0158 00F07F45 		.word	1166012416
 1489 015c 33335340 		.word	1079194419
 1490 0160 00000000 		.word	.LANCHOR7
 1491 0164 00000000 		.word	.LANCHOR9
 1492 0168 00000000 		.word	.LANCHOR8
 1493 016c 00000000 		.word	.LC0
 1494 0170 00000000 		.word	huart1
 1495 0174 00000000 		.word	.LANCHOR2
 1496 0178 00000000 		.word	.LANCHOR3
 1497              	.LBE7:
 1498              		.cfi_endproc
 1499              	.LFE70:
 1501              		.comm	huart2,64,4
 1502              		.comm	huart1,64,4
 1503              		.comm	hspi1,88,4
 1504              		.comm	hi2c1,84,4
 1505              		.comm	hadc1,48,4
 1506              		.section	.bss.ADC_msg.7881,"aw",%nobits
 1507              		.align	2
 1508              		.set	.LANCHOR9,. + 0
 1511              	ADC_msg.7881:
 1512 0000 00000000 		.space	128
 1512      00000000 
 1512      00000000 
 1512      00000000 
 1512      00000000 
 1513              		.section	.bss.SPI_msg,"aw",%nobits
 1514              		.align	2
 1515              		.set	.LANCHOR1,. + 0
ARM GAS  /tmp/ccparjHr.s 			page 44


 1518              	SPI_msg:
 1519 0000 00000000 		.space	128
 1519      00000000 
 1519      00000000 
 1519      00000000 
 1519      00000000 
 1520              		.section	.bss.Vin_min.7887,"aw",%nobits
 1521              		.align	2
 1522              		.set	.LANCHOR4,. + 0
 1525              	Vin_min.7887:
 1526 0000 00000000 		.space	4
 1527              		.section	.bss.Vref.7889,"aw",%nobits
 1528              		.align	1
 1531              	Vref.7889:
 1532 0000 0000     		.space	2
 1533              		.section	.bss.gain_idx.7886,"aw",%nobits
 1534              		.set	.LANCHOR5,. + 0
 1537              	gain_idx.7886:
 1538 0000 00       		.space	1
 1539              		.section	.bss.lightVal.7883,"aw",%nobits
 1540              		.align	1
 1541              		.set	.LANCHOR7,. + 0
 1544              	lightVal.7883:
 1545 0000 0000     		.space	2
 1546              		.section	.bss.resetTried.7867,"aw",%nobits
 1547              		.set	.LANCHOR0,. + 0
 1550              	resetTried.7867:
 1551 0000 00       		.space	1
 1552              		.section	.bss.zoomAndEnhance.7884,"aw",%nobits
 1553              		.set	.LANCHOR2,. + 0
 1556              	zoomAndEnhance.7884:
 1557 0000 00       		.space	1
 1558              		.section	.data.Vin_max.7888,"aw"
 1559              		.align	2
 1560              		.set	.LANCHOR3,. + 0
 1563              	Vin_max.7888:
 1564 0000 33335340 		.word	1079194419
 1565              		.section	.rodata.channel_name.7882,"a"
 1566              		.align	2
 1567              		.set	.LANCHOR8,. + 0
 1570              	channel_name.7882:
 1571 0000 4C696768 		.ascii	"LightSensor\000"
 1571      7453656E 
 1571      736F7200 
 1572              		.section	.rodata.gain.7885,"a"
 1573              		.align	2
 1574              		.set	.LANCHOR6,. + 0
 1577              	gain.7885:
 1578 0000 01       		.byte	1
 1579 0001 02       		.byte	2
 1580 0002 04       		.byte	4
 1581 0003 05       		.byte	5
 1582 0004 08       		.byte	8
 1583 0005 0A       		.byte	10
 1584 0006 10       		.byte	16
 1585 0007 20       		.byte	32
 1586              		.section	.rodata.main.str1.4,"aMS",%progbits,1
ARM GAS  /tmp/ccparjHr.s 			page 45


 1587              		.align	2
 1588              	.LC0:
 1589 0000 7B202263 		.ascii	"{ \"channel\" : \"%s\", \"time\" : %d, \"value\" : "
 1589      68616E6E 
 1589      656C2220 
 1589      3A202225 
 1589      73222C20 
 1590 002b 2564207D 		.ascii	"%d }\012\015\000"
 1590      0A0D00
 1591              		.text
 1592              	.Letext0:
 1593              		.file 2 "/home/nathancharlesjones/miniconda3/envs/conda-env/arm-none-eabi/include/machine/_default
 1594              		.file 3 "/home/nathancharlesjones/miniconda3/envs/conda-env/arm-none-eabi/include/sys/_stdint.h"
 1595              		.file 4 "Drivers/CMSIS/Include/core_cm3.h"
 1596              		.file 5 "Drivers/CMSIS/Device/ST/STM32F1xx/Include/system_stm32f1xx.h"
 1597              		.file 6 "Drivers/CMSIS/Device/ST/STM32F1xx/Include/stm32f103xb.h"
 1598              		.file 7 "Drivers/CMSIS/Device/ST/STM32F1xx/Include/stm32f1xx.h"
 1599              		.file 8 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_def.h"
 1600              		.file 9 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_rcc.h"
 1601              		.file 10 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_rcc_ex.h"
 1602              		.file 11 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_gpio.h"
 1603              		.file 12 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_dma.h"
 1604              		.file 13 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_adc.h"
 1605              		.file 14 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_i2c.h"
 1606              		.file 15 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_spi.h"
 1607              		.file 16 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_uart.h"
 1608              		.file 17 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal.h"
 1609              		.file 18 "Inc/main.h"
 1610              		.file 19 "/home/nathancharlesjones/miniconda3/envs/conda-env/lib/gcc/arm-none-eabi/8.3.1/include/s
 1611              		.file 20 "/home/nathancharlesjones/miniconda3/envs/conda-env/arm-none-eabi/include/sys/_types.h"
 1612              		.file 21 "/home/nathancharlesjones/miniconda3/envs/conda-env/arm-none-eabi/include/sys/reent.h"
 1613              		.file 22 "/home/nathancharlesjones/miniconda3/envs/conda-env/arm-none-eabi/include/sys/lock.h"
 1614              		.file 23 "/home/nathancharlesjones/miniconda3/envs/conda-env/arm-none-eabi/include/math.h"
 1615              		.file 24 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_adc_ex.h"
 1616              		.file 25 "/home/nathancharlesjones/miniconda3/envs/conda-env/arm-none-eabi/include/stdio.h"
 1617              		.file 26 "/home/nathancharlesjones/miniconda3/envs/conda-env/arm-none-eabi/include/string.h"
 1618              		.file 27 "<built-in>"
ARM GAS  /tmp/ccparjHr.s 			page 46


DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
     /tmp/ccparjHr.s:16     .text.MX_GPIO_Init:0000000000000000 $t
     /tmp/ccparjHr.s:23     .text.MX_GPIO_Init:0000000000000000 MX_GPIO_Init
     /tmp/ccparjHr.s:139    .text.MX_GPIO_Init:0000000000000080 $d
     /tmp/ccparjHr.s:145    .text.HAL_GPIO_WRITE_ODR:0000000000000000 $t
     /tmp/ccparjHr.s:152    .text.HAL_GPIO_WRITE_ODR:0000000000000000 HAL_GPIO_WRITE_ODR
     /tmp/ccparjHr.s:174    .text.HAL_I2C_ClearBusyFlagErrata_2_14_7:0000000000000000 $t
     /tmp/ccparjHr.s:181    .text.HAL_I2C_ClearBusyFlagErrata_2_14_7:0000000000000000 HAL_I2C_ClearBusyFlagErrata_2_14_7
     /tmp/ccparjHr.s:448    .text.HAL_I2C_ClearBusyFlagErrata_2_14_7:0000000000000124 $d
     /tmp/ccparjHr.s:454    .text.setGain:0000000000000000 $t
     /tmp/ccparjHr.s:461    .text.setGain:0000000000000000 setGain
     /tmp/ccparjHr.s:524    .text.setGain:0000000000000048 $d
                            *COM*:0000000000000058 hspi1
     /tmp/ccparjHr.s:531    .text.setVref:0000000000000000 $t
     /tmp/ccparjHr.s:538    .text.setVref:0000000000000000 setVref
     /tmp/ccparjHr.s:626    .text.setVref:0000000000000070 $d
     /tmp/ccparjHr.s:633    .text.Error_Handler:0000000000000000 $t
     /tmp/ccparjHr.s:640    .text.Error_Handler:0000000000000000 Error_Handler
     /tmp/ccparjHr.s:660    .text.MX_ADC1_Init:0000000000000000 $t
     /tmp/ccparjHr.s:666    .text.MX_ADC1_Init:0000000000000000 MX_ADC1_Init
     /tmp/ccparjHr.s:760    .text.MX_ADC1_Init:0000000000000050 $d
                            *COM*:0000000000000030 hadc1
     /tmp/ccparjHr.s:766    .text.MX_SPI1_Init:0000000000000000 $t
     /tmp/ccparjHr.s:772    .text.MX_SPI1_Init:0000000000000000 MX_SPI1_Init
     /tmp/ccparjHr.s:847    .text.MX_SPI1_Init:0000000000000044 $d
     /tmp/ccparjHr.s:853    .text.MX_USART1_UART_Init:0000000000000000 $t
     /tmp/ccparjHr.s:859    .text.MX_USART1_UART_Init:0000000000000000 MX_USART1_UART_Init
     /tmp/ccparjHr.s:917    .text.MX_USART1_UART_Init:000000000000002c $d
                            *COM*:0000000000000040 huart1
     /tmp/ccparjHr.s:923    .text.MX_USART2_UART_Init:0000000000000000 $t
     /tmp/ccparjHr.s:929    .text.MX_USART2_UART_Init:0000000000000000 MX_USART2_UART_Init
     /tmp/ccparjHr.s:987    .text.MX_USART2_UART_Init:000000000000002c $d
                            *COM*:0000000000000040 huart2
     /tmp/ccparjHr.s:993    .text.MX_I2C1_Init:0000000000000000 $t
     /tmp/ccparjHr.s:999    .text.MX_I2C1_Init:0000000000000000 MX_I2C1_Init
     /tmp/ccparjHr.s:1060   .text.MX_I2C1_Init:0000000000000030 $d
                            *COM*:0000000000000054 hi2c1
     /tmp/ccparjHr.s:1067   .text.SystemClock_Config:0000000000000000 $t
     /tmp/ccparjHr.s:1074   .text.SystemClock_Config:0000000000000000 SystemClock_Config
     /tmp/ccparjHr.s:1219   .text.main:0000000000000000 $t
     /tmp/ccparjHr.s:1226   .text.main:0000000000000000 main
     /tmp/ccparjHr.s:1482   .text.main:0000000000000140 $d
     /tmp/ccparjHr.s:1507   .bss.ADC_msg.7881:0000000000000000 $d
     /tmp/ccparjHr.s:1511   .bss.ADC_msg.7881:0000000000000000 ADC_msg.7881
     /tmp/ccparjHr.s:1514   .bss.SPI_msg:0000000000000000 $d
     /tmp/ccparjHr.s:1518   .bss.SPI_msg:0000000000000000 SPI_msg
     /tmp/ccparjHr.s:1521   .bss.Vin_min.7887:0000000000000000 $d
     /tmp/ccparjHr.s:1525   .bss.Vin_min.7887:0000000000000000 Vin_min.7887
     /tmp/ccparjHr.s:1528   .bss.Vref.7889:0000000000000000 $d
     /tmp/ccparjHr.s:1531   .bss.Vref.7889:0000000000000000 Vref.7889
     /tmp/ccparjHr.s:1537   .bss.gain_idx.7886:0000000000000000 gain_idx.7886
     /tmp/ccparjHr.s:1538   .bss.gain_idx.7886:0000000000000000 $d
     /tmp/ccparjHr.s:1540   .bss.lightVal.7883:0000000000000000 $d
     /tmp/ccparjHr.s:1544   .bss.lightVal.7883:0000000000000000 lightVal.7883
     /tmp/ccparjHr.s:1550   .bss.resetTried.7867:0000000000000000 resetTried.7867
     /tmp/ccparjHr.s:1551   .bss.resetTried.7867:0000000000000000 $d
ARM GAS  /tmp/ccparjHr.s 			page 47


     /tmp/ccparjHr.s:1556   .bss.zoomAndEnhance.7884:0000000000000000 zoomAndEnhance.7884
     /tmp/ccparjHr.s:1557   .bss.zoomAndEnhance.7884:0000000000000000 $d
     /tmp/ccparjHr.s:1559   .data.Vin_max.7888:0000000000000000 $d
     /tmp/ccparjHr.s:1563   .data.Vin_max.7888:0000000000000000 Vin_max.7888
     /tmp/ccparjHr.s:1566   .rodata.channel_name.7882:0000000000000000 $d
     /tmp/ccparjHr.s:1570   .rodata.channel_name.7882:0000000000000000 channel_name.7882
     /tmp/ccparjHr.s:1573   .rodata.gain.7885:0000000000000000 $d
     /tmp/ccparjHr.s:1577   .rodata.gain.7885:0000000000000000 gain.7885
     /tmp/ccparjHr.s:1587   .rodata.main.str1.4:0000000000000000 $d

UNDEFINED SYMBOLS
HAL_GPIO_WritePin
HAL_GPIO_Init
HAL_GPIO_ReadPin
HAL_GPIO_TogglePin
memset
HAL_SPI_Transmit
HAL_ADC_Init
HAL_ADC_ConfigChannel
HAL_SPI_Init
HAL_UART_Init
HAL_I2C_Init
HAL_RCC_OscConfig
HAL_RCC_ClockConfig
HAL_RCCEx_PeriphCLKConfig
__aeabi_fsub
__aeabi_f2d
__aeabi_ddiv
__aeabi_d2f
__aeabi_i2f
__aeabi_fcmplt
__aeabi_fmul
__aeabi_fdiv
__aeabi_d2uiz
HAL_Init
HAL_ADCEx_Calibration_Start
round
HAL_ADC_Start
HAL_ADC_PollForConversion
HAL_ADC_GetValue
HAL_GetTick
sprintf
strlen
HAL_UART_Transmit
HAL_Delay
