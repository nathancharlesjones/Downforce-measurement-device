ARM GAS  /tmp/ccRZPzLG.s 			page 1


   1              		.cpu cortex-m3
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 1
   9              		.eabi_attribute 34, 1
  10              		.eabi_attribute 18, 4
  11              		.file	"main.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.text.MX_GPIO_Init,"ax",%progbits
  16              		.align	1
  17              		.syntax unified
  18              		.thumb
  19              		.thumb_func
  20              		.fpu softvfp
  22              	MX_GPIO_Init:
  23              	.LFB69:
  24              		.file 1 "Src/main.c"
   1:Src/main.c    **** /* USER CODE BEGIN Header */
   2:Src/main.c    **** /**
   3:Src/main.c    ****   ******************************************************************************
   4:Src/main.c    ****   * @file           : main.c
   5:Src/main.c    ****   * @brief          : Main program body
   6:Src/main.c    ****   ******************************************************************************
   7:Src/main.c    ****   * @attention
   8:Src/main.c    ****   *
   9:Src/main.c    ****   * <h2><center>&copy; Copyright (c) 2020 STMicroelectronics.
  10:Src/main.c    ****   * All rights reserved.</center></h2>
  11:Src/main.c    ****   *
  12:Src/main.c    ****   * This software component is licensed by ST under BSD 3-Clause license,
  13:Src/main.c    ****   * the "License"; You may not use this file except in compliance with the
  14:Src/main.c    ****   * License. You may obtain a copy of the License at:
  15:Src/main.c    ****   *                        opensource.org/licenses/BSD-3-Clause
  16:Src/main.c    ****   *
  17:Src/main.c    ****   ******************************************************************************
  18:Src/main.c    ****   */
  19:Src/main.c    **** /* USER CODE END Header */
  20:Src/main.c    **** 
  21:Src/main.c    **** /* Includes ------------------------------------------------------------------*/
  22:Src/main.c    **** #include "main.h"
  23:Src/main.c    **** 
  24:Src/main.c    **** /* Private includes ----------------------------------------------------------*/
  25:Src/main.c    **** /* USER CODE BEGIN Includes */
  26:Src/main.c    **** #include <stdio.h>
  27:Src/main.c    **** /* USER CODE END Includes */
  28:Src/main.c    **** 
  29:Src/main.c    **** /* Private typedef -----------------------------------------------------------*/
  30:Src/main.c    **** /* USER CODE BEGIN PTD */
  31:Src/main.c    **** 
  32:Src/main.c    **** /* USER CODE END PTD */
  33:Src/main.c    **** 
  34:Src/main.c    **** /* Private define ------------------------------------------------------------*/
ARM GAS  /tmp/ccRZPzLG.s 			page 2


  35:Src/main.c    **** /* USER CODE BEGIN PD */
  36:Src/main.c    **** /* USER CODE END PD */
  37:Src/main.c    **** 
  38:Src/main.c    **** /* Private macro -------------------------------------------------------------*/
  39:Src/main.c    **** /* USER CODE BEGIN PM */
  40:Src/main.c    **** 
  41:Src/main.c    **** /* USER CODE END PM */
  42:Src/main.c    **** 
  43:Src/main.c    **** /* Private variables ---------------------------------------------------------*/
  44:Src/main.c    **** CAN_HandleTypeDef hcan;
  45:Src/main.c    **** 
  46:Src/main.c    **** /* USER CODE BEGIN PV */
  47:Src/main.c    **** 
  48:Src/main.c    **** /* USER CODE END PV */
  49:Src/main.c    **** 
  50:Src/main.c    **** /* Private function prototypes -----------------------------------------------*/
  51:Src/main.c    **** void SystemClock_Config(void);
  52:Src/main.c    **** static void MX_GPIO_Init(void);
  53:Src/main.c    **** static void MX_CAN_Init(void);
  54:Src/main.c    **** /* USER CODE BEGIN PFP */
  55:Src/main.c    **** 
  56:Src/main.c    **** /* USER CODE END PFP */
  57:Src/main.c    **** 
  58:Src/main.c    **** /* Private user code ---------------------------------------------------------*/
  59:Src/main.c    **** /* USER CODE BEGIN 0 */
  60:Src/main.c    **** 
  61:Src/main.c    **** /* USER CODE END 0 */
  62:Src/main.c    **** 
  63:Src/main.c    **** /**
  64:Src/main.c    ****   * @brief  The application entry point.
  65:Src/main.c    ****   * @retval int
  66:Src/main.c    ****   */
  67:Src/main.c    **** int main(void)
  68:Src/main.c    **** {
  69:Src/main.c    ****   /* USER CODE BEGIN 1 */
  70:Src/main.c    **** 
  71:Src/main.c    ****   /* USER CODE END 1 */
  72:Src/main.c    ****   
  73:Src/main.c    **** 
  74:Src/main.c    ****   /* MCU Configuration--------------------------------------------------------*/
  75:Src/main.c    **** 
  76:Src/main.c    ****   /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  77:Src/main.c    ****   HAL_Init();
  78:Src/main.c    **** 
  79:Src/main.c    ****   /* USER CODE BEGIN Init */
  80:Src/main.c    **** 
  81:Src/main.c    ****   /* USER CODE END Init */
  82:Src/main.c    **** 
  83:Src/main.c    ****   /* Configure the system clock */
  84:Src/main.c    ****   SystemClock_Config();
  85:Src/main.c    **** 
  86:Src/main.c    ****   /* USER CODE BEGIN SysInit */
  87:Src/main.c    **** 
  88:Src/main.c    ****   /* USER CODE END SysInit */
  89:Src/main.c    **** 
  90:Src/main.c    ****   /* Initialize all configured peripherals */
  91:Src/main.c    ****   MX_GPIO_Init();
ARM GAS  /tmp/ccRZPzLG.s 			page 3


  92:Src/main.c    ****   MX_CAN_Init();
  93:Src/main.c    ****   /* USER CODE BEGIN 2 */
  94:Src/main.c    ****   if ( HAL_CAN_Start(&hcan) != HAL_OK )
  95:Src/main.c    ****   {
  96:Src/main.c    ****       Error_Handler();
  97:Src/main.c    ****   }
  98:Src/main.c    ****   /* USER CODE END 2 */
  99:Src/main.c    ****  
 100:Src/main.c    ****  
 101:Src/main.c    **** 
 102:Src/main.c    ****   /* Infinite loop */
 103:Src/main.c    ****   /* USER CODE BEGIN WHILE */
 104:Src/main.c    ****   uint32_t speed = 0;
 105:Src/main.c    **** 
 106:Src/main.c    ****   while (1)
 107:Src/main.c    ****   {
 108:Src/main.c    ****     /* USER CODE END WHILE */
 109:Src/main.c    ****     HAL_GPIO_TogglePin(LED_BUILTIN_GPIO_Port, LED_BUILTIN_Pin);
 110:Src/main.c    ****     
 111:Src/main.c    ****     while ( HAL_CAN_GetTxMailboxesFreeLevel(&hcan) == 0)
 112:Src/main.c    ****     {
 113:Src/main.c    ****         __asm("nop");
 114:Src/main.c    ****     }
 115:Src/main.c    ****     
 116:Src/main.c    ****     char msg[64] = {0};
 117:Src/main.c    ****     sprintf(&msg[0], "Speed: %lu", speed++);
 118:Src/main.c    ****     CAN_TxHeaderTypeDef TxHeader1;
 119:Src/main.c    ****     TxHeader1.StdId = ID_Speed;
 120:Src/main.c    ****     TxHeader1.ExtId = 0x01;
 121:Src/main.c    ****     TxHeader1.IDE = CAN_ID_STD;
 122:Src/main.c    ****     TxHeader1.RTR = CAN_RTR_DATA;
 123:Src/main.c    ****     TxHeader1.DLC = sizeof(msg);
 124:Src/main.c    ****     TxHeader1.TransmitGlobalTime = DISABLE;
 125:Src/main.c    ****     uint32_t TxMailbox = 0;
 126:Src/main.c    ****     
 127:Src/main.c    ****     if ( HAL_CAN_AddTxMessage(&hcan, &TxHeader1, (uint8_t*)&msg[0], &TxMailbox) != HAL_OK )
 128:Src/main.c    ****     {
 129:Src/main.c    ****         __asm("nop");
 130:Src/main.c    ****     }
 131:Src/main.c    ****     
 132:Src/main.c    ****     HAL_Delay(500);
 133:Src/main.c    ****     /* USER CODE BEGIN 3 */
 134:Src/main.c    ****   }
 135:Src/main.c    ****   /* USER CODE END 3 */
 136:Src/main.c    **** }
 137:Src/main.c    **** 
 138:Src/main.c    **** /**
 139:Src/main.c    ****   * @brief System Clock Configuration
 140:Src/main.c    ****   * @retval None
 141:Src/main.c    ****   */
 142:Src/main.c    **** void SystemClock_Config(void)
 143:Src/main.c    **** {
 144:Src/main.c    ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 145:Src/main.c    ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 146:Src/main.c    **** 
 147:Src/main.c    ****   /** Initializes the CPU, AHB and APB busses clocks 
 148:Src/main.c    ****   */
ARM GAS  /tmp/ccRZPzLG.s 			page 4


 149:Src/main.c    ****   RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 150:Src/main.c    ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 151:Src/main.c    ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 152:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 153:Src/main.c    ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 154:Src/main.c    ****   {
 155:Src/main.c    ****     Error_Handler();
 156:Src/main.c    ****   }
 157:Src/main.c    ****   /** Initializes the CPU, AHB and APB busses clocks 
 158:Src/main.c    ****   */
 159:Src/main.c    ****   RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 160:Src/main.c    ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 161:Src/main.c    ****   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 162:Src/main.c    ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 163:Src/main.c    ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 164:Src/main.c    ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 165:Src/main.c    **** 
 166:Src/main.c    ****   if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 167:Src/main.c    ****   {
 168:Src/main.c    ****     Error_Handler();
 169:Src/main.c    ****   }
 170:Src/main.c    **** }
 171:Src/main.c    **** 
 172:Src/main.c    **** /**
 173:Src/main.c    ****   * @brief CAN Initialization Function
 174:Src/main.c    ****   * @param None
 175:Src/main.c    ****   * @retval None
 176:Src/main.c    ****   */
 177:Src/main.c    **** static void MX_CAN_Init(void)
 178:Src/main.c    **** {
 179:Src/main.c    **** 
 180:Src/main.c    ****   /* USER CODE BEGIN CAN_Init 0 */
 181:Src/main.c    **** 
 182:Src/main.c    ****   /* USER CODE END CAN_Init 0 */
 183:Src/main.c    **** 
 184:Src/main.c    ****   /* USER CODE BEGIN CAN_Init 1 */
 185:Src/main.c    **** 
 186:Src/main.c    ****   /* USER CODE END CAN_Init 1 */
 187:Src/main.c    ****   hcan.Instance = CAN1;
 188:Src/main.c    ****   hcan.Init.Prescaler = 16;
 189:Src/main.c    ****   hcan.Init.Mode = CAN_MODE_NORMAL;
 190:Src/main.c    ****   hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 191:Src/main.c    ****   hcan.Init.TimeSeg1 = CAN_BS1_1TQ;
 192:Src/main.c    ****   hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 193:Src/main.c    ****   hcan.Init.TimeTriggeredMode = DISABLE;
 194:Src/main.c    ****   hcan.Init.AutoBusOff = DISABLE;
 195:Src/main.c    ****   hcan.Init.AutoWakeUp = DISABLE;
 196:Src/main.c    ****   hcan.Init.AutoRetransmission = DISABLE;
 197:Src/main.c    ****   hcan.Init.ReceiveFifoLocked = DISABLE;
 198:Src/main.c    ****   hcan.Init.TransmitFifoPriority = DISABLE;
 199:Src/main.c    ****   if (HAL_CAN_Init(&hcan) != HAL_OK)
 200:Src/main.c    ****   {
 201:Src/main.c    ****     Error_Handler();
 202:Src/main.c    ****   }
 203:Src/main.c    ****   /* USER CODE BEGIN CAN_Init 2 */
 204:Src/main.c    **** 
 205:Src/main.c    ****   /* USER CODE END CAN_Init 2 */
ARM GAS  /tmp/ccRZPzLG.s 			page 5


 206:Src/main.c    **** 
 207:Src/main.c    **** }
 208:Src/main.c    **** 
 209:Src/main.c    **** /**
 210:Src/main.c    ****   * @brief GPIO Initialization Function
 211:Src/main.c    ****   * @param None
 212:Src/main.c    ****   * @retval None
 213:Src/main.c    ****   */
 214:Src/main.c    **** static void MX_GPIO_Init(void)
 215:Src/main.c    **** {
  25              		.loc 1 215 0
  26              		.cfi_startproc
  27              		@ args = 0, pretend = 0, frame = 24
  28              		@ frame_needed = 0, uses_anonymous_args = 0
  29 0000 30B5     		push	{r4, r5, lr}
  30              	.LCFI0:
  31              		.cfi_def_cfa_offset 12
  32              		.cfi_offset 4, -12
  33              		.cfi_offset 5, -8
  34              		.cfi_offset 14, -4
  35 0002 87B0     		sub	sp, sp, #28
  36              	.LCFI1:
  37              		.cfi_def_cfa_offset 40
 216:Src/main.c    ****   GPIO_InitTypeDef GPIO_InitStruct = {0};
  38              		.loc 1 216 0
  39 0004 0024     		movs	r4, #0
  40 0006 0294     		str	r4, [sp, #8]
  41 0008 0394     		str	r4, [sp, #12]
  42 000a 0494     		str	r4, [sp, #16]
  43 000c 0594     		str	r4, [sp, #20]
  44              	.LBB2:
 217:Src/main.c    **** 
 218:Src/main.c    ****   /* GPIO Ports Clock Enable */
 219:Src/main.c    ****   __HAL_RCC_GPIOC_CLK_ENABLE();
  45              		.loc 1 219 0
  46 000e 144B     		ldr	r3, .L3
  47 0010 9A69     		ldr	r2, [r3, #24]
  48 0012 42F01002 		orr	r2, r2, #16
  49 0016 9A61     		str	r2, [r3, #24]
  50 0018 9A69     		ldr	r2, [r3, #24]
  51 001a 02F01002 		and	r2, r2, #16
  52 001e 0092     		str	r2, [sp]
  53 0020 009A     		ldr	r2, [sp]
  54              	.LBE2:
  55              	.LBB3:
 220:Src/main.c    ****   __HAL_RCC_GPIOA_CLK_ENABLE();
  56              		.loc 1 220 0
  57 0022 9A69     		ldr	r2, [r3, #24]
  58 0024 42F00402 		orr	r2, r2, #4
  59 0028 9A61     		str	r2, [r3, #24]
  60 002a 9B69     		ldr	r3, [r3, #24]
  61 002c 03F00403 		and	r3, r3, #4
  62 0030 0193     		str	r3, [sp, #4]
  63 0032 019B     		ldr	r3, [sp, #4]
  64              	.LBE3:
 221:Src/main.c    **** 
 222:Src/main.c    ****   /*Configure GPIO pin Output Level */
ARM GAS  /tmp/ccRZPzLG.s 			page 6


 223:Src/main.c    ****   HAL_GPIO_WritePin(LED_BUILTIN_GPIO_Port, LED_BUILTIN_Pin, GPIO_PIN_RESET);
  65              		.loc 1 223 0
  66 0034 0B4D     		ldr	r5, .L3+4
  67 0036 2246     		mov	r2, r4
  68 0038 4FF40051 		mov	r1, #8192
  69 003c 2846     		mov	r0, r5
  70 003e FFF7FEFF 		bl	HAL_GPIO_WritePin
  71              	.LVL0:
 224:Src/main.c    **** 
 225:Src/main.c    ****   /*Configure GPIO pin : LED_BUILTIN_Pin */
 226:Src/main.c    ****   GPIO_InitStruct.Pin = LED_BUILTIN_Pin;
  72              		.loc 1 226 0
  73 0042 4FF40053 		mov	r3, #8192
  74 0046 0293     		str	r3, [sp, #8]
 227:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  75              		.loc 1 227 0
  76 0048 0123     		movs	r3, #1
  77 004a 0393     		str	r3, [sp, #12]
 228:Src/main.c    ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
  78              		.loc 1 228 0
  79 004c 0494     		str	r4, [sp, #16]
 229:Src/main.c    ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  80              		.loc 1 229 0
  81 004e 0223     		movs	r3, #2
  82 0050 0593     		str	r3, [sp, #20]
 230:Src/main.c    ****   HAL_GPIO_Init(LED_BUILTIN_GPIO_Port, &GPIO_InitStruct);
  83              		.loc 1 230 0
  84 0052 02A9     		add	r1, sp, #8
  85 0054 2846     		mov	r0, r5
  86 0056 FFF7FEFF 		bl	HAL_GPIO_Init
  87              	.LVL1:
 231:Src/main.c    **** 
 232:Src/main.c    **** }
  88              		.loc 1 232 0
  89 005a 07B0     		add	sp, sp, #28
  90              	.LCFI2:
  91              		.cfi_def_cfa_offset 12
  92              		@ sp needed
  93 005c 30BD     		pop	{r4, r5, pc}
  94              	.L4:
  95 005e 00BF     		.align	2
  96              	.L3:
  97 0060 00100240 		.word	1073876992
  98 0064 00100140 		.word	1073811456
  99              		.cfi_endproc
 100              	.LFE69:
 102              		.section	.text.Error_Handler,"ax",%progbits
 103              		.align	1
 104              		.global	Error_Handler
 105              		.syntax unified
 106              		.thumb
 107              		.thumb_func
 108              		.fpu softvfp
 110              	Error_Handler:
 111              	.LFB70:
 233:Src/main.c    **** 
 234:Src/main.c    **** /* USER CODE BEGIN 4 */
ARM GAS  /tmp/ccRZPzLG.s 			page 7


 235:Src/main.c    **** 
 236:Src/main.c    **** /* USER CODE END 4 */
 237:Src/main.c    **** 
 238:Src/main.c    **** /**
 239:Src/main.c    ****   * @brief  This function is executed in case of error occurrence.
 240:Src/main.c    ****   * @retval None
 241:Src/main.c    ****   */
 242:Src/main.c    **** void Error_Handler(void)
 243:Src/main.c    **** {
 112              		.loc 1 243 0
 113              		.cfi_startproc
 114              		@ Volatile: function does not return.
 115              		@ args = 0, pretend = 0, frame = 0
 116              		@ frame_needed = 0, uses_anonymous_args = 0
 117              		@ link register save eliminated.
 118              	.L6:
 119 0000 FEE7     		b	.L6
 120              		.cfi_endproc
 121              	.LFE70:
 123              		.section	.text.MX_CAN_Init,"ax",%progbits
 124              		.align	1
 125              		.syntax unified
 126              		.thumb
 127              		.thumb_func
 128              		.fpu softvfp
 130              	MX_CAN_Init:
 131              	.LFB68:
 178:Src/main.c    **** 
 132              		.loc 1 178 0
 133              		.cfi_startproc
 134              		@ args = 0, pretend = 0, frame = 0
 135              		@ frame_needed = 0, uses_anonymous_args = 0
 178:Src/main.c    **** 
 136              		.loc 1 178 0
 137 0000 08B5     		push	{r3, lr}
 138              	.LCFI3:
 139              		.cfi_def_cfa_offset 8
 140              		.cfi_offset 3, -8
 141              		.cfi_offset 14, -4
 187:Src/main.c    ****   hcan.Init.Prescaler = 16;
 142              		.loc 1 187 0
 143 0002 0B48     		ldr	r0, .L11
 144 0004 0B4B     		ldr	r3, .L11+4
 145 0006 0360     		str	r3, [r0]
 188:Src/main.c    ****   hcan.Init.Mode = CAN_MODE_NORMAL;
 146              		.loc 1 188 0
 147 0008 1023     		movs	r3, #16
 148 000a 4360     		str	r3, [r0, #4]
 189:Src/main.c    ****   hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 149              		.loc 1 189 0
 150 000c 0023     		movs	r3, #0
 151 000e 8360     		str	r3, [r0, #8]
 190:Src/main.c    ****   hcan.Init.TimeSeg1 = CAN_BS1_1TQ;
 152              		.loc 1 190 0
 153 0010 C360     		str	r3, [r0, #12]
 191:Src/main.c    ****   hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 154              		.loc 1 191 0
ARM GAS  /tmp/ccRZPzLG.s 			page 8


 155 0012 0361     		str	r3, [r0, #16]
 192:Src/main.c    ****   hcan.Init.TimeTriggeredMode = DISABLE;
 156              		.loc 1 192 0
 157 0014 4361     		str	r3, [r0, #20]
 193:Src/main.c    ****   hcan.Init.AutoBusOff = DISABLE;
 158              		.loc 1 193 0
 159 0016 0376     		strb	r3, [r0, #24]
 194:Src/main.c    ****   hcan.Init.AutoWakeUp = DISABLE;
 160              		.loc 1 194 0
 161 0018 4376     		strb	r3, [r0, #25]
 195:Src/main.c    ****   hcan.Init.AutoRetransmission = DISABLE;
 162              		.loc 1 195 0
 163 001a 8376     		strb	r3, [r0, #26]
 196:Src/main.c    ****   hcan.Init.ReceiveFifoLocked = DISABLE;
 164              		.loc 1 196 0
 165 001c C376     		strb	r3, [r0, #27]
 197:Src/main.c    ****   hcan.Init.TransmitFifoPriority = DISABLE;
 166              		.loc 1 197 0
 167 001e 0377     		strb	r3, [r0, #28]
 198:Src/main.c    ****   if (HAL_CAN_Init(&hcan) != HAL_OK)
 168              		.loc 1 198 0
 169 0020 4377     		strb	r3, [r0, #29]
 199:Src/main.c    ****   {
 170              		.loc 1 199 0
 171 0022 FFF7FEFF 		bl	HAL_CAN_Init
 172              	.LVL2:
 173 0026 00B9     		cbnz	r0, .L10
 174 0028 08BD     		pop	{r3, pc}
 175              	.L10:
 201:Src/main.c    ****   }
 176              		.loc 1 201 0
 177 002a FFF7FEFF 		bl	Error_Handler
 178              	.LVL3:
 179              	.L12:
 180 002e 00BF     		.align	2
 181              	.L11:
 182 0030 00000000 		.word	hcan
 183 0034 00640040 		.word	1073767424
 184              		.cfi_endproc
 185              	.LFE68:
 187              		.section	.text.SystemClock_Config,"ax",%progbits
 188              		.align	1
 189              		.global	SystemClock_Config
 190              		.syntax unified
 191              		.thumb
 192              		.thumb_func
 193              		.fpu softvfp
 195              	SystemClock_Config:
 196              	.LFB67:
 143:Src/main.c    ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 197              		.loc 1 143 0
 198              		.cfi_startproc
 199              		@ args = 0, pretend = 0, frame = 64
 200              		@ frame_needed = 0, uses_anonymous_args = 0
 201 0000 00B5     		push	{lr}
 202              	.LCFI4:
 203              		.cfi_def_cfa_offset 4
ARM GAS  /tmp/ccRZPzLG.s 			page 9


 204              		.cfi_offset 14, -4
 205 0002 91B0     		sub	sp, sp, #68
 206              	.LCFI5:
 207              		.cfi_def_cfa_offset 72
 144:Src/main.c    ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 208              		.loc 1 144 0
 209 0004 2822     		movs	r2, #40
 210 0006 0021     		movs	r1, #0
 211 0008 06A8     		add	r0, sp, #24
 212 000a FFF7FEFF 		bl	memset
 213              	.LVL4:
 145:Src/main.c    **** 
 214              		.loc 1 145 0
 215 000e 0023     		movs	r3, #0
 216 0010 0193     		str	r3, [sp, #4]
 217 0012 0293     		str	r3, [sp, #8]
 218 0014 0393     		str	r3, [sp, #12]
 219 0016 0493     		str	r3, [sp, #16]
 220 0018 0593     		str	r3, [sp, #20]
 149:Src/main.c    ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 221              		.loc 1 149 0
 222 001a 0223     		movs	r3, #2
 223 001c 0693     		str	r3, [sp, #24]
 150:Src/main.c    ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 224              		.loc 1 150 0
 225 001e 0123     		movs	r3, #1
 226 0020 0A93     		str	r3, [sp, #40]
 151:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 227              		.loc 1 151 0
 228 0022 1023     		movs	r3, #16
 229 0024 0B93     		str	r3, [sp, #44]
 153:Src/main.c    ****   {
 230              		.loc 1 153 0
 231 0026 06A8     		add	r0, sp, #24
 232 0028 FFF7FEFF 		bl	HAL_RCC_OscConfig
 233              	.LVL5:
 234 002c 68B9     		cbnz	r0, .L17
 159:Src/main.c    ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 235              		.loc 1 159 0
 236 002e 0F23     		movs	r3, #15
 237 0030 0193     		str	r3, [sp, #4]
 161:Src/main.c    ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 238              		.loc 1 161 0
 239 0032 0021     		movs	r1, #0
 240 0034 0291     		str	r1, [sp, #8]
 162:Src/main.c    ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 241              		.loc 1 162 0
 242 0036 0391     		str	r1, [sp, #12]
 163:Src/main.c    ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 243              		.loc 1 163 0
 244 0038 0491     		str	r1, [sp, #16]
 164:Src/main.c    **** 
 245              		.loc 1 164 0
 246 003a 0591     		str	r1, [sp, #20]
 166:Src/main.c    ****   {
 247              		.loc 1 166 0
 248 003c 01A8     		add	r0, sp, #4
ARM GAS  /tmp/ccRZPzLG.s 			page 10


 249 003e FFF7FEFF 		bl	HAL_RCC_ClockConfig
 250              	.LVL6:
 251 0042 20B9     		cbnz	r0, .L18
 170:Src/main.c    **** 
 252              		.loc 1 170 0
 253 0044 11B0     		add	sp, sp, #68
 254              	.LCFI6:
 255              		.cfi_remember_state
 256              		.cfi_def_cfa_offset 4
 257              		@ sp needed
 258 0046 5DF804FB 		ldr	pc, [sp], #4
 259              	.L17:
 260              	.LCFI7:
 261              		.cfi_restore_state
 155:Src/main.c    ****   }
 262              		.loc 1 155 0
 263 004a FFF7FEFF 		bl	Error_Handler
 264              	.LVL7:
 265              	.L18:
 168:Src/main.c    ****   }
 266              		.loc 1 168 0
 267 004e FFF7FEFF 		bl	Error_Handler
 268              	.LVL8:
 269              		.cfi_endproc
 270              	.LFE67:
 272              		.section	.text.main,"ax",%progbits
 273              		.align	1
 274              		.global	main
 275              		.syntax unified
 276              		.thumb
 277              		.thumb_func
 278              		.fpu softvfp
 280              	main:
 281              	.LFB66:
  68:Src/main.c    ****   /* USER CODE BEGIN 1 */
 282              		.loc 1 68 0
 283              		.cfi_startproc
 284              		@ args = 0, pretend = 0, frame = 96
 285              		@ frame_needed = 0, uses_anonymous_args = 0
 286 0000 70B5     		push	{r4, r5, r6, lr}
 287              	.LCFI8:
 288              		.cfi_def_cfa_offset 16
 289              		.cfi_offset 4, -16
 290              		.cfi_offset 5, -12
 291              		.cfi_offset 6, -8
 292              		.cfi_offset 14, -4
 293 0002 98B0     		sub	sp, sp, #96
 294              	.LCFI9:
 295              		.cfi_def_cfa_offset 112
  77:Src/main.c    **** 
 296              		.loc 1 77 0
 297 0004 FFF7FEFF 		bl	HAL_Init
 298              	.LVL9:
  84:Src/main.c    **** 
 299              		.loc 1 84 0
 300 0008 FFF7FEFF 		bl	SystemClock_Config
 301              	.LVL10:
ARM GAS  /tmp/ccRZPzLG.s 			page 11


  91:Src/main.c    ****   MX_CAN_Init();
 302              		.loc 1 91 0
 303 000c FFF7FEFF 		bl	MX_GPIO_Init
 304              	.LVL11:
  92:Src/main.c    ****   /* USER CODE BEGIN 2 */
 305              		.loc 1 92 0
 306 0010 FFF7FEFF 		bl	MX_CAN_Init
 307              	.LVL12:
  94:Src/main.c    ****   {
 308              		.loc 1 94 0
 309 0014 1C48     		ldr	r0, .L26
 310 0016 FFF7FEFF 		bl	HAL_CAN_Start
 311              	.LVL13:
 312 001a 08B1     		cbz	r0, .L24
  96:Src/main.c    ****   }
 313              		.loc 1 96 0
 314 001c FFF7FEFF 		bl	Error_Handler
 315              	.LVL14:
 316              	.L24:
 317 0020 0024     		movs	r4, #0
 318 0022 2AE0     		b	.L20
 319              	.LVL15:
 320              	.L22:
 321              	.LBB4:
 113:Src/main.c    ****     }
 322              		.loc 1 113 0
 323              		.syntax unified
 324              	@ 113 "Src/main.c" 1
 325 0024 00BF     		nop
 326              	@ 0 "" 2
 327              		.thumb
 328              		.syntax unified
 329              	.L21:
 111:Src/main.c    ****     {
 330              		.loc 1 111 0
 331 0026 1848     		ldr	r0, .L26
 332 0028 FFF7FEFF 		bl	HAL_CAN_GetTxMailboxesFreeLevel
 333              	.LVL16:
 334 002c 0028     		cmp	r0, #0
 335 002e F9D0     		beq	.L22
 116:Src/main.c    ****     sprintf(&msg[0], "Speed: %lu", speed++);
 336              		.loc 1 116 0
 337 0030 4025     		movs	r5, #64
 338 0032 2A46     		mov	r2, r5
 339 0034 0021     		movs	r1, #0
 340 0036 08A8     		add	r0, sp, #32
 341 0038 FFF7FEFF 		bl	memset
 342              	.LVL17:
 117:Src/main.c    ****     CAN_TxHeaderTypeDef TxHeader1;
 343              		.loc 1 117 0
 344 003c 661C     		adds	r6, r4, #1
 345              	.LVL18:
 346 003e 2246     		mov	r2, r4
 347 0040 1249     		ldr	r1, .L26+4
 348 0042 08A8     		add	r0, sp, #32
 349 0044 FFF7FEFF 		bl	sprintf
 350              	.LVL19:
ARM GAS  /tmp/ccRZPzLG.s 			page 12


 119:Src/main.c    ****     TxHeader1.ExtId = 0x01;
 351              		.loc 1 119 0
 352 0048 6423     		movs	r3, #100
 353 004a 0293     		str	r3, [sp, #8]
 120:Src/main.c    ****     TxHeader1.IDE = CAN_ID_STD;
 354              		.loc 1 120 0
 355 004c 0123     		movs	r3, #1
 356 004e 0393     		str	r3, [sp, #12]
 121:Src/main.c    ****     TxHeader1.RTR = CAN_RTR_DATA;
 357              		.loc 1 121 0
 358 0050 0022     		movs	r2, #0
 359 0052 0492     		str	r2, [sp, #16]
 122:Src/main.c    ****     TxHeader1.DLC = sizeof(msg);
 360              		.loc 1 122 0
 361 0054 0592     		str	r2, [sp, #20]
 123:Src/main.c    ****     TxHeader1.TransmitGlobalTime = DISABLE;
 362              		.loc 1 123 0
 363 0056 0695     		str	r5, [sp, #24]
 124:Src/main.c    ****     uint32_t TxMailbox = 0;
 364              		.loc 1 124 0
 365 0058 8DF81C20 		strb	r2, [sp, #28]
 125:Src/main.c    ****     
 366              		.loc 1 125 0
 367 005c 18AB     		add	r3, sp, #96
 368 005e 43F85C2D 		str	r2, [r3, #-92]!
 127:Src/main.c    ****     {
 369              		.loc 1 127 0
 370 0062 08AA     		add	r2, sp, #32
 371 0064 02A9     		add	r1, sp, #8
 372 0066 0848     		ldr	r0, .L26
 373 0068 FFF7FEFF 		bl	HAL_CAN_AddTxMessage
 374              	.LVL20:
 375 006c 00B1     		cbz	r0, .L23
 129:Src/main.c    ****     }
 376              		.loc 1 129 0
 377              		.syntax unified
 378              	@ 129 "Src/main.c" 1
 379 006e 00BF     		nop
 380              	@ 0 "" 2
 381              		.thumb
 382              		.syntax unified
 383              	.L23:
 132:Src/main.c    ****     /* USER CODE BEGIN 3 */
 384              		.loc 1 132 0
 385 0070 4FF4FA70 		mov	r0, #500
 386 0074 FFF7FEFF 		bl	HAL_Delay
 387              	.LVL21:
 117:Src/main.c    ****     CAN_TxHeaderTypeDef TxHeader1;
 388              		.loc 1 117 0
 389 0078 3446     		mov	r4, r6
 390              	.LVL22:
 391              	.L20:
 109:Src/main.c    ****     
 392              		.loc 1 109 0
 393 007a 4FF40051 		mov	r1, #8192
 394 007e 0448     		ldr	r0, .L26+8
 395 0080 FFF7FEFF 		bl	HAL_GPIO_TogglePin
ARM GAS  /tmp/ccRZPzLG.s 			page 13


 396              	.LVL23:
 111:Src/main.c    ****     {
 397              		.loc 1 111 0
 398 0084 CFE7     		b	.L21
 399              	.L27:
 400 0086 00BF     		.align	2
 401              	.L26:
 402 0088 00000000 		.word	hcan
 403 008c 00000000 		.word	.LC0
 404 0090 00100140 		.word	1073811456
 405              	.LBE4:
 406              		.cfi_endproc
 407              	.LFE66:
 409              		.comm	hcan,40,4
 410              		.section	.rodata.main.str1.4,"aMS",%progbits,1
 411              		.align	2
 412              	.LC0:
 413 0000 53706565 		.ascii	"Speed: %lu\000"
 413      643A2025 
 413      6C7500
 414              		.text
 415              	.Letext0:
 416              		.file 2 "/usr/include/newlib/machine/_default_types.h"
 417              		.file 3 "/usr/include/newlib/sys/_stdint.h"
 418              		.file 4 "Drivers/CMSIS/Include/core_cm3.h"
 419              		.file 5 "Drivers/CMSIS/Device/ST/STM32F1xx/Include/system_stm32f1xx.h"
 420              		.file 6 "Drivers/CMSIS/Device/ST/STM32F1xx/Include/stm32f103xb.h"
 421              		.file 7 "Drivers/CMSIS/Device/ST/STM32F1xx/Include/stm32f1xx.h"
 422              		.file 8 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_def.h"
 423              		.file 9 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_rcc.h"
 424              		.file 10 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_rcc_ex.h"
 425              		.file 11 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_gpio.h"
 426              		.file 12 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_can.h"
 427              		.file 13 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal.h"
 428              		.file 14 "/usr/include/newlib/sys/lock.h"
 429              		.file 15 "/usr/include/newlib/sys/_types.h"
 430              		.file 16 "/usr/lib/gcc/arm-none-eabi/6.3.1/include/stddef.h"
 431              		.file 17 "/usr/include/newlib/sys/reent.h"
 432              		.file 18 "/usr/include/newlib/stdio.h"
 433              		.file 19 "Inc/main.h"
ARM GAS  /tmp/ccRZPzLG.s 			page 14


DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
     /tmp/ccRZPzLG.s:16     .text.MX_GPIO_Init:0000000000000000 $t
     /tmp/ccRZPzLG.s:22     .text.MX_GPIO_Init:0000000000000000 MX_GPIO_Init
     /tmp/ccRZPzLG.s:97     .text.MX_GPIO_Init:0000000000000060 $d
     /tmp/ccRZPzLG.s:103    .text.Error_Handler:0000000000000000 $t
     /tmp/ccRZPzLG.s:110    .text.Error_Handler:0000000000000000 Error_Handler
     /tmp/ccRZPzLG.s:124    .text.MX_CAN_Init:0000000000000000 $t
     /tmp/ccRZPzLG.s:130    .text.MX_CAN_Init:0000000000000000 MX_CAN_Init
     /tmp/ccRZPzLG.s:182    .text.MX_CAN_Init:0000000000000030 $d
                            *COM*:0000000000000028 hcan
     /tmp/ccRZPzLG.s:188    .text.SystemClock_Config:0000000000000000 $t
     /tmp/ccRZPzLG.s:195    .text.SystemClock_Config:0000000000000000 SystemClock_Config
     /tmp/ccRZPzLG.s:273    .text.main:0000000000000000 $t
     /tmp/ccRZPzLG.s:280    .text.main:0000000000000000 main
     /tmp/ccRZPzLG.s:402    .text.main:0000000000000088 $d
     /tmp/ccRZPzLG.s:411    .rodata.main.str1.4:0000000000000000 $d
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
HAL_GPIO_WritePin
HAL_GPIO_Init
HAL_CAN_Init
memset
HAL_RCC_OscConfig
HAL_RCC_ClockConfig
HAL_Init
HAL_CAN_Start
HAL_CAN_GetTxMailboxesFreeLevel
sprintf
HAL_CAN_AddTxMessage
HAL_Delay
HAL_GPIO_TogglePin
